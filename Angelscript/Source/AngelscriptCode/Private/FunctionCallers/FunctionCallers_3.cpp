#pragma once
//#include"FunctionCallers.h"
/*
{ ERASE_METHOD_PTR(UShapeComponent, SetLineThickness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UShapeComponent, SetbDynamicObstacle, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UShapeComponent, SetbUseSystemDefaultObstacleAreaClass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UShapeComponent, GetLineThickness, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UBoxComponent, GetScaledBoxExtent, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UBoxComponent, GetUnscaledBoxExtent, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UBoxComponent, SetBoxExtent, (FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBoxComponent, GetBoxExtent, (), ERASE_ARGUMENT_PACK(const FVector&)) },


{ ERASE_METHOD_PTR(UCapsuleComponent, GetScaledCapsuleHalfHeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetScaledCapsuleHalfHeight_WithoutHemisphere, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetScaledCapsuleRadius, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetScaledCapsuleSize, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetScaledCapsuleSize_WithoutHemisphere, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetShapeScale, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetUnscaledCapsuleHalfHeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetUnscaledCapsuleHalfHeight_WithoutHemisphere, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetUnscaledCapsuleRadius, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetUnscaledCapsuleSize, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetUnscaledCapsuleSize_WithoutHemisphere, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, SetCapsuleHalfHeight, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, SetCapsuleRadius, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, SetCapsuleSize, (float32, float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetCapsuleHalfHeight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCapsuleComponent, GetCapsuleRadius, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UMovementComponent, ConstrainDirectionToPlane, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UMovementComponent, ConstrainLocationToPlane, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UMovementComponent, ConstrainNormalToPlane, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetGravityZ, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetMaxSpeed, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetPhysicsVolume, (), ERASE_ARGUMENT_PACK(APhysicsVolume*)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetPlaneConstraintAxisSetting, (), ERASE_ARGUMENT_PACK(EPlaneConstraintAxisSetting)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetPlaneConstraintNormal, (), ERASE_ARGUMENT_PACK(const FVector&)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetPlaneConstraintOrigin, (), ERASE_ARGUMENT_PACK(const FVector&)) },
{ ERASE_METHOD_PTR(UMovementComponent, IsExceedingMaxSpeed, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, MoveUpdatedComponent, (FVector, FRotator, FHitResult&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetPlaneConstraintAxisSetting, (EPlaneConstraintAxisSetting), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetPlaneConstraintEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetPlaneConstraintFromVectors, (FVector, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetPlaneConstraintNormal, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetPlaneConstraintOrigin, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetUpdatedComponent, (USceneComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, SnapUpdatedComponentToPlane, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, StopMovementImmediately, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetUpdatedComponent, (), ERASE_ARGUMENT_PACK(USceneComponent*)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbUpdateOnlyIfRendered, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbUpdateOnlyIfRendered, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbAutoUpdateTickRegistration, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbAutoUpdateTickRegistration, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbTickBeforeOwner, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbTickBeforeOwner, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbAutoRegisterUpdatedComponent, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbAutoRegisterUpdatedComponent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbConstrainToPlane, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbConstrainToPlane, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbSnapToPlaneAtStart, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbSnapToPlaneAtStart, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbAutoRegisterPhysicsVolumeUpdates, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbAutoRegisterPhysicsVolumeUpdates, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovementComponent, GetbComponentShouldUpdatePhysicsVolume, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovementComponent, SetbComponentShouldUpdatePhysicsVolume, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNavMovementComponent, IsCrouching, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, IsFalling, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, IsFlying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, IsMovingOnGround, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, IsSwimming, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, StopActiveMovement, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, StopMovementKeepPathing, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, SetbUpdateNavAgentWithOwnersCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, SetbUseAccelerationForPaths, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavMovementComponent, SetbUseFixedBrakingDistanceForPaths, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPawnMovementComponent, AddInputVector, (FVector, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPawnMovementComponent, ConsumeInputVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPawnMovementComponent, GetLastInputVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPawnMovementComponent, GetPawnOwner, (), ERASE_ARGUMENT_PACK(APawn*)) },
{ ERASE_METHOD_PTR(UPawnMovementComponent, GetPendingInputVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPawnMovementComponent, IsMoveInputIgnored, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UCharacterMovementComponent, AddForce, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, AddImpulse, (FVector, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, CalcVelocity, (float32, float32, bool, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, ClearAccumulatedForces, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, DisableMovement, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetAnalogInputModifier, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetCharacterOwner, (), ERASE_ARGUMENT_PACK(ACharacter*)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetCrouchedHalfHeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetCurrentAcceleration, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetGravityDirection, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetImpartedMovementBaseVelocity, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetLastUpdateLocation, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetLastUpdateRequestedVelocity, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetLastUpdateRotation, (), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetLastUpdateVelocity, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMaxAcceleration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMaxBrakingDeceleration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMaxJumpHeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMaxJumpHeightWithJumpTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMinAnalogSpeed, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMovementBase, (), ERASE_ARGUMENT_PACK(UPrimitiveComponent*)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetPerchRadiusThreshold, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetValidPerchRadius, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, HasCustomGravity, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, IsWalkable, (const FHitResult&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, IsWalking, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, ComputeFloorDistance, (FVector, float32, float32, float32, FFindFloorResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, FindFloor, (FVector, FFindFloorResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetWalkableFloorAngle, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetWalkableFloorZ, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetAvoidanceEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetAvoidanceGroup, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetAvoidanceGroupMask, (const FNavAvoidanceMask&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetCrouchedHalfHeight, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetGravityDirection, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetGroupsToAvoid, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetGroupsToAvoidMask, (const FNavAvoidanceMask&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetGroupsToIgnore, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetGroupsToIgnoreMask, (const FNavAvoidanceMask&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetMovementMode, (EMovementMode, uint8 = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetWalkableFloorAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetWalkableFloorZ, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetMovementMode, (), ERASE_ARGUMENT_PACK(const EMovementMode&)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetMaxAcceleration, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetPerchRadiusThreshold, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbUseSeparateBrakingFriction, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbUseSeparateBrakingFriction, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbApplyGravityWhileJumping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbApplyGravityWhileJumping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbUseControllerDesiredRotation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbUseControllerDesiredRotation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbOrientRotationToMovement, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbOrientRotationToMovement, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbSweepWhileNavWalking, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbSweepWhileNavWalking, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbEnableScopedMovementUpdates, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbEnableServerDualMoveScopedMovementUpdates, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbRunPhysicsWithNoController, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbRunPhysicsWithNoController, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbForceNextFloorCheck, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbForceNextFloorCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbCanWalkOffLedges, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbCanWalkOffLedges, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbCanWalkOffLedgesWhenCrouching, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbCanWalkOffLedgesWhenCrouching, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbNetworkSkipProxyPredictionOnNetUpdate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbNetworkAlwaysReplicateTransformUpdateTimestamp, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbEnablePhysicsInteraction, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbEnablePhysicsInteraction, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbTouchForceScaledToMass, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbTouchForceScaledToMass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbPushForceScaledToMass, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbPushForceScaledToMass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbPushForceUsingZOffset, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbPushForceUsingZOffset, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbScalePushForceToVelocity, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbScalePushForceToVelocity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbMaintainHorizontalGroundVelocity, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbMaintainHorizontalGroundVelocity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbImpartBaseVelocityX, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbImpartBaseVelocityX, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbImpartBaseVelocityY, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbImpartBaseVelocityY, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbImpartBaseVelocityZ, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbImpartBaseVelocityZ, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbImpartBaseAngularVelocity, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbImpartBaseAngularVelocity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbJustTeleported, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbJustTeleported, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbIgnoreClientMovementErrorChecksAndCorrection, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbIgnoreClientMovementErrorChecksAndCorrection, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbServerAcceptClientAuthoritativePosition, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbServerAcceptClientAuthoritativePosition, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbNotifyApex, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbNotifyApex, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbWantsToCrouch, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbCrouchMaintainsBaseLocation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbCrouchMaintainsBaseLocation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbIgnoreBaseRotation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbIgnoreBaseRotation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbAlwaysCheckFloor, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbAlwaysCheckFloor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbUseFlatBaseForFloorChecks, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbUseFlatBaseForFloorChecks, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbUseRVOAvoidance, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbUseRVOAvoidance, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbRequestedMoveUseAcceleration, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbRequestedMoveUseAcceleration, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbAllowPhysicsRotationDuringAnimRootMotion, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbAllowPhysicsRotationDuringAnimRootMotion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbProjectNavMeshWalking, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbProjectNavMeshWalking, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetbProjectNavMeshOnBothWorldChannels, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, SetbProjectNavMeshOnBothWorldChannels, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetAvoidanceGroup, (), ERASE_ARGUMENT_PACK(const FNavAvoidanceMask&)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetGroupsToAvoid, (), ERASE_ARGUMENT_PACK(const FNavAvoidanceMask&)) },
{ ERASE_METHOD_PTR(UCharacterMovementComponent, GetGroupsToIgnore, (), ERASE_ARGUMENT_PACK(const FNavAvoidanceMask&)) },


{ ERASE_METHOD_PTR(UChildActorComponent, SetChildActorClass, (TSubclassOf<AActor>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChildActorComponent, GetChildActorClass, (), ERASE_ARGUMENT_PACK(const TSubclassOf<AActor>&)) },
{ ERASE_METHOD_PTR(UChildActorComponent, SetbChildActorIsTransient, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDecalComponent, CreateDynamicMaterialInstance, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetDecalMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetFadeDuration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetFadeInDuration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetFadeInStartDelay, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetFadeStartDelay, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetDecalColor, (const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetDecalMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeIn, (float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeOut, (float32, float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeScreenSize, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetSortOrder, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetSortOrder, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetFadeScreenSize, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeStartDelay, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeDuration, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeInDuration, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetFadeInStartDelay, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetbDestroyOwnerAfterFade, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDecalComponent, SetbDestroyOwnerAfterFade, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDecalComponent, GetDecalColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(ULightComponent, SetAffectTranslucentLighting, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetBloomMaxBrightness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetBloomScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetBloomThreshold, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetBloomTint, (FColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetEnableLightShaftBloom, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetForceCachedShadowsForMovablePrimitives, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetIESBrightnessScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetIESTexture, (UTextureLightProfile), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetIndirectLightingIntensity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetIntensity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetLightColor, (FLinearColor, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetLightFunctionDisabledBrightness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetLightFunctionFadeDistance, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetLightFunctionMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetLightFunctionScale, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetLightingChannels, (bool, bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetShadowBias, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetShadowSlopeBias, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetSpecularScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetTemperature, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetTransmission, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetUseIESBrightness, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetUseTemperature, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, SetVolumetricScatteringIntensity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetTemperature, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetbUseTemperature, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetbUseTemperature, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetSpecularScale, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetShadowBias, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetShadowSlopeBias, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetContactShadowLengthInWS, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetContactShadowLengthInWS, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetCastTranslucentShadows, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetCastTranslucentShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetbCastShadowsFromCinematicObjectsOnly, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetbCastShadowsFromCinematicObjectsOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetbForceCachedShadowsForMovablePrimitives, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetbForceCachedShadowsForMovablePrimitives, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetLightingChannels, (), ERASE_ARGUMENT_PACK(const FLightingChannels&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetLightFunctionMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(ULightComponent, GetLightFunctionScale, (), ERASE_ARGUMENT_PACK(const FVector&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetIESTexture, (), ERASE_ARGUMENT_PACK(UTextureLightProfile*)) },
{ ERASE_METHOD_PTR(ULightComponent, GetbUseIESBrightness, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetbUseIESBrightness, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetIESBrightnessScale, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetLightFunctionFadeDistance, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetbEnableLightShaftBloom, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULightComponent, SetbEnableLightShaftBloom, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULightComponent, GetBloomScale, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetBloomThreshold, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetBloomMaxBrightness, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULightComponent, GetBloomTint, (), ERASE_ARGUMENT_PACK(const FColor&)) },


{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetAtmosphereSunLight, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetAtmosphereSunLightIndex, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetCascadeDistributionExponent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetCascadeTransitionFraction, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetDynamicShadowCascades, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetDynamicShadowDistanceMovableLight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetDynamicShadowDistanceStationaryLight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetEnableLightShaftOcclusion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetForwardShadingPriority, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetLightShaftOverrideDirection, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetLightSourceAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetLightSourceSoftAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetOcclusionDepthRange, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetOcclusionMaskDarkness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetShadowAmount, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetShadowCascadeBiasDistribution, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetShadowDistanceFadeoutFraction, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetShadowSourceAngleFactor, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetShadowCascadeBiasDistribution, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbEnableLightShaftOcclusion, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbEnableLightShaftOcclusion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetOcclusionMaskDarkness, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetOcclusionDepthRange, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetLightShaftOverrideDirection, (), ERASE_ARGUMENT_PACK(const FVector&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetDynamicShadowDistanceMovableLight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetDynamicShadowDistanceStationaryLight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetDynamicShadowCascades, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetCascadeDistributionExponent, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetCascadeTransitionFraction, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetShadowDistanceFadeoutFraction, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbUseInsetShadowsForMovableObjects, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbUseInsetShadowsForMovableObjects, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetForwardShadingPriority, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetLightSourceAngle, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetLightSourceSoftAngle, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetShadowSourceAngleFactor, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbAtmosphereSunLight, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbAtmosphereSunLight, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetAtmosphereSunLightIndex, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbPerPixelAtmosphereTransmittance, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbPerPixelAtmosphereTransmittance, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbCastShadowsOnClouds, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbCastShadowsOnClouds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbCastShadowsOnAtmosphere, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbCastShadowsOnAtmosphere, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbCastCloudShadows, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbCastCloudShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetbCastModulatedShadows, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, SetbCastModulatedShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDirectionalLightComponent, GetShadowAmount, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(USphereComponent, GetScaledSphereRadius, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USphereComponent, GetShapeScale, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USphereComponent, GetUnscaledSphereRadius, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USphereComponent, SetSphereRadius, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USphereComponent, GetSphereRadius, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UForceFeedbackComponent, AdjustAttenuation, (const FForceFeedbackAttenuationSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, GetAttenuationSettingsToApply, (FForceFeedbackAttenuationSettings&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, Play, (float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, SetForceFeedbackEffect, (UForceFeedbackEffect), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, SetIntensityMultiplier, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, Stop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, GetForceFeedbackEffect, (), ERASE_ARGUMENT_PACK(UForceFeedbackEffect*)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, GetbLooping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, SetbLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, GetbIgnoreTimeDilation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, SetbIgnoreTimeDilation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, GetbOverrideAttenuation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, SetbOverrideAttenuation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UForceFeedbackComponent, GetIntensityMultiplier, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, Play, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetEndFrame, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetFrame, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetFrameRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetPlaying, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetStartFrame, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetStreamingMipBias, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetVolumeResolution, (FIntVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, GetVolumeResolution, (), ERASE_ARGUMENT_PACK(const FIntVector&)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, GetFrame, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetbPlaying, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetbLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetbIssueBlockingRequests, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHeterogeneousVolumeComponent, SetbPivotAtCentroid, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInputComponent, GetControllerAnalogKeyState, (FKey), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UInputComponent, GetControllerAnalogStickState, (EControllerAnalogStick, float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, GetControllerKeyTimeDown, (FKey), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UInputComponent, GetControllerMouseDelta, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, GetControllerVectorKeyState, (FKey), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UInputComponent, GetTouchState, (int, float32&, float32&, bool&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, IsControllerKeyDown, (FKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputComponent, WasControllerKeyJustPressed, (FKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputComponent, WasControllerKeyJustReleased, (FKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputComponent, BindAction, (const FName&, EInputEvent, const FInputActionHandlerDynamicSignature& = FInputActionHandlerDynamicSignature ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, BindAxis, (const FName&, const FInputAxisHandlerDynamicSignature& = FInputAxisHandlerDynamicSignature ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, BindAxisKey, (const FName&, const FInputAxisHandlerDynamicSignature& = FInputAxisHandlerDynamicSignature ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, BindChord, (const FInputChord&, EInputEvent, const FInputActionHandlerDynamicSignature& = FInputActionHandlerDynamicSignature ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, BindKey, (const FKey&, EInputEvent, const FInputActionHandlerDynamicSignature& = FInputActionHandlerDynamicSignature ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputComponent, BindVectorAxis, (const FKey&, const FInputVectorAxisHandlerDynamicSignature& = FInputVectorAxisHandlerDynamicSignature ( ), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterpToMovementComponent, AddControlPointPosition, (FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, FinaliseControlPoints, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, ResetControlPoints, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, RestartMovement, (float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, StopSimulating, (const FHitResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, GetbPauseOnImpact, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, SetbPauseOnImpact, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, GetbForceSubStepping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterpToMovementComponent, SetbForceSubStepping, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetFogAlbedo, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetFogEmissive, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetFogPhaseG, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetHeightFogExtinction, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetHeightFogFalloff, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetHeightFogOffset, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, SetRadialFogExtinction, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetRadialFogExtinction, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetHeightFogExtinction, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetHeightFogFalloff, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetHeightFogOffset, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetFogPhaseG, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetFogAlbedo, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(ULocalFogVolumeComponent, GetFogEmissive, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(ULocalLightComponent, SetAttenuationRadius, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalLightComponent, SetIntensityUnits, (ELightUnits), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalLightComponent, GetIntensityUnits, (), ERASE_ARGUMENT_PACK(const ELightUnits&)) },
{ ERASE_METHOD_PTR(ULocalLightComponent, GetAttenuationRadius, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(ULODSyncComponent, GetLODSyncDebugText, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(UMaterialBillboardComponent, AddElement, (UMaterialInterface, UCurveFloat, bool, float32, float32, UCurveFloat), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialBillboardComponent, SetElements, (const TArray<FMaterialSpriteElement>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialBillboardComponent, GetElements, (), ERASE_ARGUMENT_PACK(const TArray<FMaterialSpriteElement>&)) },


{ ERASE_METHOD_PTR(UPawnNoiseEmitterComponent, MakeNoise, (AActor, float32, const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPawnNoiseEmitterComponent, SetbAIPerceptionSystemCompatibilityMode, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPlatformEventsComponent, IsInLaptopMode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPlatformEventsComponent, IsInTabletMode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPlatformEventsComponent, SupportsConvertibleLaptops, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UPointLightComponent, SetInverseExposureBlend, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, SetLightFalloffExponent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, SetSoftSourceRadius, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, SetSourceLength, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, SetSourceRadius, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, SetUseInverseSquaredFalloff, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, GetbUseInverseSquaredFalloff, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPointLightComponent, SetbUseInverseSquaredFalloff, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPointLightComponent, GetLightFalloffExponent, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPointLightComponent, GetSourceRadius, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPointLightComponent, GetSoftSourceRadius, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPointLightComponent, GetSourceLength, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UPoseableMeshComponent, CopyPoseFromSkeletalComponent, (USkeletalMeshComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, GetBoneLocationByName, (FName, EBoneSpaces), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, GetBoneRotationByName, (FName, EBoneSpaces), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, GetBoneScaleByName, (FName, EBoneSpaces), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, GetBoneTransformByName, (FName, EBoneSpaces), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, ResetBoneTransformByName, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, SetBoneLocationByName, (FName, FVector, EBoneSpaces), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, SetBoneRotationByName, (FName, FRotator, EBoneSpaces), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, SetBoneScaleByName, (FName, FVector, EBoneSpaces), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPoseableMeshComponent, SetBoneTransformByName, (FName, const FTransform&, EBoneSpaces), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPostProcessComponent, GetbEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPostProcessComponent, SetbEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPostProcessComponent, GetbUnbound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPostProcessComponent, SetbUnbound, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetHomingTargetComponent, (), ERASE_ARGUMENT_PACK(const USceneComponent*)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetHomingTargetComponent, (USceneComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, IsInterpolationComplete, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, IsVelocityUnderSimulationThreshold, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, LimitVelocity, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, MoveInterpolationTarget, (const FVector&, const FRotator&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, ResetInterpolation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetInterpolatedComponent, (USceneComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetVelocityInLocalSpace, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, StopSimulating, (const FHitResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetMaxSpeed, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbRotationFollowsVelocity, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbRotationFollowsVelocity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbRotationRemainsVertical, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbRotationRemainsVertical, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbShouldBounce, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbShouldBounce, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbInitialVelocityInLocalSpace, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbInitialVelocityInLocalSpace, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbForceSubStepping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbForceSubStepping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbSimulationEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbSimulationEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbSweepCollision, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbSweepCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbIsHomingProjectile, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbIsHomingProjectile, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbBounceAngleAffectsFriction, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbBounceAngleAffectsFriction, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbIsSliding, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbInterpMovement, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbInterpMovement, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbInterpRotation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbInterpRotation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbThrottleInterpolation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbThrottleInterpolation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbSimulationUseScopedMovement, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbSimulationUseScopedMovement, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, GetbInterpolationUseScopedMovement, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProjectileMovementComponent, SetbInterpolationUseScopedMovement, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URectLightComponent, SetBarnDoorAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URectLightComponent, SetBarnDoorLength, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URectLightComponent, SetSourceHeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URectLightComponent, SetSourceTexture, (UTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URectLightComponent, SetSourceWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URectLightComponent, GetSourceWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URectLightComponent, GetSourceHeight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URectLightComponent, GetBarnDoorAngle, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URectLightComponent, GetBarnDoorLength, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URectLightComponent, GetSourceTexture, (), ERASE_ARGUMENT_PACK(UTexture*)) },


{ ERASE_METHOD_PTR(URotatingMovementComponent, GetbRotationInLocalSpace, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URotatingMovementComponent, SetbRotationInLocalSpace, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URuntimeVirtualTextureComponent, Invalidate, (const FBoxSphereBounds&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USplineComponent, AddPoint, (const FSplinePoint&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, AddPoints, (const TArray<FSplinePoint>&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, AddSplineLocalPoint, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, AddSplinePoint, (const FVector&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, AddSplinePointAtIndex, (const FVector&, int, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, AddSplineWorldPoint, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, ClearSplinePoints, (bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, ConvertSplineSegmentToPolyLine, (int, ESplineCoordinateSpace, const float32, TArray<FVector>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyLine, (ESplineCoordinateSpace, const float32, TArray<FVector>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyline_InDistanceRange, (ESplineCoordinateSpace, const float32, float32, float32, TArray<FVector>&, TArray<float>&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyline_InTimeRange, (ESplineCoordinateSpace, const float32, float32, float32, bool, TArray<FVector>&, TArray<float>&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, ConvertSplineToPolyLineWithDistances, (ESplineCoordinateSpace, const float32, TArray<FVector>&, TArray<float>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, DivideSplineIntoPolylineRecursive, (float32, float32, ESplineCoordinateSpace, const float32, TArray<FVector>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, DivideSplineIntoPolylineRecursiveWithDistances, (float32, float32, ESplineCoordinateSpace, const float32, TArray<FVector>&, TArray<float>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, FindDirectionClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, FindInputKeyClosestToWorldLocation, (const FVector&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, FindLocationClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, FindRightVectorClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, FindRollClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, FindRotationClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, FindScaleClosestToWorldLocation, (const FVector&), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, FindTangentClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, FindTransformClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USplineComponent, FindUpVectorClosestToWorldLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetArriveTangentAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDefaultUpVector, (ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDirectionAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDirectionAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDirectionAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDirectionAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDistanceAlongSplineAtLocation, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDistanceAlongSplineAtSplineInputKey, (float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetDistanceAlongSplineAtSplinePoint, (int), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetFloatPropertyAtSplineInputKey, (float32, FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetFloatPropertyAtSplinePoint, (int, FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetInputKeyAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetInputKeyValueAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetInputKeyValueAtSplinePoint, (int), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLeaveTangentAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLocalLocationAndTangentAtSplinePoint, (int, FVector&, FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLocationAndTangentAtSplinePoint, (int, FVector&, FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLocationAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLocationAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLocationAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetLocationAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetNumberOfSplinePoints, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USplineComponent, GetNumberOfSplineSegments, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRightVectorAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRollAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRollAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRollAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRollAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRotationAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRotationAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRotationAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, GetRotationAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, GetScaleAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetScaleAtSplineInputKey, (float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetScaleAtSplinePoint, (int), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetScaleAtTime, (float32, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetSplineLength, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetSplinePointAt, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FSplinePoint)) },
{ ERASE_METHOD_PTR(USplineComponent, GetSplinePointType, (int), ERASE_ARGUMENT_PACK(ESplinePointType)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTangentAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTangentAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTangentAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTangentAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTimeAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTransformAtDistanceAlongSpline, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTransformAtSplineInputKey, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTransformAtSplinePoint, (int, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USplineComponent, GetTransformAtTime, (float32, ESplineCoordinateSpace, bool = false, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtDistanceAlongSpline, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtSplineInputKey, (float32, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtSplinePoint, (int, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetUpVectorAtTime, (float32, ESplineCoordinateSpace, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetVectorPropertyAtSplineInputKey, (float32, FName), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetVectorPropertyAtSplinePoint, (int, FName), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldDirectionAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldDirectionAtTime, (float32, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldLocationAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldLocationAtSplinePoint, (int), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldLocationAtTime, (float32, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldRotationAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldRotationAtTime, (float32, bool = false), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USplineComponent, GetWorldTangentAtDistanceAlongSpline, (float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineComponent, IsClosedLoop, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USplineComponent, RemoveSplinePoint, (int, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetClosedLoop, (bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetClosedLoopAtPosition, (bool, float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetDefaultUpVector, (const FVector&, ESplineCoordinateSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetDrawDebug, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetLocationAtSplinePoint, (int, const FVector&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetRotationAtSplinePoint, (int, const FRotator&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetScaleAtSplinePoint, (int, const FVector&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetSelectedSplineSegmentColor, (const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetSplineLocalPoints, (const TArray<FVector>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetSplinePoints, (const TArray<FVector>&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetSplinePointType, (int, ESplinePointType, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetSplineWorldPoints, (const TArray<FVector>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetTangentAtSplinePoint, (int, const FVector&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetTangentColor, (const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetTangentsAtSplinePoint, (int, const FVector&, const FVector&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetUnselectedSplineSegmentColor, (const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetUpVectorAtSplinePoint, (int, const FVector&, ESplineCoordinateSpace, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, SetWorldLocationAtSplinePoint, (int, const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineComponent, UpdateSpline, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USplineMeshComponent, GetBoundaryMax, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetBoundaryMin, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetEndOffset, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetEndPosition, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetEndRoll, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetEndScale, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetEndTangent, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetForwardAxis, (), ERASE_ARGUMENT_PACK(ESplineMeshAxis)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetSplineUpDir, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetStartOffset, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetStartPosition, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetStartRoll, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetStartScale, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, GetStartTangent, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetBoundaryMax, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetBoundaryMin, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetEndOffset, (FVector2D, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetEndPosition, (FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetEndRoll, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetEndRollDegrees, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetEndScale, (FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetEndTangent, (FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetForwardAxis, (ESplineMeshAxis, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetSplineUpDir, (const FVector&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartAndEnd, (FVector, FVector, FVector, FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartOffset, (FVector2D, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartPosition, (FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartRoll, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartRollDegrees, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartScale, (FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetStartTangent, (FVector, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, UpdateMesh, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetbAllowSplineEditingPerInstance, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetbSmoothInterpRollScale, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USplineMeshComponent, SetbNeverNeedsCookedCollisionData, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USpotLightComponent, SetInnerConeAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpotLightComponent, SetOuterConeAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpotLightComponent, GetInnerConeAngle, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USpotLightComponent, GetOuterConeAngle, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetbUsePerSampleAtmosphericLightTransmittance, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetGroundAlbedo, (FColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetHoldout, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetLayerBottomAltitude, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetLayerHeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetPlanetRadius, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetReflectionSampleCountScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetReflectionViewSampleCountScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetRenderInMainPass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetShadowReflectionSampleCountScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetShadowReflectionViewSampleCountScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetShadowTracingDistance, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetShadowViewSampleCountScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetSkyLightCloudBottomOcclusion, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetStopTracingTransmittanceThreshold, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetTracingMaxDistance, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetTracingStartDistanceFromCamera, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetTracingStartMaxDistance, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetViewSampleCountScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetLayerBottomAltitude, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetLayerHeight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetTracingStartMaxDistance, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetTracingStartDistanceFromCamera, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetTracingMaxDistance, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetPlanetRadius, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetGroundAlbedo, (), ERASE_ARGUMENT_PACK(const FColor&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetbUsePerSampleAtmosphericLightTransmittance, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetSkyLightCloudBottomOcclusion, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetViewSampleCountScale, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetShadowViewSampleCountScale, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetShadowTracingDistance, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetStopTracingTransmittanceThreshold, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetbHoldout, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetbHoldout, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, GetbRenderInMainPass, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UVolumetricCloudComponent, SetbRenderInMainPass, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UWorldPartitionStreamingSourceComponent, DisableStreamingSource, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionStreamingSourceComponent, EnableStreamingSource, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionStreamingSourceComponent, IsStreamingCompleted, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorldPartitionStreamingSourceComponent, IsStreamingSourceEnabled, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UStreamingSettings, SetAsyncLoadingThreadEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamingSettings, SetWarnIfTimeLimitExceeded, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamingSettings, SetUseBackgroundLevelStreaming, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamingSettings, SetAsyncLoadingUseFullTimeLimit, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamingSettings, SetFlushStreamingOnExit, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamingSettings, SetEventDrivenLoaderEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetFlushStreamingOnGC, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetAllowParallelGC, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetIncrementalBeginDestroyEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetMultithreadedDestructionEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetCreateGCClusters, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetAssetClusteringEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetActorClusteringEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetUseDisregardForGCOnDedicatedServers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetVerifyUObjectsAreNotFGCObjects, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetGarbageEliminationEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGarbageCollectionSettings, SetDumpObjectCountsToLogWhenMaxObjectLimitExceeded, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ACullDistanceVolume, GetbEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ACullDistanceVolume, SetbEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCurveBase, GetTimeRange, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveBase, GetValueRange, (float32&, float32&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCurveFloat, GetFloatValue, (float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddAutoCurveKey, (float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddConstantCurveKey, (float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddCurveKey, (float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddCurveKeyBrokenTangent, (float32, float32, float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddCurveKeyTangent, (float32, float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddCurveKeyWeightedArriveTangent, (float32, float32, bool, float32, float32, float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddCurveKeyWeightedBothTangent, (float32, float32, bool, float32, float32, float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddCurveKeyWeightedLeaveTangent, (float32, float32, bool, float32, float32, float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddLinearCurveKey, (float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AddSmartAutoCurveKey, (float32, float32), ERASE_ARGUMENT_PACK(FCurveKeyHandle)) },
{ ERASE_METHOD_PTR(UCurveFloat, AutoSetTangents, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetDefaultValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetKeyInterpMode, (FCurveKeyHandle, ERichCurveInterpMode, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetKeyTangentMode, (FCurveKeyHandle, ERichCurveTangentMode, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetKeyTangentWeightMode, (FCurveKeyHandle, ERichCurveTangentWeightMode, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetKeyUserTangents, (FCurveKeyHandle, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetKeyUserTangentWeights, (FCurveKeyHandle, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetPostInfinityExtrap, (ERichCurveExtrapolation), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveFloat, SetPreInfinityExtrap, (ERichCurveExtrapolation), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCurveLinearColor, GetClampedLinearColorValue, (float32), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UCurveLinearColor, GetLinearColorValue, (float32), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UCurveLinearColor, GetUnadjustedLinearColorValue, (float32), ERASE_ARGUMENT_PACK(FLinearColor)) },


{ ERASE_METHOD_PTR(UCurveLinearColorAtlas, GetCurvePosition, (UCurveLinearColor, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCurveLinearColorAtlas, SetbSquareResolution, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCurveLinearColorAtlas, SetbDisableAllAdjustments, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCurveVector, GetVectorValue, (float32), ERASE_ARGUMENT_PACK(FVector)) },


{ ERASE_METHOD_PTR(UDamageType, GetbCausedByWorld, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDamageType, SetbCausedByWorld, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDamageType, GetbScaleMomentumByMass, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDamageType, SetbScaleMomentumByMass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDamageType, GetbRadialDamageVelChange, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDamageType, SetbRadialDamageVelChange, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ADebugCameraController, GetSelectedActor, (), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(ADebugCameraController, OnActivate, (APlayerController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADebugCameraController, OnActorSelected, (AActor, const FVector&, const FVector&, const FHitResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADebugCameraController, OnDeactivate, (APlayerController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADebugCameraController, SetPawnMovementSpeedScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADebugCameraController, ToggleDisplay, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AHUD, AddDebugText, (const FString&, AActor, float32, FVector, FVector, FColor, bool, bool, bool, UFont, float32, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, AddHitBox, (FVector2D, FVector2D, FName, bool, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, Deproject, (float32, float32, FVector&, FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawLine, (float32, float32, float32, float32, FLinearColor, float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawMaterial, (UMaterialInterface, float32, float32, float32, float32, float32, float32, float32, float32, float32 = 1.000000, bool = false, float32 = 0.000000, FVector2D = FVector2D ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawMaterialSimple, (UMaterialInterface, float32, float32, float32, float32, float32 = 1.000000, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawMaterialTriangle, (UMaterialInterface, FVector2D, FVector2D, FVector2D, FVector2D, FVector2D, FVector2D, FLinearColor = FLinearColor ( 1.000000 , 1.000000 , 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawRect, (FLinearColor, float32, float32, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawText, (const FString&, FLinearColor, float32, float32, UFont = nullptr, float32 = 1.000000, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawTexture, (UTexture, float32, float32, float32, float32, float32, float32, float32, float32, FLinearColor = FLinearColor ( 1.000000 , 1.000000 , 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, DrawTextureSimple, (UTexture, float32, float32, float32 = 1.000000, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetActorsInSelectionRectangle, (TSubclassOf<AActor>, const FVector2D&, const FVector2D&, TArray<AActor*>&, bool = true, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetOwningPawn, (), ERASE_ARGUMENT_PACK(APawn*)) },
{ ERASE_METHOD_PTR(AHUD, GetOwningPlayerController, (), ERASE_ARGUMENT_PACK(APlayerController*)) },
{ ERASE_METHOD_PTR(AHUD, GetTextSize, (const FString&, float32&, float32&, UFont = nullptr, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, Project, (FVector, bool = true), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(AHUD, DrawHUD, (int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, HitBoxBeginCursorOver, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, HitBoxClick, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, HitBoxEndCursorOver, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, HitBoxRelease, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, RemoveAllDebugStrings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, RemoveDebugText, (AActor, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetbLostFocusPaused, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AHUD, GetbShowHUD, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AHUD, SetbShowHUD, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetbShowDebugInfo, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AHUD, SetbShowDebugInfo, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetbShowHitBoxDebugInfo, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AHUD, SetbShowHitBoxDebugInfo, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetbShowOverlays, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AHUD, SetbShowOverlays, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AHUD, GetbEnableDebugTextShadow, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AHUD, SetbEnableDebugTextShadow, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ADecalActor, CreateDynamicMaterialInstance, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(ADecalActor, GetDecalMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(ADecalActor, SetDecalMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ADefaultPawn, LookUpAtRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADefaultPawn, MoveForward, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADefaultPawn, MoveRight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADefaultPawn, MoveUp_World, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADefaultPawn, TurnAtRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADefaultPawn, SetMovementComponent, (UPawnMovementComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADefaultPawn, GetbAddDefaultMovementBindings, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ADefaultPawn, SetbAddDefaultMovementBindings, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(APhysicsVolume, GetbWaterVolume, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APhysicsVolume, SetbWaterVolume, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APhysicsVolume, GetbPhysicsOnContact, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APhysicsVolume, SetbPhysicsOnContact, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDeviceProfile, SetbIsVisibleForAssets, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDialogueWave, GetbMature, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDialogueWave, SetbMature, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDialogueWave, GetbOverride_SubtitleOverride, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDialogueWave, SetbOverride_SubtitleOverride, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTypedElementCommonActions, CopyNormalizedElements, (const FScriptTypedElementListProxy&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, CopyNormalizedElementsToString, (const FScriptTypedElementListProxy&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, CopySelectedElements, (UTypedElementSelectionSet), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, CopySelectedElementsToString, (UTypedElementSelectionSet, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, DeleteNormalizedElements, (const FScriptTypedElementListProxy, UWorld, UTypedElementSelectionSet, const FTypedElementDeletionOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, DeleteSelectedElements, (UTypedElementSelectionSet, UWorld, const FTypedElementDeletionOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, DuplicateNormalizedElements, (const FScriptTypedElementListProxy, UWorld, const FVector&), ERASE_ARGUMENT_PACK(TArray<FScriptTypedElementHandle>)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, DuplicateSelectedElements, (const UTypedElementSelectionSet, UWorld, const FVector&), ERASE_ARGUMENT_PACK(TArray<FScriptTypedElementHandle>)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, PasteElements, (UTypedElementSelectionSet, UWorld, const FTypedElementPasteOptions&), ERASE_ARGUMENT_PACK(TArray<FScriptTypedElementHandle>)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, PasteNormalizedElements, (const FScriptTypedElementListProxy&, UWorld, const FTypedElementPasteOptions&), ERASE_ARGUMENT_PACK(TArray<FScriptTypedElementHandle>)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, PasteElementsFromString, (UTypedElementSelectionSet, UWorld, const FTypedElementPasteOptions&, const FString&), ERASE_ARGUMENT_PACK(TArray<FScriptTypedElementHandle>)) },
{ ERASE_METHOD_PTR(UTypedElementCommonActions, PasteNormalizedElementsFromString, (const FScriptTypedElementListProxy&, UWorld, const FTypedElementPasteOptions&, const FString&), ERASE_ARGUMENT_PACK(TArray<FScriptTypedElementHandle>)) },


{ ERASE_METHOD_PTR(UCancellableAsyncAction, Cancel, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCancellableAsyncAction, IsActive, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USystemTimeTimecodeProvider, SetFrameRate, (const FFrameRate&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UViewportStatsSubsystem, AddDisplayDelegate, (const FViewportDisplayCallback& = FViewportDisplayCallback ( ), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UViewportStatsSubsystem, AddTimedDisplay, (FText, FLinearColor = FLinearColor ( 1.000000 , 1.000000 , 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewportStatsSubsystem, RemoveDisplayDelegate, (const int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UFloatingPawnMovement, SetMaxSpeed, (const float32&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInputDeviceProperty, EvaluateDeviceProperty, (const FPlatformUserId, const FInputDeviceId, const float32, const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputDeviceProperty, ResetDeviceProperty, (const FPlatformUserId, const FInputDeviceId, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInputDeviceSubsystem, ActivateDevicePropertyOfClass, (TSubclassOf<UInputDeviceProperty>, const FActivateDevicePropertyParams&), ERASE_ARGUMENT_PACK(FInputDevicePropertyHandle)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, GetActiveDeviceProperty, (const FInputDevicePropertyHandle), ERASE_ARGUMENT_PACK(UInputDeviceProperty*)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, GetInputDeviceHardwareIdentifier, (const FInputDeviceId), ERASE_ARGUMENT_PACK(FHardwareDeviceIdentifier)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, GetMostRecentlyUsedHardwareDevice, (const FPlatformUserId), ERASE_ARGUMENT_PACK(FHardwareDeviceIdentifier)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, IsPropertyActive, (const FInputDevicePropertyHandle), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, RemoveAllDeviceProperties, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, RemoveDevicePropertyByHandle, (const FInputDevicePropertyHandle), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputDeviceSubsystem, RemoveDevicePropertyHandles, (const TSet<FInputDevicePropertyHandle>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, AsyncSaveGameToSlotForLocalPlayer, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetInvalidDataVersion, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetLatestDataVersion, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetLocalPlayerController, (), ERASE_ARGUMENT_PACK(APlayerController*)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetPlatformUserId, (), ERASE_ARGUMENT_PACK(FPlatformUserId)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetPlatformUserIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetSavedDataVersion, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, GetSaveSlotName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, IsSaveInProgress, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, OnPostLoad, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, OnPostSave, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, OnPreSave, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, OnResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, ResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, SaveGameToSlotForLocalPlayer, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, WasLastSaveSuccessful, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, WasLoaded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULocalPlayerSaveGame, WasSaveRequested, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USpringArmComponent, GetTargetRotation, (), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetUnfixedCameraPosition, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USpringArmComponent, IsCollisionFixApplied, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbDoCollisionTest, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbDoCollisionTest, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbUsePawnControlRotation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbUsePawnControlRotation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbInheritPitch, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbInheritPitch, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbInheritYaw, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbInheritYaw, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbInheritRoll, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbInheritRoll, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbEnableCameraLag, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbEnableCameraLag, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbEnableCameraRotationLag, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbEnableCameraRotationLag, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbUseCameraLagSubstepping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbUseCameraLagSubstepping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbDrawDebugLagMarkers, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbDrawDebugLagMarkers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpringArmComponent, GetbClampToMaxPhysicsDeltaTime, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpringArmComponent, SetbClampToMaxPhysicsDeltaTime, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGameInstance, CreateInitialPlayer, (FString&), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, CreateLocalPlayer, (int, FString&, bool), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, CreateLocalPlayer, (FPlatformUserId, FString&, bool), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, AddLocalPlayer, (ULocalPlayer, FPlatformUserId), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameInstance, RemoveLocalPlayer, (ULocalPlayer), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameInstance, GetNumLocalPlayers, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameInstance, GetLocalPlayerByIndex, (const int), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, GetFirstLocalPlayerController, (const UWorld = nullptr), ERASE_ARGUMENT_PACK(APlayerController*)) },
{ ERASE_METHOD_PTR(UGameInstance, FindLocalPlayerFromControllerId, (const int), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, FindLocalPlayerFromUniqueNetId, (const FUniqueNetIdRepl&), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, GetFirstGamePlayer, (), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UGameInstance, HandleNetworkError, (ENetworkFailure, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameInstance, HandleTravelError, (ETravelFailure), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameInstance, Init, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameInstance, Shutdown, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AGameModeBase, CanSpectate, (APlayerController, APlayerState), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, ChangeName, (AController, const FString&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, ChoosePlayerStart, (AController), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(AGameModeBase, FindPlayerStart, (AController, const FString&), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(AGameModeBase, GetDefaultPawnClassForController, (AController), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(AGameModeBase, GetNumPlayers, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(AGameModeBase, GetNumSpectators, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(AGameModeBase, HandleStartingNewPlayer, (APlayerController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, HasMatchEnded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, HasMatchStarted, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, InitializeHUDForPlayer, (APlayerController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, InitStartSpot, (AActor, AController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, K2_FindPlayerStart, (AController, const FString& = ""), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(AGameModeBase, OnChangeName, (AController, const FString&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, OnLogout, (AController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, OnRestartPlayer, (AController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, OnSwapPlayerControllers, (APlayerController, APlayerController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, OnPostLogin, (APlayerController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, MustSpectate, (APlayerController), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, PlayerCanRestart, (APlayerController), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, ResetLevel, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, RestartPlayer, (AController), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, RestartPlayerAtPlayerStart, (AController, AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, RestartPlayerAtTransform, (AController, const FTransform&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, ReturnToMainMenuHost, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, ShouldReset, (AActor), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, SpawnDefaultPawnAtTransform, (AController, const FTransform&), ERASE_ARGUMENT_PACK(APawn*)) },
{ ERASE_METHOD_PTR(AGameModeBase, SpawnDefaultPawnFor, (AController, AActor), ERASE_ARGUMENT_PACK(APawn*)) },
{ ERASE_METHOD_PTR(AGameModeBase, StartPlay, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, GetbUseSeamlessTravel, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, SetbUseSeamlessTravel, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, GetbStartPlayersAsSpectators, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, SetbStartPlayersAsSpectators, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameModeBase, GetbPauseable, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameModeBase, SetbPauseable, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AGameMode, AbortMatch, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameMode, EndMatch, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameMode, GetMatchState, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(AGameMode, IsMatchInProgress, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameMode, OnSetMatchState, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameMode, ReadyToEndMatch, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameMode, ReadyToStartMatch, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameMode, RestartGame, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameMode, Say, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameMode, StartMatch, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameMode, GetbDelayedStart, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameMode, SetbDelayedStart, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AGameStateBase, GetPlayerRespawnDelay, (AController), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(AGameStateBase, GetPlayerStartTime, (AController), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(AGameStateBase, GetServerWorldTimeSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(AGameStateBase, HasBegunPlay, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameStateBase, HasMatchEnded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AGameStateBase, HasMatchStarted, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UGameUserSettings, ApplyHardwareBenchmarkResults, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, ApplyNonResolutionSettings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, ApplyResolutionSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, ApplySettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, ConfirmVideoMode, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, EnableHDRDisplayOutput, (bool, int = 1000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetAntiAliasingQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetAudioQualityLevel, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetCurrentHDRDisplayNits, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetDefaultResolutionScale, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetDesktopResolution, (), ERASE_ARGUMENT_PACK(FIntPoint)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetFoliageQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetFrameRateLimit, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetFullscreenMode, (), ERASE_ARGUMENT_PACK(EWindowMode)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetGlobalIlluminationQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetLastConfirmedFullscreenMode, (), ERASE_ARGUMENT_PACK(EWindowMode)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetLastConfirmedScreenResolution, (), ERASE_ARGUMENT_PACK(FIntPoint)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetOverallScalabilityLevel, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetPostProcessingQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetPreferredFullscreenMode, (), ERASE_ARGUMENT_PACK(EWindowMode)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetRecommendedResolutionScale, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetReflectionQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetResolutionScaleInformationEx, (float32&, float32&, float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetResolutionScaleNormalized, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetScreenResolution, (), ERASE_ARGUMENT_PACK(FIntPoint)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetShadingQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetShadowQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetTextureQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetViewDistanceQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, GetVisualEffectQuality, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsDirty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsDynamicResolutionDirty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsDynamicResolutionEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsFullscreenModeDirty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsHDREnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsScreenResolutionDirty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsVSyncDirty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, IsVSyncEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, LoadSettings, (bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, ResetToCurrentSettings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, RevertVideoMode, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, RunHardwareBenchmark, (int = 10, float32 = 1.000000, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SaveSettings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetAntiAliasingQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetAudioQualityLevel, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetBenchmarkFallbackValues, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetDynamicResolutionEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetFoliageQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetFrameRateLimit, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetFullscreenMode, (EWindowMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetGlobalIlluminationQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetOverallScalabilityLevel, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetPostProcessingQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetReflectionQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetResolutionScaleNormalized, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetResolutionScaleValueEx, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetScreenResolution, (FIntPoint), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetShadingQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetShadowQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetTextureQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetToDefaults, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetViewDistanceQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetVisualEffectQuality, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SetVSyncEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameUserSettings, SupportsHDRDisplayOutput, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameUserSettings, ValidateSettings, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ALevelScriptActor, LevelReset, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelScriptActor, RemoteEvent, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ALevelScriptActor, SetCinematicMode, (bool, bool = true, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelScriptActor, WorldOriginLocationChanged, (FIntVector, FIntVector), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULocalPlayer, GetWorld, (), ERASE_ARGUMENT_PACK(UWorld*)) },
{ ERASE_METHOD_PTR(ULocalPlayer, GetGameInstance, (), ERASE_ARGUMENT_PACK(UGameInstance*)) },
{ ERASE_METHOD_PTR(ULocalPlayer, GetControllerId, (), ERASE_ARGUMENT_PACK(int)) },


{ ERASE_METHOD_PTR(ALocationVolume, IsLoaded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ALocationVolume, Load, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALocationVolume, Unload, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, CopyParameterOverrides, (UMaterialInstance), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, InitializeScalarParameterAndGetIndex, (const FName&, float32, int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, CopyMaterialInstanceParameters, (UMaterialInterface, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, GetScalarParameterValue, (FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, GetScalarParameterValueByInfo, (const FMaterialParameterInfo&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, GetTextureParameterValue, (FName), ERASE_ARGUMENT_PACK(UTexture*)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, GetTextureParameterValueByInfo, (const FMaterialParameterInfo&), ERASE_ARGUMENT_PACK(UTexture*)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, GetVectorParameterValue, (FName), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, GetVectorParameterValueByInfo, (const FMaterialParameterInfo&), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, InterpolateMaterialInstanceParameters, (UMaterialInstance, UMaterialInstance, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetDoubleVectorParameterValue, (FName, FVector4), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetRuntimeVirtualTextureParameterValue, (FName, URuntimeVirtualTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetRuntimeVirtualTextureParameterValueByInfo, (const FMaterialParameterInfo&, URuntimeVirtualTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetScalarParameterByIndex, (int, float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetScalarParameterValue, (FName, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetScalarParameterValueByInfo, (const FMaterialParameterInfo&, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetSparseVolumeTextureParameterValue, (FName, USparseVolumeTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetTextureParameterValue, (FName, UTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetTextureParameterValueByInfo, (const FMaterialParameterInfo&, UTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetVectorParameterValue, (FName, FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMaterialInstanceDynamic, SetVectorParameterValueByInfo, (const FMaterialParameterInfo&, FLinearColor), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMaterialParameterCollection, GetScalarParameterDefaultValue, (FName, bool&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMaterialParameterCollection, GetScalarParameterNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UMaterialParameterCollection, GetVectorParameterDefaultValue, (FName, bool&), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UMaterialParameterCollection, GetVectorParameterNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },


{ ERASE_METHOD_PTR(UNetworkSettings, SetbVerifyPeer, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNetworkSettings, SetbEnableMultiplayerWorldOriginRebasing, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(APainCausingVolume, GetbPainCausing, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APainCausingVolume, SetbPainCausing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APainCausingVolume, GetbEntryPain, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APainCausingVolume, SetbEntryPain, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAsyncPhysicsInputComponent, GetDataToConsume, (), ERASE_ARGUMENT_PACK(const UAsyncPhysicsData*)) },
{ ERASE_METHOD_PTR(UAsyncPhysicsInputComponent, GetDataToWrite, (), ERASE_ARGUMENT_PACK(UAsyncPhysicsData*)) },
{ ERASE_METHOD_PTR(UAsyncPhysicsInputComponent, ServerRPCBufferInput, (UAsyncPhysicsData), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UBodySetup, SetbConsiderForBounds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBodySetup, SetbDoubleSidedGeometry, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBodySetup, SetbNeverNeedsCookedCollisionData, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UClusterUnionComponent, AddComponentToCluster, (UPrimitiveComponent, const TArray<int>&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, GetActors, (), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, GetPrimitiveComponents, (), ERASE_ARGUMENT_PACK(TArray<UPrimitiveComponent>)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, RemoveComponentBonesFromCluster, (UPrimitiveComponent, const TArray<int>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, RemoveComponentFromCluster, (UPrimitiveComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, SetEnableDamageFromCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, SetIsAnchored, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, SetbEnableDamageFromCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UClusterUnionComponent, GetbEnableDamageFromCollision, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, ApplyPhysicalAnimationProfileBelow, (FName, FName, bool = true, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, ApplyPhysicalAnimationSettings, (FName, const FPhysicalAnimationData&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, ApplyPhysicalAnimationSettingsBelow, (FName, const FPhysicalAnimationData&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, GetBodyTargetTransform, (FName), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, SetSkeletalMeshComponent, (USkeletalMeshComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, SetStrengthMultiplyer, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicalAnimationComponent, GetStrengthMultiplyer, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UPhysicsAsset, GetConstraintByBoneNames, (FName, FName), ERASE_ARGUMENT_PACK(FConstraintInstanceAccessor)) },
{ ERASE_METHOD_PTR(UPhysicsAsset, GetConstraintByName, (FName), ERASE_ARGUMENT_PACK(FConstraintInstanceAccessor)) },
{ ERASE_METHOD_PTR(UPhysicsAsset, GetConstraints, (bool, TArray<FConstraintInstanceAccessor>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsAsset, SetbNotForDedicatedServer, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, BreakConstraint, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetConstrainedComponents, (UPrimitiveComponent&, FName&, UPrimitiveComponent&, FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetConstraint, (), ERASE_ARGUMENT_PACK(FConstraintInstanceAccessor)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetConstraintForce, (FVector&, FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetCurrentSwing1, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetCurrentSwing2, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, GetCurrentTwist, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, IsBroken, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, IsProjectionEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularBreakable, (bool, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularDriveMode, (EAngularDriveMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularDriveParams, (float32, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularOrientationDrive, (bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularOrientationTarget, (const FRotator&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularPlasticity, (bool, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularSwing1Limit, (EAngularConstraintMotion, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularSwing2Limit, (EAngularConstraintMotion, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularTwistLimit, (EAngularConstraintMotion, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityDrive, (bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityDriveSLERP, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityDriveTwistAndSwing, (bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetAngularVelocityTarget, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstrainedComponents, (UPrimitiveComponent, FName, UPrimitiveComponent, FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstraintReferenceFrame, (EConstraintFrame, const FTransform&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstraintReferenceOrientation, (EConstraintFrame, const FVector&, const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetConstraintReferencePosition, (EConstraintFrame, const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetContactTransferScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetDisableCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearBreakable, (bool, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearDriveParams, (float32, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearPlasticity, (bool, float32, EConstraintPlasticityType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearPositionDrive, (bool, bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearPositionTarget, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearVelocityDrive, (bool, bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearVelocityTarget, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearXLimit, (ELinearConstraintMotion, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearYLimit, (ELinearConstraintMotion, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetLinearZLimit, (ELinearConstraintMotion, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetOrientationDriveSLERP, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetOrientationDriveTwistAndSwing, (bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetProjectionEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsConstraintComponent, SetProjectionParams, (float32, float32, float32, float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetGrabbedComponent, (), ERASE_ARGUMENT_PACK(UPrimitiveComponent*)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetTargetLocationAndRotation, (FVector&, FRotator&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GrabComponent, (UPrimitiveComponent, FName, FVector, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GrabComponentAtLocation, (UPrimitiveComponent, FName, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GrabComponentAtLocationWithRotation, (UPrimitiveComponent, FName, FVector, FRotator), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, ReleaseComponent, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetAngularDamping, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetAngularStiffness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetInterpolationSpeed, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetLinearDamping, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetLinearStiffness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetTargetLocation, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetTargetLocationAndRotation, (FVector, FRotator), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetTargetRotation, (FRotator), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetbSoftAngularConstraint, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetbSoftAngularConstraint, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetbSoftLinearConstraint, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetbSoftLinearConstraint, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetbInterpolateTarget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, SetbInterpolateTarget, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetLinearDamping, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetLinearStiffness, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetAngularDamping, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetAngularStiffness, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UPhysicsHandleComponent, GetInterpolationSpeed, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UPhysicsSettings, GetPhysicsHistoryCount, (), ERASE_ARGUMENT_PACK(int)) },


{ ERASE_METHOD_PTR(URadialForceComponent, AddObjectTypeToAffect, (EObjectTypeQuery), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialForceComponent, FireImpulse, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialForceComponent, RemoveObjectTypeToAffect, (EObjectTypeQuery), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialForceComponent, GetbImpulseVelChange, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URadialForceComponent, SetbImpulseVelChange, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialForceComponent, GetbIgnoreOwningActor, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URadialForceComponent, SetbIgnoreOwningActor, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(APlayerState, GetUniqueId, (), ERASE_ARGUMENT_PACK(FUniqueNetIdRepl)) },
{ ERASE_METHOD_PTR(APlayerState, GetCompressedPing, (), ERASE_ARGUMENT_PACK(uint328)) },
{ ERASE_METHOD_PTR(APlayerState, GetPawn, (), ERASE_ARGUMENT_PACK(APawn*)) },
{ ERASE_METHOD_PTR(APlayerState, GetPingInMilliseconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(APlayerState, GetPlayerController, (), ERASE_ARGUMENT_PACK(APlayerController*)) },
{ ERASE_METHOD_PTR(APlayerState, GetPlayerId, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(APlayerState, GetPlayerName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(APlayerState, GetScore, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(APlayerState, IsABot, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APlayerState, IsOnlyASpectator, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APlayerState, IsSpectator, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APlayerState, CopyProperties, (APlayerState), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APlayerState, OverrideWith, (APlayerState), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APlayerState, GetbIsSpectator, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APlayerState, GetbIsABot, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APlayerState, SetbShouldUpdateReplicatedPing, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(APostProcessVolume, GetbEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APostProcessVolume, SetbEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APostProcessVolume, GetbUnbound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(APostProcessVolume, SetbUnbound, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPrimaryAssetLabel, SetbLabelAssetsInMyDirectory, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPrimaryAssetLabel, SetbIsRuntimeLabel, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPrimaryAssetLabel, SetbIncludeRedirectors, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URendererSettings, SetbMobileSupportDeferredOnOpenGL, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileSupportGPUScene, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileAllowDitheredLODTransition, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileVirtualTextures, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDiscardUnusedQualityLevels, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbOcclusionCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbPrecomputedVisibilityWarning, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbTextureStreaming, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbUseDXT5NormalMaps, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbVirtualTextures, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbVirtualTextureEnableAutoImport, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbVirtualTexturedLightmaps, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbVirtualTextureAnisotropicFiltering, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableVirtualTextureOpacityMask, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbClearCoatEnableSecondNormal, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetReflectionEnvironmentLightmapMixBasedOnRoughness, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbUseHardwareRayTracingForLumen, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetLumenFrontLayerTranslucencyReflections, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetLumenRayTracedTranslucentRefractions, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableRayTracing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableRayTracingShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableRayTracingTextureLOD, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnablePathTracing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbGenerateMeshDistanceFields, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbNanite, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbAllowStaticLighting, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbUseNormalMapsForStaticLighting, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbForwardShading, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbVertexFoggingForOpaque, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSeparateTranslucency, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbLocalFogVolumeApplyOnTranslucent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDynamicFoveation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbCustomDepthTaaJitter, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultFeatureBloom, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultFeatureAmbientOcclusion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultFeatureAmbientOcclusionStaticFraction, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultFeatureAutoExposure, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbExtendDefaultLuminanceRangeInAutoExposureSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultFeatureMotionBlur, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultFeatureLensFlare, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbTemporalUpsampling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbRenderUnbuiltPreviewShadowsInGame, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbStencilForLODDither, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEarlyZPassOnlyMaterialMasking, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableCSMCaching, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDBuffer, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSelectiveBasePassOutputs, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDefaultParticleCutouts, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbGlobalClipPlane, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbUseGPUMorphTargets, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportSkyAtmosphere, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportSkyAtmosphereAffectsHeightFog, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportLocalFogVolumes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportCloudShadowOnForwardLitTranslucent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbVolumetricFogUsesLightFunctionAtlas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbDeferredLightingUsesLightFunctionAtlas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSingleLayerWaterUsesLightFunctionAtlas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbTranslucentUsesLightFunctionAtlas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportIESProfileOnTranslucent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportRectLightOnTranslucent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbNvidiaAftermathEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMultiView, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobilePostProcessing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileMultiView, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbRoundRobinOcclusion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMeshStreaming, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableHeterogeneousVolumes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbShouldHeterogeneousVolumesCastShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbCompositeHeterogeneousVolumesWithTranslucency, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportStationarySkylight, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportLowQualityLightmaps, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportPointLightWholeSceneShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportTranslucentPerObjectShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportCloudShadowOnSingleLayerWater, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbEnableSubstrate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetSubstrateOpaqueMaterialRoughRefraction, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetSubstrateDebugAdvancedVisualizationShaders, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMaterialRoughDiffuse, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMaterialEnergyConservation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbOrderedIndependentTransparencyEnable, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbUseHairStrandsAutoLODMode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportSkinCacheShaders, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSkipCompilingGPUSkinVF, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileEnableStaticAndCSMShadowReceivers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileEnableMovableLightCSMShaderCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileForwardEnableClusteredReflections, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileEnableNoPrecomputedLightingCSMShader, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileAllowDistanceFieldShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileAllowMovableDirectionalLights, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileAllowMovableSpotlightShadows, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupport16BitBoneIndex, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbGPUSkinLimit2BoneInfluences, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportDepthOnlyIndexBuffers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbSupportReversedIndexBuffers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileAmbientOcclusion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileDBuffer, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbUseUnlimitedBoneInfluences, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbAlwaysUseDeformerForUnlimitedBoneInfluences, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URendererSettings, SetbMobileSupportsGen4TAA, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URendererOverrideSettings, SetbSupportAllShaderPermutations, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UReplaySubsystem, GetActiveReplayName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UReplaySubsystem, GetReplayCurrentTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UReplaySubsystem, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UReplaySubsystem, IsRecording, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UReplaySubsystem, RequestCheckpoint, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USkinnedAsset, FindSocket, (FName), ERASE_ARGUMENT_PACK(USkeletalMeshSocket*)) },
{ ERASE_METHOD_PTR(USkinnedAsset, FindSocketInfo, (FName, FTransform&, int&, int&), ERASE_ARGUMENT_PACK(USkeletalMeshSocket*)) },


{ ERASE_METHOD_PTR(USkeletalMesh, AddSocket, (USkeletalMeshSocket, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, FindSocketAndIndex, (FName, int&), ERASE_ARGUMENT_PACK(USkeletalMeshSocket*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetBounds, (), ERASE_ARGUMENT_PACK(FBoxSphereBounds)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetDefaultAnimatingRig, (), ERASE_ARGUMENT_PACK(TSoftObjectPtr<UObject>)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetDefaultMeshDeformer, (), ERASE_ARGUMENT_PACK(UMeshDeformer*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetImportedBounds, (), ERASE_ARGUMENT_PACK(FBoxSphereBounds)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetLODSettings, (), ERASE_ARGUMENT_PACK(const USkeletalMeshLODSettings*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetMaterials, (), ERASE_ARGUMENT_PACK(const TArray<FSkeletalMaterial>&)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetMeshClothingAssets, (), ERASE_ARGUMENT_PACK(const TArray<UClothingAssetBase>&)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetMinLODForQualityLevels, (TMap<EPerQualityLevels,int>&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetMorphTargetsPtrConv, (), ERASE_ARGUMENT_PACK(TArray<UMorphTarget>)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetNodeMappingContainer, (UBlueprint), ERASE_ARGUMENT_PACK(UNodeMappingContainer*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetNodeMappingData, (), ERASE_ARGUMENT_PACK(const TArray<UNodeMappingContainer>&)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetOverlayMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetOverlayMaterialMaxDrawDistance, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetPhysicsAsset, (), ERASE_ARGUMENT_PACK(UPhysicsAsset*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetShadowPhysicsAsset, (), ERASE_ARGUMENT_PACK(UPhysicsAsset*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetSkeleton, (), ERASE_ARGUMENT_PACK(const USkeleton*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetSocketByIndex, (int), ERASE_ARGUMENT_PACK(USkeletalMeshSocket*)) },
{ ERASE_METHOD_PTR(USkeletalMesh, IsSectionUsingCloth, (int, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetAllMorphTargetNames, (), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(USkeletalMesh, NumSockets, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetDefaultAnimatingRig, (TSoftObjectPtr<UObject>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetLODSettings, (USkeletalMeshLODSettings), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetMaterials, (const TArray<FSkeletalMaterial>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetMeshClothingAssets, (const TArray<UClothingAssetBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetMinLODForQualityLevels, (const TMap<EPerQualityLevels,int>&, int = - 1), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetMorphTargets, (const TArray<UMorphTarget>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetOverlayMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetOverlayMaterialMaxDrawDistance, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetSkeleton, (USkeleton), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, GetMorphTargets, (), ERASE_ARGUMENT_PACK(TArray<UMorphTarget>)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetbEnablePerPolyCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetPhysicsAsset, (UPhysicsAsset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetShadowPhysicsAsset, (UPhysicsAsset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetNodeMappingData, (const TArray<TObjectPtr<UNodeMappingContainer>>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetbSupportRayTracing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMesh, SetDefaultMeshDeformer, (UMeshDeformer), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundCue, SetbPrimeOnLoad, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundCue, SetbOverrideAttenuation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundCue, SetbExcludeFromRandomNodeBranchCulling, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundMix, SetbApplyEQ, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeAttenuation, SetbOverrideAttenuation, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeDialoguePlayer, SetbLooping, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeEnveloper, SetbLoopIndefinitely, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundNodeEnveloper, SetbLoop, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeLooping, SetbLoopIndefinitely, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeOscillator, SetbModulateVolume, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundNodeOscillator, SetbModulatePitch, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeRandom, SetbShouldExcludeFromBranchCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundNodeRandom, SetbRandomizeWithoutReplacement, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundNodeWavePlayer, SetbLooping, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundSubmixBase, DynamicConnect, (const UObject, USoundSubmixBase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundSubmixBase, DynamicDisconnect, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundSubmixBase, FindDynamicAncestor, (), ERASE_ARGUMENT_PACK(USoundSubmixBase*)) },


{ ERASE_METHOD_PTR(USoundSubmixWithParentBase, GetbIsDynamic, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundSubmixWithParentBase, SetbIsDynamic, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundSubmix, AddEnvelopeFollowerDelegate, (const UObject = __WorldContext, const FOnSubmixEnvelopeBP& = FOnSubmixEnvelopeBP ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, AddSpectralAnalysisDelegate, (const UObject, const TArray<FSoundSubmixSpectralAnalysisBandSettings>&, const FOnSubmixSpectralAnalysisBP& = FOnSubmixSpectralAnalysisBP ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, RemoveSpectralAnalysisDelegate, (const UObject = __WorldContext, const FOnSubmixSpectralAnalysisBP& = FOnSubmixSpectralAnalysisBP ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, SetSubmixDryLevel, (const UObject, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, SetSubmixOutputVolume, (const UObject, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, SetSubmixWetLevel, (const UObject, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, StartEnvelopeFollowing, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, StartRecordingOutput, (const UObject, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, StartSpectralAnalysis, (const UObject = __WorldContext, EFFTSize = EFFTSize :: DefaultSize, EFFTPeakInterpolationMethod = EFFTPeakInterpolationMethod :: Linear, EFFTWindowType = EFFTWindowType :: Hann, float32 = 0.000000, EAudioSpectrumType = EAudioSpectrumType :: MagnitudeSpectrum), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, StopEnvelopeFollowing, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, StopRecordingOutput, (const UObject, EAudioRecordingExportType, const FString&, FString, USoundWave = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, StopSpectralAnalysis, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, GetbMuteWhenBackgrounded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundSubmix, SetbMuteWhenBackgrounded, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundSubmix, GetbSendToAudioLink, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundSubmix, SetbSendToAudioLink, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UStaticMesh, AddMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UStaticMesh, AddSocket, (UStaticMeshSocket), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, BuildFromStaticMeshDescriptions, (const TArray<UStaticMeshDescription>&, bool = false, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, FindSocket, (FName), ERASE_ARGUMENT_PACK(UStaticMeshSocket*)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetBoundingBox, (), ERASE_ARGUMENT_PACK(FBox)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetBounds, (), ERASE_ARGUMENT_PACK(FBoxSphereBounds)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMaterial, (int), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMaterialIndex, (FName), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMinimumLODForPlatform, (const FName&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMinimumLODForPlatforms, (TMap<FName,int>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMinimumLODForQualityLevel, (const FName&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMinimumLODForQualityLevels, (TMap<FName,int>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetMinLODForQualityLevels, (TMap<EPerQualityLevels,int>&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetNumLods, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetNumSections, (int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetNumTriangles, (int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetSocketsByTag, (const FString&), ERASE_ARGUMENT_PACK(TArray<UStaticMeshSocket>)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetStaticMaterials, (), ERASE_ARGUMENT_PACK(const TArray<FStaticMaterial>&)) },
{ ERASE_METHOD_PTR(UStaticMesh, GetStaticMeshDescription, (int), ERASE_ARGUMENT_PACK(UStaticMeshDescription*)) },
{ ERASE_METHOD_PTR(UStaticMesh, IsLODScreenSizeAutoComputed, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMesh, RemoveSocket, (UStaticMeshSocket), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetMaterial, (int, UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetMinimumLODForPlatform, (const FName&, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetMinimumLODForPlatforms, (const TMap<FName,int>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetMinLODForQualityLevels, (const TMap<EPerQualityLevels,int>&, int = - 1), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetNumSourceModels, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetStaticMaterials, (const TArray<FStaticMaterial>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbGenerateMeshDistanceField, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbHasNavigationData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbSupportUniformlyDistributedSampling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbSupportPhysicalMaterialMasks, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbUseLegacyTangentScaling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbSupportRayTracing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbAllowCPUAccess, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMesh, SetbSupportGpuUniformlyDistributedSampling, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTextureRenderTarget2DArray, GetbHDR, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTextureRenderTarget2DArray, SetbHDR, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTextureRenderTargetCube, GetbHDR, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTextureRenderTargetCube, SetbHDR, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTextureRenderTargetVolume, GetbHDR, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTextureRenderTargetVolume, SetbHDR, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTimelineTemplate, SetbAutoPlay, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTimelineTemplate, SetbLoop, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTimelineTemplate, GetbReplicated, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTimelineTemplate, SetbReplicated, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTimelineTemplate, SetbIgnoreTimeDilation, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCanvas, Deproject, (FVector2D, FVector&, FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawBorder, (UTexture, UTexture, UTexture, UTexture, UTexture, UTexture, FVector2D, FVector2D, FVector2D, FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawBox, (FVector2D, FVector2D, float32 = 1.000000, FLinearColor = FLinearColor ( 1.000000 , 1.000000 , 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawLine, (FVector2D = FVector2D ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawMaterial, (UMaterialInterface, FVector2D, FVector2D, FVector2D, FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawMaterialTriangles, (UMaterialInterface, TArray<FCanvasUVTri>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawPolygon, (UTexture, FVector2D, FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawText, (UFont, const FString&, FVector2D, FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawTexture, (UTexture, FVector2D, FVector2D, FVector2D, FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, DrawTriangles, (UTexture, TArray<FCanvasUVTri>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvas, Project, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UCanvas, WrappedTextSize, (UFont, const FString&), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UCanvas, ClippedTextSize, (UFont, const FString&, FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(FVector2D)) },


{ ERASE_METHOD_PTR(UInputSettings, GetUniqueActionName, (const FName), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UInputSettings, GetUniqueAxisName, (const FName), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UInputSettings, GetActionMappings, (), ERASE_ARGUMENT_PACK(const TArray<FInputActionKeyMapping>&)) },
{ ERASE_METHOD_PTR(UInputSettings, GetAxisMappings, (), ERASE_ARGUMENT_PACK(const TArray<FInputAxisKeyMapping>&)) },
{ ERASE_METHOD_PTR(UInputSettings, GetSpeechMappings, (), ERASE_ARGUMENT_PACK(const TArray<FInputActionSpeechMapping>&)) },
{ ERASE_METHOD_PTR(UInputSettings, DoesActionExist, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputSettings, DoesAxisExist, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputSettings, DoesSpeechExist, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputSettings, AddActionMapping, (const FInputActionKeyMapping&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, AddAxisMapping, (const FInputAxisKeyMapping&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, ForceRebuildKeymaps, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, GetActionMappingByName, (const FName, TArray<FInputActionKeyMapping>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, GetActionNames, (TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, GetAxisMappingByName, (const FName, TArray<FInputAxisKeyMapping>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, GetAxisNames, (TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, RemoveActionMapping, (const FInputActionKeyMapping&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, RemoveAxisMapping, (const FInputAxisKeyMapping&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SaveKeyMappings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbAltEnterTogglesFullscreen, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbF11TogglesFullscreen, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbUseMouseForTouch, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableMouseSmoothing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableFOVScaling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbCaptureMouseOnLaunch, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableLegacyInputScales, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableMotionControls, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbFilterInputByPlatformUser, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableInputDeviceSubsystem, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbShouldFlushPressedKeysOnViewportFocusLost, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableDynamicComponentInputBinding, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbAlwaysShowTouchInterface, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbShowConsoleOnFourFingerTap, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbEnableGestureRecognizer, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetbUseAutocorrect, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetActionMappings, (const TArray<FInputActionKeyMapping>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetAxisMappings, (const TArray<FInputAxisKeyMapping>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputSettings, SetSpeechMappings, (const TArray<FInputActionSpeechMapping>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPlayerInput, GetOuterAPlayerController, (), ERASE_ARGUMENT_PACK(APlayerController*)) },
{ ERASE_METHOD_PTR(UPlayerInput, AddActionMapping, (const FInputActionKeyMapping&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerInput, AddAxisMapping, (const FInputAxisKeyMapping&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerInput, ForceRebuildingKeyMaps, (const bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerInput, GetEngineDefinedActionMappings, (const FName), ERASE_ARGUMENT_PACK(const TArray<FInputActionKeyMapping>&)) },
{ ERASE_METHOD_PTR(UPlayerInput, GetEngineDefinedAxisMappings, (const FName), ERASE_ARGUMENT_PACK(const TArray<FInputAxisKeyMapping>&)) },
{ ERASE_METHOD_PTR(UPlayerInput, GetKeysForAction, (const FName), ERASE_ARGUMENT_PACK(const TArray<FInputActionKeyMapping>&)) },
{ ERASE_METHOD_PTR(UPlayerInput, GetKeysForAxis, (const FName), ERASE_ARGUMENT_PACK(const TArray<FInputAxisKeyMapping>&)) },
{ ERASE_METHOD_PTR(UPlayerInput, GetMouseSensitivityX, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPlayerInput, GetMouseSensitivityY, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPlayerInput, InvertAxis, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerInput, RemoveActionMapping, (const FInputActionKeyMapping&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerInput, RemoveAxisMapping, (const FInputAxisKeyMapping&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerInput, SetMouseSensitivity, (const float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UVOIPTalker, BPOnTalkingBegin, (UAudioComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVOIPTalker, BPOnTalkingEnd, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVOIPTalker, GetVoiceLevel, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UVOIPTalker, RegisterWithPlayerState, (APlayerState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URuntimeVirtualTexture, GetPageTableSize, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, GetSize, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, GetTileBorderSize, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, GetTileCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, GetTileSize, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, SetTileCount, (const int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, SetTileSize, (const int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URuntimeVirtualTexture, SetTileBorderSize, (const int&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AWorldDataLayers, OnDataLayerRuntimeStateChanged, (const UDataLayerInstance, EDataLayerRuntimeState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, Equals, (const FActorDataLayer&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, GetDataLayerLabel, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, GetDebugColor, (), ERASE_ARGUMENT_PACK(FColor)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, GetInitialRuntimeState, (), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, GetInitialState, (), ERASE_ARGUMENT_PACK(EDataLayerState)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, IsDynamicallyLoaded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, IsEffectiveVisible, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, IsInitiallyActive, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, IsInitiallyVisible, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, IsRuntime, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, IsVisible, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, SetbIsInitiallyVisible, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, SetbIsInitiallyLoadedInEditor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, SetbIsRuntime, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, SetInitialRuntimeState, (const EDataLayerRuntimeState&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_DataLayer, SetDebugColor, (const FColor&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetActiveDataLayerNames, (), ERASE_ARGUMENT_PACK(const TSet<FName>&)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayer, (const FActorDataLayer&), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerEffectiveRuntimeState, (const FActorDataLayer&), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerEffectiveRuntimeStateByLabel, (const FName&), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerFromLabel, (FName), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerFromName, (FName), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerInstanceEffectiveRuntimeState, (const UDataLayerAsset), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerInstanceFromAsset, (const UDataLayerAsset), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerInstanceRuntimeState, (const UDataLayerAsset), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerRuntimeState, (const FActorDataLayer&), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerRuntimeStateByLabel, (const FName&), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerState, (const FActorDataLayer&), ERASE_ARGUMENT_PACK(EDataLayerState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetDataLayerStateByLabel, (const FName&), ERASE_ARGUMENT_PACK(EDataLayerState)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, GetLoadedDataLayerNames, (), ERASE_ARGUMENT_PACK(const TSet<FName>&)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, SetDataLayerInstanceRuntimeState, (const UDataLayerAsset, EDataLayerRuntimeState, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, SetDataLayerRuntimeState, (const FActorDataLayer&, EDataLayerRuntimeState, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, SetDataLayerRuntimeStateByLabel, (const FName&, EDataLayerRuntimeState, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, SetDataLayerState, (const FActorDataLayer&, EDataLayerState), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerSubsystem, SetDataLayerStateByLabel, (const FName&, EDataLayerState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDeprecatedDataLayerInstance, SetDebugColor, (const FColor&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UHLODLayer, SetbIsSpatiallyLoaded, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbHideEditorDataLayers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbHideRuntimeDataLayers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbHideDataLayerActors, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbHideUnloadedActors, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbShowOnlySelectedActors, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbHighlightSelectedDataLayers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbHideLevelInstanceContent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbDisableLoadingOfLastLoadedRegions, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbBugItGoLoadRegion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorldPartitionEditorPerProjectUserSettings, SetbShowCellCoords, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UWorldPartitionSubsystem, IsAllStreamingCompleted, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorldPartitionSubsystem, IsStreamingCompleted, (EWorldPartitionRuntimeCellState, const TArray<FWorldPartitionStreamingQuerySource>&, bool), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USoundFactory, SetbAutoCreateCue, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundFactory, SetbIncludeAttenuationNode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundFactory, SetbIncludeLoopingNode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundFactory, SetbIncludeModulatorNode, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimationModifier, OnApply, (UAnimSequence), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimationModifier, OnRevert, (UAnimSequence), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AChaosCacheManager, EnablePlayback, (int, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, EnablePlaybackByCache, (FName, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, ResetAllComponentTransforms, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, ResetSingleTransform, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, SetCacheCollection, (UChaosCacheCollection), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, SetCurrentTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, TriggerAll, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, TriggerComponent, (UPrimitiveComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AChaosCacheManager, TriggerComponentByCache, (FName), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UChaosClothingInteractor, ResetAndTeleport, (bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetAerodynamics, (float32 = 0.070000, float32 = 0.035000, FVector = FVector ( 0.000000 , 0.000000 , 0.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetAnimDrive, (FVector2D = FVector2D ( 0.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetAnimDriveLinear, (float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetBackstop, (bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetCollision, (float32 = 1.000000, float32 = 0.800000, bool = false, float32 = 2.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetDamping, (float32 = 0.010000, float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetGravity, (float32 = 1.000000, bool = false, FVector = FVector ( 0.000000 , 0.000000 , - 981.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetLongRangeAttachment, (FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetLongRangeAttachmentLinear, (float32 = 1.000000, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetMaterial, (FVector2D = FVector2D ( 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetMaterialLinear, (float32 = 1.000000, float32 = 1.000000, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetPressure, (FVector2D = FVector2D ( 0.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetVelocityScale, (FVector = FVector ( 0.750000 , 0.750000 , 0.750000 ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosClothingInteractor, SetWind, (FVector2D = FVector2D ( 0.070000 , 0.500000 ), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbCaptureAllActivity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbCaptureAllCallstacks, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbReferenceAllResources, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbSaveAllInitials, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbCaptureDelayInSeconds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbAutoAttach, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbShowHelpOnStartup, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URenderDocPluginSettings, SetbEnableRenderDocCrashHandler, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTurnBasedMatchInterface, OnMatchEnded, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTurnBasedMatchInterface, OnMatchReceivedTurn, (const FString&, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AOnlineBeaconClient, ClientOnConnected, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(APartyBeaconClient, ClientCancelReservationResponse, (EPartyReservationResult), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APartyBeaconClient, ClientReservationResponse, (EPartyReservationResult), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APartyBeaconClient, ClientSendReservationFull, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APartyBeaconClient, ClientSendReservationUpdates, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APartyBeaconClient, ServerCancelReservationRequest, (const FUniqueNetIdRepl&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ASpectatorBeaconClient, ClientCancelReservationResponse, (ESpectatorReservationResult), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ASpectatorBeaconClient, ClientReservationResponse, (ESpectatorReservationResult), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ASpectatorBeaconClient, ClientSendReservationFull, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ASpectatorBeaconClient, ClientSendReservationUpdates, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ASpectatorBeaconClient, ServerCancelReservationRequest, (const FUniqueNetIdRepl&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ATestBeaconClient, ClientPing, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ATestBeaconClient, ServerPong, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UVoipListenerSynthComponent, IsIdling, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(ULevelVariantSets, GetNumVariantSets, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(ULevelVariantSets, GetVariantSet, (int), ERASE_ARGUMENT_PACK(UVariantSet*)) },
{ ERASE_METHOD_PTR(ULevelVariantSets, GetVariantSetByName, (FString), ERASE_ARGUMENT_PACK(UVariantSet*)) },


{ ERASE_METHOD_PTR(ALevelVariantSetsActor, GetLevelVariantSets, (bool = false), ERASE_ARGUMENT_PACK(ULevelVariantSets*)) },
{ ERASE_METHOD_PTR(ALevelVariantSetsActor, SetLevelVariantSets, (ULevelVariantSets), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelVariantSetsActor, SwitchOnVariantByIndex, (int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ALevelVariantSetsActor, SwitchOnVariantByName, (FString, FString), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UPropertyValue, GetFullDisplayString, (), ERASE_ARGUMENT_PACK(const FString&)) },
{ ERASE_METHOD_PTR(UPropertyValue, GetPropertyTooltip, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UPropertyValue, HasRecordedData, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(ASwitchActor, GetOptions, (), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(ASwitchActor, GetSelectedOption, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(ASwitchActor, SelectOption, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UVariant, GetActor, (int), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(UVariant, GetDependency, (int), ERASE_ARGUMENT_PACK(FVariantDependency&)) },
{ ERASE_METHOD_PTR(UVariant, GetDependents, (ULevelVariantSets, bool), ERASE_ARGUMENT_PACK(TArray<UVariant>)) },
{ ERASE_METHOD_PTR(UVariant, GetDisplayText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UVariant, GetNumActors, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UVariant, GetNumDependencies, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UVariant, GetParent, (), ERASE_ARGUMENT_PACK(UVariantSet*)) },
{ ERASE_METHOD_PTR(UVariant, GetThumbnail, (), ERASE_ARGUMENT_PACK(UTexture2D*)) },
{ ERASE_METHOD_PTR(UVariant, IsActive, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UVariant, SetDisplayText, (const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariant, SetThumbnailFromCamera, (UObject, const FTransform&, float32 = 50.000000, float32 = 50.000000, float32 = 2.200000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariant, SetThumbnailFromEditorViewport, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariant, SetThumbnailFromFile, (FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariant, SetThumbnailFromTexture, (UTexture2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariant, SwitchOn, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UVariantSet, GetDisplayText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UVariantSet, GetNumVariants, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UVariantSet, GetParent, (), ERASE_ARGUMENT_PACK(ULevelVariantSets*)) },
{ ERASE_METHOD_PTR(UVariantSet, GetThumbnail, (), ERASE_ARGUMENT_PACK(UTexture2D*)) },
{ ERASE_METHOD_PTR(UVariantSet, GetVariant, (int), ERASE_ARGUMENT_PACK(UVariant*)) },
{ ERASE_METHOD_PTR(UVariantSet, GetVariantByName, (FString), ERASE_ARGUMENT_PACK(UVariant*)) },
{ ERASE_METHOD_PTR(UVariantSet, SetDisplayText, (const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariantSet, SetThumbnailFromCamera, (UObject, const FTransform&, float32 = 50.000000, float32 = 50.000000, float32 = 2.200000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariantSet, SetThumbnailFromEditorViewport, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariantSet, SetThumbnailFromFile, (FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVariantSet, SetThumbnailFromTexture, (UTexture2D), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ADatasmithImportedSequencesActor, PlayLevelSequence, (ULevelSequence), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGLTFExportOptions, ResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGLTFProxyOptions, ResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimationSequenceBrowserContextMenuContext, GetSelectedObjects, (), ERASE_ARGUMENT_PACK(TArray<UObject*>)) },


{ ERASE_METHOD_PTR(UPersonaToolMenuContext, GetAnimationAsset, (), ERASE_ARGUMENT_PACK(UAnimationAsset*)) },
{ ERASE_METHOD_PTR(UPersonaToolMenuContext, GetAnimBlueprint, (), ERASE_ARGUMENT_PACK(UAnimBlueprint*)) },
{ ERASE_METHOD_PTR(UPersonaToolMenuContext, GetMesh, (), ERASE_ARGUMENT_PACK(USkeletalMesh*)) },
{ ERASE_METHOD_PTR(UPersonaToolMenuContext, GetPreviewMeshComponent, (), ERASE_ARGUMENT_PACK(UDebugSkelMeshComponent*)) },
{ ERASE_METHOD_PTR(UPersonaToolMenuContext, GetSkeleton, (), ERASE_ARGUMENT_PACK(USkeleton*)) },


{ ERASE_METHOD_PTR(UMockDataMeshTrackerComponent, ConnectMRMesh, (UMRMeshComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMockDataMeshTrackerComponent, DisconnectMRMesh, (UMRMeshComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMRMeshComponent, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, ForceNavMeshUpdate, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, GetEnableMeshOcclusion, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, GetUseWireframe, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, GetWireframeColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, IsConnected, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, RequestNavMeshUpdate, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, SetEnableMeshOcclusion, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, SetUseWireframe, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, SetWireframeColor, (const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMRMeshComponent, SetWireframeMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMeshReconstructorBase, IsReconstructionPaused, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMeshReconstructorBase, IsReconstructionStarted, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMeshReconstructorBase, PauseReconstruction, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMeshReconstructorBase, StartReconstruction, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMeshReconstructorBase, StopReconstruction, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAssetThumbnailWidget, GetResolution, (), ERASE_ARGUMENT_PACK(FIntPoint)) },
{ ERASE_METHOD_PTR(UAssetThumbnailWidget, SetAsset, (const FAssetData&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAssetThumbnailWidget, SetAssetByObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAssetThumbnailWidget, SetResolution, (const FIntPoint&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAssetThumbnailWidget, SetThumbnailSettings, (const FAssetThumbnailWidgetSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAssetThumbnailWidget, GetThumbnailSettings, (), ERASE_ARGUMENT_PACK(const FAssetThumbnailWidgetSettings&)) },


{ ERASE_METHOD_PTR(UWidgetDesignerSettings, SetGridSnapEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPropertyViewBase, GetObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UPropertyViewBase, SetObject, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USinglePropertyView, GetNameOverride, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(USinglePropertyView, GetPropertyName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USinglePropertyView, SetNameOverride, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USinglePropertyView, SetPropertyName, (FName), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAutomationEditorTask, IsTaskDone, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAutomationEditorTask, IsValidTask, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(AFunctionalTest, AddError, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AddInfo, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AddRerun, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AddWarning, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Bool, (bool, bool, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Box2D, (FBox2D, FBox2D, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Double, (float, float, const FString&, float = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Float, (float32, float32, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Int, (int, int, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Matrix, (FMatrix, FMatrix, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Name, (FName, FName, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Object, (UObject, UObject, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Plane, (FPlane, FPlane, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Quat, (FQuat, FQuat, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Rotator, (FRotator, FRotator, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_RotatorOrientation, (FRotator, FRotator, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_String, (FString, FString, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_TraceQueryResults, (const UTraceQueryTestResults, const UTraceQueryTestResults, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Transform, (const FTransform&, const FTransform&, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Vector, (FVector, FVector, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Vector2D, (FVector2D, FVector2D, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertEqual_Vector4, (FVector4, FVector4, const FString&, float32 = 0.000100, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertFalse, (bool, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertIsValid, (UObject, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Box2D, (FBox2D, FBox2D, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Matrix, (FMatrix, FMatrix, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Plane, (FPlane, FPlane, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Quat, (FQuat, FQuat, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Rotator, (FRotator, FRotator, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_String, (FString, FString, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Transform, (const FTransform&, const FTransform&, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Vector, (FVector, FVector, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Vector2D, (FVector2D, FVector2D, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertNotEqual_Vector4, (FVector4, FVector4, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertTrue, (bool, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertValue_DateTime, (FDateTime, EComparisonMethod, FDateTime, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertValue_Double, (float, EComparisonMethod, float, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertValue_Float, (float32, EComparisonMethod, float32, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, AssertValue_Int, (int, EComparisonMethod, int, const FString&, const UObject = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, DebugGatherRelevantActors, (), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(AFunctionalTest, FinishTest, (EFunctionalTestResult, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, GetCurrentRerunReason, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(AFunctionalTest, IsEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, IsReady, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, IsRunning, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, LogMessage, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, OnAdditionalTestFinishedMessageRequest, (EFunctionalTestResult), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(AFunctionalTest, OnWantsReRunCheck, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, PrepareTest, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, StartTest, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, RegisterAutoDestroyActor, (AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariable, (const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariableFromBoolean, (const FString&, const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariableFromFloat, (const FString&, const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetConsoleVariableFromInteger, (const FString&, const int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetTimeLimit, (float32, EFunctionalTestResult), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, GetbIsEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetbIsEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, GetbShouldDelayGarbageCollection, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalTest, SetbShouldDelayGarbageCollection, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalTest, GetTimeLimit, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(AFunctionalAITestBase, IsOneOfSpawnedPawns, (AActor), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalAITestBase, GetbWaitForNavMesh, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AFunctionalAITestBase, SetbWaitForNavMesh, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AFunctionalAITestBase, SetbDebugNavMeshOnTimeout, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, BeginRecording, (FString, float32, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, BeginRecordingBaseline, (FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, BeginStatsFile, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, EndRecording, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, EndRecordingBaseline, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, EndStatsFile, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, IsCurrentRecordWithinGameThreadBudget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, IsCurrentRecordWithinGPUBudget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, IsCurrentRecordWithinRenderThreadBudget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, IsRecording, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, OnAllTestsComplete, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, OnBeginTests, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, Sample, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, StartCPUProfiling, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, StopCPUProfiling, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, Tick, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, TriggerGPUTraceIfRecordFallsBelowBudget, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAutomationPerformaceHelper, WriteLogFile, (const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(APhasedAutomationActorBase, OnFunctionalTestingBegin, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(APhasedAutomationActorBase, OnFunctionalTestingComplete, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGroundTruthData, CanModify, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGroundTruthData, LoadObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UGroundTruthData, ResetObject, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGroundTruthData, SaveObject, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTraceQueryTestResults, ToString, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(UBehaviorTreeGraphNode_CompositeDecorator, SetbShowOperations, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UClothingSimulationInteractorNv, SetAnimDriveDamperStiffness, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, DoesMappingPassQueryOptions, (const FPlayerKeyMapping&, const FPlayerMappableKeyQueryOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, DumpProfileToLog, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, GetMappedKeysInRow, (const FName, TArray<FKey>&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, GetMappingNamesForKey, (const FKey&, TArray<FName>&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, GetPlayerMappingRows, (), ERASE_ARGUMENT_PACK(const TMap<FName,FKeyMappingRow>&)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, GetProfileDisplayName, (), ERASE_ARGUMENT_PACK(const FText&)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, GetProfileIdentifer, (), ERASE_ARGUMENT_PACK(const FGameplayTag&)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, FindKeyMapping, (FPlayerKeyMapping&, const FMapPlayerKeyArgs&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, QueryPlayerMappedKeys, (const FPlayerMappableKeyQueryOptions&, TArray<FKey>&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, ResetMappingToDefault, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, ResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, SetDisplayName, (const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, ToString, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UEnhancedPlayerMappableKeyProfile, GetDisplayName, (), ERASE_ARGUMENT_PACK(const FText&)) },


{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, ApplySettings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, AsyncSaveSettings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, CreateNewKeyProfile, (const FPlayerMappableKeyProfileCreationArgs&), ERASE_ARGUMENT_PACK(UEnhancedPlayerMappableKeyProfile*)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, FindMappingsInRow, (const FName), ERASE_ARGUMENT_PACK(const TSet<FPlayerKeyMapping>&)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, GetCurrentKeyProfile, (), ERASE_ARGUMENT_PACK(UEnhancedPlayerMappableKeyProfile*)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, GetCurrentKeyProfileIdentifier, (), ERASE_ARGUMENT_PACK(const FGameplayTag&)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, GetKeyProfileWithIdentifier, (const FGameplayTag&), ERASE_ARGUMENT_PACK(UEnhancedPlayerMappableKeyProfile*)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, IsMappingContextRegistered, (const UInputMappingContext), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, MapPlayerKey, (const FMapPlayerKeyArgs&, FGameplayTagContainer&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, RegisterInputMappingContext, (const UInputMappingContext), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, RegisterInputMappingContexts, (const TSet<UInputMappingContext>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, ResetAllPlayerKeysInRow, (const FMapPlayerKeyArgs&, FGameplayTagContainer&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, ResetKeyProfileToDefault, (const FGameplayTag&, FGameplayTagContainer&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, SaveSettings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, SetKeyProfile, (const FGameplayTag&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, UnMapPlayerKey, (const FMapPlayerKeyArgs&, FGameplayTagContainer&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, UnregisterInputMappingContext, (const UInputMappingContext), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputUserSettings, UnregisterInputMappingContexts, (const TSet<UInputMappingContext>&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbSendTriggeredEventsWhenInputIsFlushed, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbEnableUserSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbEnableDefaultMappingContexts, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbShouldOnlyTriggerLastActionInChord, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbLogOnDeprecatedConfigUsed, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbEnableWorldSubsystem, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputDeveloperSettings, SetbShouldLogAllWorldSubsystemInputs, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEnhancedInputPlatformData, GetContextRedirect, (UInputMappingContext), ERASE_ARGUMENT_PACK(const UInputMappingContext*)) },


{ ERASE_METHOD_PTR(UEnhancedInputWorldSubsystem, AddActorInputComponent, (AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputWorldSubsystem, RemoveActorInputComponent, (AActor), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInputMappingContext, MapKey, (const UInputAction, FKey), ERASE_ARGUMENT_PACK(FEnhancedActionKeyMapping&)) },
{ ERASE_METHOD_PTR(UInputMappingContext, UnmapAction, (const UInputAction), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputMappingContext, UnmapAll, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputMappingContext, UnmapAllKeysFromAction, (const UInputAction), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputMappingContext, UnmapKey, (const UInputAction, FKey), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInputModifier, GetVisualizationColor, (FInputActionValue, FInputActionValue), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UInputModifier, ModifyRaw, (const UEnhancedPlayerInput, FInputActionValue, float32), ERASE_ARGUMENT_PACK(FInputActionValue)) },


{ ERASE_METHOD_PTR(UInputTrigger, GetTriggerType, (), ERASE_ARGUMENT_PACK(ETriggerType)) },
{ ERASE_METHOD_PTR(UInputTrigger, IsActuated, (const FInputActionValue&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputTrigger, UpdateState, (const UEnhancedPlayerInput, FInputActionValue, float32), ERASE_ARGUMENT_PACK(ETriggerState)) },


{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetConfigName, (), ERASE_ARGUMENT_PACK(const FName)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetDisplayName, (), ERASE_ARGUMENT_PACK(const FText&)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetKeysBoundToAction, (const UInputAction), ERASE_ARGUMENT_PACK(TArray<FEnhancedActionKeyMapping>)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetMappingByName, (const FName), ERASE_ARGUMENT_PACK(FEnhancedActionKeyMapping)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetMappingContexts, (), ERASE_ARGUMENT_PACK(const TMap<TObjectPtr<UInputMappingContext>,int>&)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetMetadata, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, GetPlayerMappableKeys, (), ERASE_ARGUMENT_PACK(TArray<FEnhancedActionKeyMapping>)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, IsDeprecated, (), ERASE_ARGUMENT_PACK(const bool)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, ResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, SetConfigName, (const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPlayerMappableInputConfig, SetMetadata, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPlayerMappableKeySettings, SetName, (const FName&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEnhancedInputEditorSettings, SetbLogAllInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputEditorSettings, SetbAutomaticallyStartConsumingInput, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEnhancedInputEditorSubsystem, IsConsumingInput, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputEditorSubsystem, PopInputComponent, (UInputComponent), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEnhancedInputEditorSubsystem, PushInputComponent, (UInputComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputEditorSubsystem, StartConsumingInput, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEnhancedInputEditorSubsystem, StopConsumingInput, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_InputDebugKey, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputDebugKey, SetbControl, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputDebugKey, SetbAlt, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputDebugKey, SetbShift, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputDebugKey, SetbCommand, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTakeMetaData, GenerateAssetPath, (const FString&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetDescription, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetDuration, (), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetFrameRate, (), ERASE_ARGUMENT_PACK(FFrameRate)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetFrameRateFromTimecode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetLevelOrigin, (), ERASE_ARGUMENT_PACK(ULevel*)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetLevelPath, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetPresetOrigin, (), ERASE_ARGUMENT_PACK(UTakePreset*)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetSlate, (), ERASE_ARGUMENT_PACK(const FString&)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetTakeNumber, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetTimecodeIn, (), ERASE_ARGUMENT_PACK(FTimecode)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetTimecodeOut, (), ERASE_ARGUMENT_PACK(FTimecode)) },
{ ERASE_METHOD_PTR(UTakeMetaData, GetTimestamp, (), ERASE_ARGUMENT_PACK(FDateTime)) },
{ ERASE_METHOD_PTR(UTakeMetaData, IsLocked, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTakeMetaData, Lock, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, Recorded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetDescription, (FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetDuration, (FFrameTime), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetFrameRate, (FFrameRate), ERASE_ARGUMENT_PACK(void)) },
*/