#pragma once
//#include"FunctionCallers.h"
/*
{ ERASE_METHOD_PTR(UNavigationPath, GetPathLength, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNavigationPath, IsPartial, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavigationPath, IsStringPulled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavigationPath, IsValid, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UWorld, IsGameWorld, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorld, IsEditorWorld, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorld, IsPreviewWorld, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorld, ServerTravel, (const FString&, bool, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorld, GetNetMode, (), ERASE_ARGUMENT_PACK(ENetMode)) },
{ ERASE_METHOD_PTR(UWorld, GetGameState, (), ERASE_ARGUMENT_PACK(AGameStateBase*)) },
{ ERASE_METHOD_PTR(UWorld, GetTimeSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UWorld, GetUnpausedTimeSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UWorld, GetRealTimeSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UWorld, GetAudioTimeSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UWorld, GetDeltaSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UWorld, IsStartingUp, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorld, IsTearingDown, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWorld, SetGameInstance, (UGameInstance), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWorld, GetGameInstance, (), ERASE_ARGUMENT_PACK(UGameInstance*)) },
{ ERASE_METHOD_PTR(UWorld, GetLevelScriptActor, (), ERASE_ARGUMENT_PACK(ALevelScriptActor*)) },
{ ERASE_METHOD_PTR(UWorld, GetPersistentLevel, (), ERASE_ARGUMENT_PACK(ULevel*)) },
{ ERASE_METHOD_PTR(UWorld, GetDataLayerManager, (), ERASE_ARGUMENT_PACK(UDataLayerManager*)) },
{ ERASE_METHOD_PTR(UWorld, GetWorldSettings, (), ERASE_ARGUMENT_PACK(AWorldSettings*)) },
{ ERASE_METHOD_PTR(UWorld, GetStreamingLevels, (), ERASE_ARGUMENT_PACK(TArray<ULevelStreaming>)) },


{ ERASE_METHOD_PTR(UNavigationSystemV1, ReplaceAreaInOctreeData, (const UObject, TSubclassOf<UNavArea>, TSubclassOf<UNavArea>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, OnNavigationBoundsUpdated, (ANavMeshBoundsVolume), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, RegisterNavigationInvoker, (AActor, float32 = 3000.000000, float32 = 5000.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, ResetMaxSimultaneousTileGenerationJobsCount, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetGeometryGatheringMode, (ENavDataGatheringModeConfig), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetMaxSimultaneousTileGenerationJobsCount, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, UnregisterNavigationInvoker, (AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbAutoCreateNavigationData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbSpawnNavDataInNavBoundsLevel, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbAllowClientSideNavigation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbShouldDiscardSubLevelNavData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbTickWhilePaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbInitialBuildingLocked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbSkipAgentHeightCheckWhenPickingNavData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemV1, SetbGenerateNavigationOnlyAroundNavigationInvokers, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNavigationSystemModuleConfig, SetbStrictlyStatic, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemModuleConfig, SetbCreateOnClient, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemModuleConfig, SetbAutoSpawnMissingNavData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavigationSystemModuleConfig, SetbSpawnNavDataInNavBoundsLevel, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbActAsNavigationInvoker, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, GetbProjectedLocationValid, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbSearchStart, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbBacktracking, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbUseHierarchicalPathfinding, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbGatherDetailedInfo, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbRequireNavigableEndLocation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbDrawDistanceToWall, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbDrawIfNavDataIsReadyInRadius, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbShowNodePool, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbShowBestPath, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbShowDiffWithPreviousStep, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, SetbShouldBeVisibleInGame, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, GetbPathExist, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, GetbPathIsPartial, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ANavigationTestingActor, GetbPathSearchOutOfNodes, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UNavRelevantComponent, SetNavigationRelevancy, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNavLinkCustomComponent, SetbLinkEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavLinkCustomComponent, SetbNotifyWhenEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavLinkCustomComponent, SetbNotifyWhenDisabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavLinkCustomComponent, SetbCreateBoxObstacle, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ABrush, SetbDisplayShadedVolume, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AVolume, GetBounds, (), ERASE_ARGUMENT_PACK(FBoxSphereBounds)) },
{ ERASE_METHOD_PTR(AVolume, EncompassesPoint, (const FVector&, float32 = 0.f), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AVolume, EncompassesPoint, (const FVector&, float32, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AVolume, SetBrushColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ARecastNavMesh, ReplaceAreaInTileBounds, (FBox, TSubclassOf<UNavArea>, TSubclassOf<UNavArea>, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawTriangleEdges, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawPolyEdges, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawFilledPolys, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawNavMeshEdges, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawTileBounds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawTileResolutions, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawPathCollidingGeometry, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawTileLabels, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawTileBuildTimes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawTileBuildTimesHeatMap, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawPolygonLabels, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawDefaultPolygonCost, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawPolygonFlags, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawLabelsOnPathNodes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawNavLinks, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawFailedNavLinks, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawClusters, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawOctree, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawOctreeDetails, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDrawMarkedForbiddenPolys, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbFixedTilePoolSize, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbSortNavigationAreasByCost, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbIsWorldPartitioned, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbPerformVoxelFiltering, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbMarkLowHeightAreas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbUseExtraTopCellWhenMarkingAreas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbFilterLowSpanSequences, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbFilterLowSpanFromTileCache, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ARecastNavMesh, SetbDoFullyAsyncNavDataGathering, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNavModifierComponent, SetAreaClass, (TSubclassOf<UNavArea>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNavModifierComponent, GetAreaClass, (), ERASE_ARGUMENT_PACK(const TSubclassOf<UNavArea>&)) },
{ ERASE_METHOD_PTR(UNavModifierComponent, SetbIncludeAgentHeight, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ANavModifierVolume, SetAreaClass, (TSubclassOf<UNavArea> = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANavModifierVolume, GetAreaClass, (), ERASE_ARGUMENT_PACK(const TSubclassOf<UNavArea>&)) },


{ ERASE_METHOD_PTR(ANavSystemConfigOverride, GetbLoadOnClient, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ANavSystemConfigOverride, SetbLoadOnClient, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ACameraRig_Rail, GetRailSplineComponent, (), ERASE_ARGUMENT_PACK(USplineComponent*)) },
{ ERASE_METHOD_PTR(ACameraRig_Rail, SetRailSplineComponent, (USplineComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ACameraActor, GetAutoActivatePlayerIndex, (), ERASE_ARGUMENT_PACK(int)) },


{ ERASE_METHOD_PTR(ACineCameraActor, GetCineCameraComponent, (), ERASE_ARGUMENT_PACK(UCineCameraComponent*)) },


{ ERASE_METHOD_PTR(UCameraComponent, GetCameraView, (float32, FMinimalViewInfo&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, OnCameraMeshHiddenChanged, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetAspectRatio, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetAspectRatioAxisConstraint, (EAspectRatioAxisConstraint), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetAutoCalculateOrthoPlanes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetAutoPlaneShift, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetConstraintAspectRatio, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetFieldOfView, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetOrthoFarClipPlane, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetOrthoNearClipPlane, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetOrthoWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetPostProcessBlendWeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetProjectionMode, (ECameraProjectionMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetUpdateOrthoPlanes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetUseCameraHeightAsViewTarget, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetUseFieldOfViewForLOD, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetFieldOfView, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetOrthoWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetAutoPlaneShift, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetOrthoNearClipPlane, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetOrthoFarClipPlane, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetAspectRatio, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetAspectRatioAxisConstraint, (), ERASE_ARGUMENT_PACK(const EAspectRatioAxisConstraint&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetbConstrainAspectRatio, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetbConstrainAspectRatio, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetbOverrideAspectRatioAxisConstraint, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetbOverrideAspectRatioAxisConstraint, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetbUseFieldOfViewForLOD, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetbUseFieldOfViewForLOD, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetbCameraMeshHiddenInGame, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetbCameraMeshHiddenInGame, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetbLockToHmd, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetbLockToHmd, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetbUsePawnControlRotation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraComponent, SetbUsePawnControlRotation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetProjectionMode, (), ERASE_ARGUMENT_PACK(const ECameraProjectionMode&)) },
{ ERASE_METHOD_PTR(UCameraComponent, GetPostProcessBlendWeight, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UCineCameraComponent, GetCropPresetName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetDefaultFilmbackPresetName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetFilmbackPresetName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetHorizontalFieldOfView, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetLensPresetName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetVerticalFieldOfView, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetCropPresetByName, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetCropSettings, (const FPlateCropSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetCurrentAperture, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetCurrentFocalLength, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetCustomNearClippingPlane, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetFilmback, (const FCameraFilmbackSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetFilmbackPresetByName, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetFocusSettings, (const FCameraFocusSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetLensPresetByName, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetLensSettings, (const FCameraLensSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetFilmback, (), ERASE_ARGUMENT_PACK(const FCameraFilmbackSettings&)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetLensSettings, (), ERASE_ARGUMENT_PACK(const FCameraLensSettings&)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetFocusSettings, (), ERASE_ARGUMENT_PACK(const FCameraFocusSettings&)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetCropSettings, (), ERASE_ARGUMENT_PACK(const FPlateCropSettings&)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetCurrentFocalLength, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetCurrentAperture, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetbOverride_CustomNearClippingPlane, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, SetbOverride_CustomNearClippingPlane, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraComponent, GetCustomNearClippingPlane, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UCineCameraSettings, GetCropPresetByName, (const FString, FPlateCropSettings&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetFilmbackPresetByName, (const FString, FCameraFilmbackSettings&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetLensPresetByName, (const FString, FCameraLensSettings&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetCropPresets, (const TArray<FNamedPlateCropPreset>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetDefaultCropPresetName, (const FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetDefaultFilmbackPreset, (const FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetDefaultLensFocalLength, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetDefaultLensFStop, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetDefaultLensPresetName, (const FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetFilmbackPresets, (const TArray<FNamedFilmbackPreset>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, SetLensPresets, (const TArray<FNamedLensPreset>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetDefaultLensPresetName, (), ERASE_ARGUMENT_PACK(const FString&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetDefaultLensFocalLength, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetDefaultLensFStop, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetLensPresets, (), ERASE_ARGUMENT_PACK(const TArray<FNamedLensPreset>&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetDefaultFilmbackPreset, (), ERASE_ARGUMENT_PACK(const FString&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetFilmbackPresets, (), ERASE_ARGUMENT_PACK(const TArray<FNamedFilmbackPreset>&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetDefaultCropPresetName, (), ERASE_ARGUMENT_PACK(const FString&)) },
{ ERASE_METHOD_PTR(UCineCameraSettings, GetCropPresets, (), ERASE_ARGUMENT_PACK(const TArray<FNamedPlateCropPreset>&)) },


{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddActorsToDataLayer, (const TArray<AActor*>&, UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddActorsToDataLayers, (const TArray<AActor*>&, const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddActorToDataLayer, (AActor, UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddActorToDataLayers, (AActor, const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddSelectedActorsToDataLayer, (UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddSelectedActorsToDataLayers, (const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AddToActorEditorContext, (UDataLayerInstance), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AppendActorsFromDataLayer, (UDataLayerInstance, TArray<AActor*>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, AppendActorsFromDataLayers, (const TArray<UDataLayerInstance>&, TArray<AActor*>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, CreateDataLayer, (UDataLayerInstance = nullptr), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, CreateDataLayerInstance, (const FDataLayerCreationParameters&), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, DeleteDataLayer, (UDataLayerInstance), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, DeleteDataLayers, (const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetActorEditorContextCurrentExternalDataLayer, (), ERASE_ARGUMENT_PACK(const UExternalDataLayerAsset*)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetActorsFromDataLayer, (UDataLayerInstance), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetActorsFromDataLayers, (const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetAllDataLayers, (), ERASE_ARGUMENT_PACK(TArray<UDataLayerInstance>)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetDataLayer, (const FActorDataLayer&), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetDataLayerFromLabel, (const FName&), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetDataLayerInstance, (const UDataLayerAsset), ERASE_ARGUMENT_PACK(UDataLayerInstance*)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, GetDataLayerInstances, (const TArray<UDataLayerAsset>), ERASE_ARGUMENT_PACK(TArray<UDataLayerInstance>)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, IsActorValidForDataLayer, (AActor), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, IsActorValidForDataLayerInstances, (AActor, const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, MakeAllDataLayersVisible, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveActorFromAllDataLayers, (AActor), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveActorFromDataLayer, (AActor, UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveActorFromDataLayers, (AActor, const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveActorsFromAllDataLayers, (const TArray<AActor*>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveActorsFromDataLayer, (const TArray<AActor*>&, UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveActorsFromDataLayers, (const TArray<AActor*>&, const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveFromActorEditorContext, (UDataLayerInstance), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveSelectedActorsFromDataLayer, (UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RemoveSelectedActorsFromDataLayers, (const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, RenameDataLayer, (UDataLayerInstance, const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SelectActorsInDataLayer, (UDataLayerInstance, const bool, const bool, const bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SelectActorsInDataLayers, (const TArray<UDataLayerInstance>&, const bool, const bool, const bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetActorEditorContextCurrentExternalDataLayer, (const UExternalDataLayerAsset), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetDataLayerIsDynamicallyLoadedInEditor, (UDEPRECATED_DataLayer, const bool, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetDataLayerIsLoadedInEditor, (UDataLayerInstance, const bool, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetDataLayersIsDynamicallyLoadedInEditor, (const TArray<UDEPRECATED_DataLayer>&, const bool, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetDataLayersIsLoadedInEditor, (const TArray<UDataLayerInstance>&, const bool, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetDataLayersVisibility, (const TArray<UDataLayerInstance>&, const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetDataLayerVisibility, (UDataLayerInstance, const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, SetParentDataLayer, (UDataLayerInstance, UDataLayerInstance), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, ToggleDataLayerIsDynamicallyLoadedInEditor, (UDEPRECATED_DataLayer, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, ToggleDataLayerIsLoadedInEditor, (UDataLayerInstance, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, ToggleDataLayersIsDynamicallyLoadedInEditor, (const TArray<UDEPRECATED_DataLayer>&, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, ToggleDataLayersIsLoadedInEditor, (const TArray<UDataLayerInstance>&, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, ToggleDataLayersVisibility, (const TArray<UDataLayerInstance>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, ToggleDataLayerVisibility, (UDataLayerInstance), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, UpdateActorAllViewsVisibility, (AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, UpdateActorVisibility, (AActor, bool&, bool&, const bool, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, UpdateAllActorsVisibility, (const bool, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDataLayerEditorSubsystem, UpdateAllViewVisibility, (UDEPRECATED_DataLayer), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USubobjectDataBlueprintFunctionLibrary, GetBlueprint, (const FSubobjectData&), ERASE_ARGUMENT_PACK(UBlueprint*)) },
{ ERASE_METHOD_PTR(USubobjectDataBlueprintFunctionLibrary, GetDisplayName, (const FSubobjectData&), ERASE_ARGUMENT_PACK(FText)) },


{ ERASE_METHOD_PTR(USubobjectDataSubsystem, AddNewSubobject, (const FAddNewSubobjectParams&, FText&), ERASE_ARGUMENT_PACK(FSubobjectDataHandle)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, AttachSubobject, (const FSubobjectDataHandle&, const FSubobjectDataHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, CanCopySubobjects, (const TArray<FSubobjectDataHandle>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, CanPasteSubobjects, (const FSubobjectDataHandle&, UBlueprint = nullptr), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, ChangeSubobjectClass, (const FSubobjectDataHandle&, const UClass), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, CopySubobjects, (const TArray<FSubobjectDataHandle>&, UBlueprint), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, DeleteSubobject, (const FSubobjectDataHandle&, const FSubobjectDataHandle&, UBlueprint = nullptr), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, DeleteSubobjects, (const FSubobjectDataHandle&, const TArray<FSubobjectDataHandle>&, UBlueprint = nullptr), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, DetachSubobject, (const FSubobjectDataHandle&, const FSubobjectDataHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, FindHandleForObject, (const FSubobjectDataHandle&, const UObject, UBlueprint = nullptr), ERASE_ARGUMENT_PACK(FSubobjectDataHandle)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, IsValidRename, (const FSubobjectDataHandle&, const FText&, FText&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, DeleteSubobjectFromInstance, (const FSubobjectDataHandle&, const FSubobjectDataHandle&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, DeleteSubobjectsFromInstance, (const FSubobjectDataHandle&, const TArray<FSubobjectDataHandle>&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, FindSubobjectDataFromHandle, (const FSubobjectDataHandle&, FSubobjectData&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, GatherSubobjectDataForBlueprint, (UBlueprint, TArray<FSubobjectDataHandle>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, GatherSubobjectDataForInstance, (AActor, TArray<FSubobjectDataHandle>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, MakeNewSceneRoot, (const FSubobjectDataHandle&, const FSubobjectDataHandle&, UBlueprint), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, RenameSubobject, (const FSubobjectDataHandle&, const FText&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, ReparentSubobject, (const FReparentSubobjectParams&, const FSubobjectDataHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USubobjectDataSubsystem, ReparentSubobjects, (const FReparentSubobjectParams&, const TArray<FSubobjectDataHandle>&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USubobjectEditorMenuContext, GetSelectedObjects, (), ERASE_ARGUMENT_PACK(TArray<UObject*>)) },


{ ERASE_METHOD_PTR(USlateFXSubsystem, GetSlatePostProcessor, (ESlatePostRT), ERASE_ARGUMENT_PACK(USlateRHIPostBufferProcessor*)) },


{ ERASE_METHOD_PTR(USlateRHIRendererSettings, GetMutableSlatePostSetting, (ESlatePostRT), ERASE_ARGUMENT_PACK(FSlatePostSettings&)) },
{ ERASE_METHOD_PTR(USlateRHIRendererSettings, GetSlatePostSetting, (ESlatePostRT), ERASE_ARGUMENT_PACK(const FSlatePostSettings&)) },


{ ERASE_METHOD_PTR(UListViewBase, GetDisplayedEntryWidgets, (), ERASE_ARGUMENT_PACK(const TArray<UUserWidget>&)) },
{ ERASE_METHOD_PTR(UListViewBase, GetScrollOffset, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UListViewBase, RegenerateAllEntries, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, RequestRefresh, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, ScrollToBottom, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, ScrollToTop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, SetIsPointerScrollingEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, SetScrollbarVisibility, (ESlateVisibility), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, SetScrollOffset, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, SetWheelScrollMultiplier, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListViewBase, GetWheelScrollMultiplier, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UListView, AddItem, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, CancelScrollIntoView, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, ClearSelection, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, GetNumItemsSelected, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UListView, GetSelectedItem, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UListView, GetSelectedItems, (TArray<UObject*>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UListView, IsItemVisible, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UListView, NavigateToItem, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, ScrollItemIntoView, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, SetItemSelection, (UObject, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, SetListItems, (const TArray<UObject*>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, SetSelectedItem, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, ClearListItems, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, GetHorizontalEntrySpacing, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UListView, GetIndexForItem, (const UObject), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UListView, GetItemAt, (int), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UListView, GetListItems, (), ERASE_ARGUMENT_PACK(const TArray<UObject*>&)) },
{ ERASE_METHOD_PTR(UListView, GetNumItems, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UListView, GetVerticalEntrySpacing, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UListView, IsRefreshPending, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UListView, NavigateToIndex, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, RemoveItem, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, ScrollIndexIntoView, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, SetSelectedIndex, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, SetSelectionMode, (ESelectionMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, GetEntrySpacing, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UListView, GetSelectionMode, (), ERASE_ARGUMENT_PACK(const ESelectionMode&)) },
{ ERASE_METHOD_PTR(UListView, SetHorizontalEntrySpacing, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UListView, SetVerticalEntrySpacing, (const float32&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UBlueprintCore, GetGeneratedClass, (), ERASE_ARGUMENT_PACK(UClass*)) },


{ ERASE_METHOD_PTR(UBlueprint, SetbRunConstructionScriptOnDrag, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBlueprint, SetbRunConstructionScriptInSequencer, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBlueprint, SetbGenerateConstClass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBlueprint, SetbGenerateAbstractClass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBlueprint, SetbDeprecate, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneSection, GetBlendType, (), ERASE_ARGUMENT_PACK(FOptionalMovieSceneBlendType)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, GetColorTint, (), ERASE_ARGUMENT_PACK(FColor)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, GetCompletionMode, (), ERASE_ARGUMENT_PACK(EMovieSceneCompletionMode)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, GetOverlapPriority, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, GetPostRollFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, GetPreRollFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, GetRowIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, IsActive, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, IsLocked, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetBlendType, (EMovieSceneBlendType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetColorTint, (const FColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetCompletionMode, (EMovieSceneCompletionMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetIsActive, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetIsLocked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetOverlapPriority, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetPostRollFrames, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetPreRollFrames, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetRowIndex, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetbIsActive, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSection, SetbIsLocked, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UUMGSequencePlayer, GetUserTag, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UUMGSequencePlayer, SetUserTag, (FName), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneSequence, FindBindingByTag, (FName), ERASE_ARGUMENT_PACK(FMovieSceneObjectBindingID)) },
{ ERASE_METHOD_PTR(UMovieSceneSequence, FindBindingsByTag, (FName), ERASE_ARGUMENT_PACK(const TArray<FMovieSceneObjectBindingID>&)) },
{ ERASE_METHOD_PTR(UMovieSceneSequence, GetEarliestTimecodeSource, (), ERASE_ARGUMENT_PACK(FMovieSceneTimecodeSource)) },


{ ERASE_METHOD_PTR(UWidgetAnimation, GetEndTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UWidgetAnimation, GetStartTime, (), ERASE_ARGUMENT_PACK(float)) },


{ ERASE_METHOD_PTR(UGameViewportSubsystem, AddWidget, (UWidget, FGameViewportWidgetSlot), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameViewportSubsystem, AddWidgetForPlayer, (UWidget, ULocalPlayer, FGameViewportWidgetSlot), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameViewportSubsystem, GetWidgetSlot, (const UWidget), ERASE_ARGUMENT_PACK(FGameViewportWidgetSlot)) },
{ ERASE_METHOD_PTR(UGameViewportSubsystem, IsWidgetAdded, (const UWidget), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameViewportSubsystem, RemoveWidget, (UWidget), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameViewportSubsystem, SetWidgetSlot, (UWidget, FGameViewportWidgetSlot), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UUserListEntry, OnEntryReleased, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUserListEntry, OnItemExpansionChanged, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUserListEntry, OnItemSelectionChanged, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UUserObjectListEntry, OnListItemObjectSet, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPanelWidget, AddChild, (UWidget), ERASE_ARGUMENT_PACK(UPanelSlot*)) },
{ ERASE_METHOD_PTR(UPanelWidget, ClearChildren, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPanelWidget, GetAllChildren, (), ERASE_ARGUMENT_PACK(TArray<UWidget>)) },
{ ERASE_METHOD_PTR(UPanelWidget, GetChildAt, (int), ERASE_ARGUMENT_PACK(UWidget*)) },
{ ERASE_METHOD_PTR(UPanelWidget, GetChildIndex, (const UWidget), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPanelWidget, GetChildrenCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPanelWidget, HasAnyChildren, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPanelWidget, HasChild, (UWidget), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPanelWidget, RemoveChild, (UWidget), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPanelWidget, RemoveChildAt, (int), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UContentWidget, GetContent, (), ERASE_ARGUMENT_PACK(UWidget*)) },
{ ERASE_METHOD_PTR(UContentWidget, GetContentSlot, (), ERASE_ARGUMENT_PACK(UPanelSlot*)) },
{ ERASE_METHOD_PTR(UContentWidget, SetContent, (UWidget), ERASE_ARGUMENT_PACK(UPanelSlot*)) },


{ ERASE_METHOD_PTR(UBackgroundBlur, SetApplyAlphaToBlur, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetBlurRadius, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetBlurStrength, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetCornerRadius, (FVector4), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetLowQualityFallbackBrush, (const FSlateBrush&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, SetbApplyAlphaToBlur, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetbApplyAlphaToBlur, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetBlurStrength, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetBlurRadius, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetCornerRadius, (), ERASE_ARGUMENT_PACK(const FVector4&)) },
{ ERASE_METHOD_PTR(UBackgroundBlur, GetLowQualityFallbackBrush, (), ERASE_ARGUMENT_PACK(const FSlateBrush&)) },


{ ERASE_METHOD_PTR(UBackgroundBlurSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlurSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlurSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBackgroundBlurSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UBackgroundBlurSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UBackgroundBlurSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UBorder, GetDynamicMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(UBorder, SetBrush, (const FSlateBrush&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetBrushColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetBrushFromAsset, (USlateBrushAsset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetBrushFromMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetBrushFromTexture, (UTexture2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetContentColorAndOpacity, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetDesiredSizeScale, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetShowEffectWhenDisabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, SetbShowEffectWhenDisabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorder, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UBorder, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },
{ ERASE_METHOD_PTR(UBorder, GetbShowEffectWhenDisabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBorder, GetContentColorAndOpacity, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UBorder, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UBorder, GetBrushColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UBorder, GetDesiredSizeScale, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },


{ ERASE_METHOD_PTR(UBorderSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorderSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorderSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBorderSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UBorderSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UBorderSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UButton, IsPressed, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UButton, SetBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, SetClickMethod, (EButtonClickMethod), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, SetColorAndOpacity, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, SetPressMethod, (EButtonPressMethod), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, SetStyle, (const FButtonStyle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, SetTouchMethod, (EButtonTouchMethod), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, SetWidgetStyle, (const FButtonStyle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButton, GetWidgetStyle, (), ERASE_ARGUMENT_PACK(const FButtonStyle&)) },
{ ERASE_METHOD_PTR(UButton, GetColorAndOpacity, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UButton, GetBackgroundColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UButton, GetClickMethod, (), ERASE_ARGUMENT_PACK(const EButtonClickMethod&)) },
{ ERASE_METHOD_PTR(UButton, GetTouchMethod, (), ERASE_ARGUMENT_PACK(const EButtonTouchMethod&)) },
{ ERASE_METHOD_PTR(UButton, GetPressMethod, (), ERASE_ARGUMENT_PACK(const EButtonPressMethod&)) },


{ ERASE_METHOD_PTR(UButtonSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButtonSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButtonSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UButtonSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UButtonSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UButtonSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UCanvasPanel, AddChildToCanvas, (UWidget), ERASE_ARGUMENT_PACK(UCanvasPanelSlot*)) },


{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetAlignment, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetAnchors, (), ERASE_ARGUMENT_PACK(FAnchors)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetAutoSize, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetLayout, (), ERASE_ARGUMENT_PACK(FAnchorData)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetOffsets, (), ERASE_ARGUMENT_PACK(FMargin)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetPosition, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetSize, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetZOrder, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetAlignment, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetAnchors, (FAnchors), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetAutoSize, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetLayout, (const FAnchorData&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetOffsets, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetPosition, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetSize, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetZOrder, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetLayoutData, (), ERASE_ARGUMENT_PACK(FAnchorData)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetLayoutData, (const FAnchorData&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, GetbAutoSize, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCanvasPanelSlot, SetbAutoSize, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCheckBox, GetCheckedState, (), ERASE_ARGUMENT_PACK(ECheckBoxState)) },
{ ERASE_METHOD_PTR(UCheckBox, IsChecked, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCheckBox, IsPressed, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCheckBox, SetCheckedState, (ECheckBoxState), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCheckBox, SetClickMethod, (EButtonClickMethod), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCheckBox, SetIsChecked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCheckBox, SetPressMethod, (EButtonPressMethod), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCheckBox, SetTouchMethod, (EButtonTouchMethod), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCheckBox, GetClickMethod, (), ERASE_ARGUMENT_PACK(const EButtonClickMethod&)) },
{ ERASE_METHOD_PTR(UCheckBox, GetTouchMethod, (), ERASE_ARGUMENT_PACK(const EButtonTouchMethod&)) },
{ ERASE_METHOD_PTR(UCheckBox, GetPressMethod, (), ERASE_ARGUMENT_PACK(const EButtonPressMethod&)) },


{ ERASE_METHOD_PTR(UCircularThrobber, SetNumberOfPieces, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCircularThrobber, SetPeriod, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCircularThrobber, SetRadius, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCircularThrobber, GetNumberOfPieces, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UCircularThrobber, GetPeriod, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UCircularThrobber, GetRadius, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UComboBoxKey, AddOption, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxKey, ClearOptions, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxKey, ClearSelection, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxKey, GetSelectedOption, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UComboBoxKey, IsOpen, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UComboBoxKey, RemoveOption, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UComboBoxKey, SetSelectedOption, (FName), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UComboBoxString, AddOption, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxString, ClearOptions, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxString, ClearSelection, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxString, FindOptionIndex, (const FString&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UComboBoxString, GetOptionAtIndex, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UComboBoxString, GetOptionCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UComboBoxString, GetSelectedIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UComboBoxString, GetSelectedOption, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UComboBoxString, IsOpen, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UComboBoxString, RefreshOptions, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxString, RemoveOption, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UComboBoxString, SetSelectedIndex, (const int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UComboBoxString, SetSelectedOption, (FString), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, GetAllEntries, (), ERASE_ARGUMENT_PACK(const TArray<UUserWidget>&)) },
{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, GetNumEntries, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, SetEntrySpacing, (const FVector2D&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, SetRadialSettings, (const FRadialBoxSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, SetRadialBoxSettings, (const FRadialBoxSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, GetEntrySpacing, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },
{ ERASE_METHOD_PTR(UDynamicEntryBoxBase, GetRadialBoxSettings, (), ERASE_ARGUMENT_PACK(const FRadialBoxSettings&)) },


{ ERASE_METHOD_PTR(UDynamicEntryBox, CreateEntry, (), ERASE_ARGUMENT_PACK(UUserWidget*)) },
{ ERASE_METHOD_PTR(UDynamicEntryBox, CreateEntryOfClass, (TSubclassOf<UUserWidget>), ERASE_ARGUMENT_PACK(UUserWidget*)) },
{ ERASE_METHOD_PTR(UDynamicEntryBox, RemoveEntry, (UUserWidget), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicEntryBox, Reset, (bool = false), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEditableText, GetFont, (), ERASE_ARGUMENT_PACK(const FSlateFontInfo&)) },
{ ERASE_METHOD_PTR(UEditableText, GetHintText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UEditableText, GetJustification, (), ERASE_ARGUMENT_PACK(ETextJustify)) },
{ ERASE_METHOD_PTR(UEditableText, GetText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UEditableText, SetFont, (FSlateFontInfo), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetFontMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetFontOutlineMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetHintText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetIsPassword, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetIsReadOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetJustification, (ETextJustify), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetMinimumDesiredWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetTextOverflowPolicy, (ETextOverflowPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, SetOverflowPolicy, (ETextOverflowPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableText, GetIsReadOnly, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UEditableText, GetIsPassword, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UEditableText, GetMinimumDesiredWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UEditableText, GetOverflowPolicy, (), ERASE_ARGUMENT_PACK(const ETextOverflowPolicy&)) },


{ ERASE_METHOD_PTR(UEditableTextBox, ClearError, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, GetText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UEditableTextBox, HasError, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetError, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetForegroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetHintText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetIsPassword, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetIsReadOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetJustification, (ETextJustify), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetTextOverflowPolicy, (ETextOverflowPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, SetOverflowPolicy, (ETextOverflowPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditableTextBox, GetHintText, (), ERASE_ARGUMENT_PACK(const FText&)) },
{ ERASE_METHOD_PTR(UEditableTextBox, GetIsReadOnly, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UEditableTextBox, GetIsPassword, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UEditableTextBox, GetJustification, (), ERASE_ARGUMENT_PACK(const ETextJustify&)) },
{ ERASE_METHOD_PTR(UEditableTextBox, GetOverflowPolicy, (), ERASE_ARGUMENT_PACK(const ETextOverflowPolicy&)) },


{ ERASE_METHOD_PTR(UExpandableArea, GetIsExpanded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UExpandableArea, SetIsExpanded, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UExpandableArea, SetIsExpanded_Animated, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UExpandableArea, GetbIsExpanded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UExpandableArea, SetbIsExpanded, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGridPanel, AddChildToGrid, (UWidget, int = 0, int = 0), ERASE_ARGUMENT_PACK(UGridSlot*)) },
{ ERASE_METHOD_PTR(UGridPanel, SetColumnFill, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridPanel, SetRowFill, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridPanel, GetColumnFill, (), ERASE_ARGUMENT_PACK(const TArray<float>&)) },
{ ERASE_METHOD_PTR(UGridPanel, GetRowFill, (), ERASE_ARGUMENT_PACK(const TArray<float>&)) },


{ ERASE_METHOD_PTR(UGridSlot, SetColumn, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetColumnSpan, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetLayer, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetNudge, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetRow, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetRowSpan, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGridSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetRow, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetRowSpan, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetColumn, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetColumnSpan, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetLayer, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UGridSlot, GetNudge, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },


{ ERASE_METHOD_PTR(UHorizontalBox, AddChildToHorizontalBox, (UWidget), ERASE_ARGUMENT_PACK(UHorizontalBoxSlot*)) },


{ ERASE_METHOD_PTR(UHorizontalBoxSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, SetSize, (FSlateChildSize), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, GetSize, (), ERASE_ARGUMENT_PACK(const FSlateChildSize&)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UHorizontalBoxSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UImage, GetDynamicMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(UImage, SetBrush, (const FSlateBrush&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushFromAsset, (USlateBrushAsset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushFromMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushFromSoftMaterial, (TSoftObjectPtr<UMaterialInterface>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushFromSoftTexture, (TSoftObjectPtr<UTexture2D>, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushFromTexture, (UTexture2D, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushFromTextureDynamic, (UTexture2DDynamic, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushResourceObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetBrushTintColor, (FSlateColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetColorAndOpacity, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetDesiredSizeOverride, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, SetOpacity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImage, GetBrush, (), ERASE_ARGUMENT_PACK(const FSlateBrush&)) },
{ ERASE_METHOD_PTR(UImage, GetColorAndOpacity, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(UInputKeySelector, GetIsSelectingKey, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetAllowGamepadKeys, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetAllowModifierKeys, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetEscapeKeys, (const TArray<FKey>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetKeySelectionText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetNoKeySpecifiedText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetSelectedKey, (const FInputChord&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetTextBlockVisibility, (const ESlateVisibility), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetbAllowModifierKeys, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, SetbAllowGamepadKeys, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInputKeySelector, GetSelectedKey, (), ERASE_ARGUMENT_PACK(const FInputChord&)) },
{ ERASE_METHOD_PTR(UInputKeySelector, GetKeySelectionText, (), ERASE_ARGUMENT_PACK(const FText&)) },
{ ERASE_METHOD_PTR(UInputKeySelector, GetNoKeySpecifiedText, (), ERASE_ARGUMENT_PACK(const FText&)) },
{ ERASE_METHOD_PTR(UInputKeySelector, GetbAllowModifierKeys, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UInputKeySelector, GetbAllowGamepadKeys, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UInputKeySelector, GetEscapeKeys, (), ERASE_ARGUMENT_PACK(const TArray<FKey>&)) },


{ ERASE_METHOD_PTR(UInvalidationBox, GetCanCache, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInvalidationBox, InvalidateCache, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInvalidationBox, SetCanCache, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInvalidationBox, GetbCanCache, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInvalidationBox, SetbCanCache, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMenuAnchor, Close, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMenuAnchor, FitInWindow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMenuAnchor, GetMenuPosition, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UMenuAnchor, HasOpenSubMenus, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMenuAnchor, IsOpen, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMenuAnchor, Open, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMenuAnchor, SetPlacement, (EMenuPlacement), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMenuAnchor, ShouldOpenDueToClick, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMenuAnchor, ToggleOpen, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMenuAnchor, SetbFitInWindow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMenuAnchor, GetPlacement, (), ERASE_ARGUMENT_PACK(const EMenuPlacement&)) },


{ ERASE_METHOD_PTR(UTextLayoutWidget, SetJustification, (ETextJustify), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextLayoutWidget, GetJustification, (), ERASE_ARGUMENT_PACK(const ETextJustify&)) },
{ ERASE_METHOD_PTR(UTextLayoutWidget, GetAutoWrapText, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTextLayoutWidget, SetAutoWrapText, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMultiLineEditableText, GetFont, (), ERASE_ARGUMENT_PACK(const FSlateFontInfo&)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, GetHintText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, GetText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetFont, (FSlateFontInfo), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetFontMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetFontOutlineMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetHintText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetIsReadOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetWidgetStyle, (const FTextBlockStyle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, SetbIsReadOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, GetWidgetStyle, (), ERASE_ARGUMENT_PACK(const FTextBlockStyle&)) },
{ ERASE_METHOD_PTR(UMultiLineEditableText, GetbIsReadOnly, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, GetHintText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, GetText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, SetError, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, SetForegroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, SetHintText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, SetIsReadOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, SetText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMultiLineEditableTextBox, SetTextStyle, (const FTextBlockStyle&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UOverlay, AddChildToOverlay, (UWidget), ERASE_ARGUMENT_PACK(UOverlaySlot*)) },
{ ERASE_METHOD_PTR(UOverlay, ReplaceOverlayChildAt, (int, UWidget), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UOverlaySlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UOverlaySlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UOverlaySlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UOverlaySlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UOverlaySlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UOverlaySlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UProgressBar, SetFillColorAndOpacity, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProgressBar, SetIsMarquee, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProgressBar, SetPercent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProgressBar, SetbIsMarquee, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProgressBar, GetPercent, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UProgressBar, GetbIsMarquee, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UProgressBar, GetFillColorAndOpacity, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(URetainerBox, GetEffectMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(URetainerBox, RequestRender, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URetainerBox, SetEffectMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URetainerBox, SetRenderingPhase, (int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URetainerBox, SetRetainRendering, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URetainerBox, SetTextureParameter, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URetainerBox, SetbRetainRender, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URetainerBox, GetbRetainRender, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(URetainerBox, GetTextureParameter, (), ERASE_ARGUMENT_PACK(const FName&)) },


{ ERASE_METHOD_PTR(URichTextBlock, ClearAllDefaultStyleOverrides, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetDecoratorByClass, (TSubclassOf<URichTextBlockDecorator>), ERASE_ARGUMENT_PACK(URichTextBlockDecorator*)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetDefaultDynamicMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetTextStyleSet, (), ERASE_ARGUMENT_PACK(UDataTable*)) },
{ ERASE_METHOD_PTR(URichTextBlock, RefreshTextLayout, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetAutoWrapText, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDecorators, (const TArray<TSubclassOf<URichTextBlockDecorator>>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultColorAndOpacity, (FSlateColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultFont, (FSlateFontInfo), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultShadowColorAndOpacity, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultShadowOffset, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultStrikeBrush, (const FSlateBrush&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultTextStyle, (const FTextBlockStyle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetMinDesiredWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetText, (const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetTextOverflowPolicy, (ETextOverflowPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetTextStyleSet, (UDataTable), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetTextTransformPolicy, (ETextTransformPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, SetDefaultTextStyleOverride, (const FTextBlockStyle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetDefaultTextStyleOverride, (), ERASE_ARGUMENT_PACK(const FTextBlockStyle&)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetMinDesiredWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetTextTransformPolicy, (), ERASE_ARGUMENT_PACK(const ETextTransformPolicy&)) },
{ ERASE_METHOD_PTR(URichTextBlock, GetTextOverflowPolicy, (), ERASE_ARGUMENT_PACK(const ETextOverflowPolicy&)) },


{ ERASE_METHOD_PTR(USafeZone, SetSidesToPad, (bool, bool, bool, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UScaleBox, SetIgnoreInheritedScale, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBox, SetStretch, (EStretch), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBox, SetStretchDirection, (EStretchDirection), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBox, SetUserSpecifiedScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBox, GetStretch, (), ERASE_ARGUMENT_PACK(const EStretch&)) },
{ ERASE_METHOD_PTR(UScaleBox, GetStretchDirection, (), ERASE_ARGUMENT_PACK(const EStretchDirection&)) },
{ ERASE_METHOD_PTR(UScaleBox, GetUserSpecifiedScale, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UScaleBox, GetIgnoreInheritedScale, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UScaleBoxSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBoxSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBoxSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScaleBoxSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UScaleBoxSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UScrollBar, SetState, (float32, float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UScrollBox, EndInertialScrolling, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, GetScrollOffset, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UScrollBox, GetScrollOffsetOfEnd, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UScrollBox, GetViewFraction, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UScrollBox, GetViewOffsetFraction, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UScrollBox, ScrollToEnd, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, ScrollToStart, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, ScrollWidgetIntoView, (UWidget, bool = true, EDescendantScrollDestination = EDescendantScrollDestination :: IntoView, float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetAllowOverscroll, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetAlwaysShowScrollbar, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetAnimateWheelScrolling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetConsumeMouseWheel, (EConsumeMouseWheel), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetNavigationDestination, (const EDescendantScrollDestination), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetOrientation, (EOrientation), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetScrollbarPadding, (const FMargin&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetScrollbarThickness, (const FVector2D&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetScrollBarVisibility, (ESlateVisibility), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetScrollOffset, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetScrollWhenFocusChanges, (EScrollWhenFocusChanges), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetWheelScrollMultiplier, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, SetbAnimateWheelScrolling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBox, GetOrientation, (), ERASE_ARGUMENT_PACK(const EOrientation&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetScrollBarVisibility, (), ERASE_ARGUMENT_PACK(const ESlateVisibility&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetConsumeMouseWheel, (), ERASE_ARGUMENT_PACK(const EConsumeMouseWheel&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetScrollbarThickness, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetScrollbarPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetAlwaysShowScrollbar, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetAllowOverscroll, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetbAnimateWheelScrolling, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetNavigationDestination, (), ERASE_ARGUMENT_PACK(const EDescendantScrollDestination&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetScrollWhenFocusChanges, (), ERASE_ARGUMENT_PACK(const EScrollWhenFocusChanges&)) },
{ ERASE_METHOD_PTR(UScrollBox, GetWheelScrollMultiplier, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UScrollBoxSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBoxSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBoxSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScrollBoxSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UScrollBoxSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UScrollBoxSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(USizeBox, ClearHeightOverride, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearMaxAspectRatio, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearMaxDesiredHeight, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearMaxDesiredWidth, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearMinAspectRatio, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearMinDesiredHeight, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearMinDesiredWidth, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, ClearWidthOverride, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetHeightOverride, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetMaxAspectRatio, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetMaxDesiredHeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetMaxDesiredWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetMinAspectRatio, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetMinDesiredHeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetMinDesiredWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetWidthOverride, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, GetWidthOverride, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetHeightOverride, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetMinDesiredWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetMinDesiredHeight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetMaxDesiredWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetMaxDesiredHeight, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetMinAspectRatio, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, GetMaxAspectRatio, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_WidthOverride, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_HeightOverride, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_MinDesiredWidth, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_MinDesiredHeight, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_MaxDesiredWidth, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_MaxDesiredHeight, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_MinAspectRatio, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBox, SetbOverride_MaxAspectRatio, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USizeBoxSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBoxSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBoxSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USizeBoxSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(USizeBoxSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(USizeBoxSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(USlider, GetNormalizedValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USlider, GetValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USlider, SetIndentHandle, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetLocked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetMaxValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetMinValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetSliderBarColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetSliderHandleColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetStepSize, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, SetValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USlider, GetMinValue, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USlider, GetMaxValue, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USlider, GetSliderBarColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(USlider, GetSliderHandleColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(USlider, GetIndentHandle, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(USlider, GetLocked, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(USlider, GetStepSize, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(USpacer, SetSize, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpacer, GetSize, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },


{ ERASE_METHOD_PTR(USpinBox, ClearMaxSliderValue, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, ClearMaxValue, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, ClearMinSliderValue, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, ClearMinValue, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, GetAlwaysUsesDeltaSnap, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpinBox, GetDelta, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USpinBox, GetMaxFractionalDigits, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USpinBox, GetMaxSliderValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USpinBox, GetMaxValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USpinBox, GetMinFractionalDigits, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USpinBox, GetMinSliderValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USpinBox, GetMinValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USpinBox, GetValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USpinBox, SetAlwaysUsesDeltaSnap, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetDelta, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetForegroundColor, (FSlateColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetMaxFractionalDigits, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetMaxSliderValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetMaxValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetMinFractionalDigits, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetMinSliderValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetMinValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, GetbAlwaysUsesDeltaSnap, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USpinBox, SetbAlwaysUsesDeltaSnap, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, GetForegroundColor, (), ERASE_ARGUMENT_PACK(const FSlateColor&)) },
{ ERASE_METHOD_PTR(USpinBox, SetbOverride_MinValue, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetbOverride_MaxValue, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetbOverride_MinSliderValue, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpinBox, SetbOverride_MaxSliderValue, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UStackBox, AddChildToStackBox, (UWidget), ERASE_ARGUMENT_PACK(UStackBoxSlot*)) },
{ ERASE_METHOD_PTR(UStackBox, ReplaceStackBoxChildAt, (int, UWidget), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UTextBlock, GetDynamicFontMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(UTextBlock, GetDynamicOutlineMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInstanceDynamic*)) },
{ ERASE_METHOD_PTR(UTextBlock, GetText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UTextBlock, SetAutoWrapText, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetColorAndOpacity, (FSlateColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetFont, (FSlateFontInfo), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetFontMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetFontOutlineMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetMinDesiredWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetOpacity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetShadowColorAndOpacity, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetShadowOffset, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetStrikeBrush, (FSlateBrush), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetText, (FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetTextOverflowPolicy, (ETextOverflowPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, SetTextTransformPolicy, (ETextTransformPolicy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTextBlock, GetColorAndOpacity, (), ERASE_ARGUMENT_PACK(const FSlateColor&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetFont, (), ERASE_ARGUMENT_PACK(const FSlateFontInfo&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetStrikeBrush, (), ERASE_ARGUMENT_PACK(const FSlateBrush&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetShadowOffset, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetShadowColorAndOpacity, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetMinDesiredWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetTextTransformPolicy, (), ERASE_ARGUMENT_PACK(const ETextTransformPolicy&)) },
{ ERASE_METHOD_PTR(UTextBlock, GetTextOverflowPolicy, (), ERASE_ARGUMENT_PACK(const ETextOverflowPolicy&)) },


{ ERASE_METHOD_PTR(UThrobber, SetAnimateHorizontally, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, SetAnimateOpacity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, SetAnimateVertically, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, SetNumberOfPieces, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, SetbAnimateHorizontally, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, SetbAnimateVertically, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, SetbAnimateOpacity, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UThrobber, GetNumberOfPieces, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UThrobber, GetbAnimateHorizontally, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UThrobber, GetbAnimateVertically, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UThrobber, GetbAnimateOpacity, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UTileView, GetEntryHeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UTileView, GetEntryWidth, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UTileView, SetEntryHeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTileView, SetEntryWidth, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTreeView, CollapseAll, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTreeView, ExpandAll, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTreeView, SetItemExpansion, (UObject, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UUniformGridPanel, AddChildToUniformGrid, (UWidget, int = 0, int = 0), ERASE_ARGUMENT_PACK(UUniformGridSlot*)) },
{ ERASE_METHOD_PTR(UUniformGridPanel, SetMinDesiredSlotHeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridPanel, SetMinDesiredSlotWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridPanel, SetSlotPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridPanel, GetSlotPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UUniformGridPanel, GetMinDesiredSlotWidth, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UUniformGridPanel, GetMinDesiredSlotHeight, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(UUniformGridSlot, SetColumn, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, SetRow, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, GetRow, (), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(UUniformGridSlot, GetColumn, (), ERASE_ARGUMENT_PACK(const int&)) },


{ ERASE_METHOD_PTR(UVerticalBox, AddChildToVerticalBox, (UWidget), ERASE_ARGUMENT_PACK(UVerticalBoxSlot*)) },


{ ERASE_METHOD_PTR(UVerticalBoxSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, SetSize, (FSlateChildSize), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, GetSize, (), ERASE_ARGUMENT_PACK(const FSlateChildSize&)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UVerticalBoxSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UViewport, GetViewLocation, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UViewport, GetViewportWorld, (), ERASE_ARGUMENT_PACK(UWorld*)) },
{ ERASE_METHOD_PTR(UViewport, GetViewRotation, (), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(UViewport, SetEnableAdvancedFeatures, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewport, SetLightIntensity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewport, SetShowFlag, (FString, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewport, SetSkyIntensity, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewport, SetViewLocation, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewport, SetViewRotation, (FRotator), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UViewport, Spawn, (TSubclassOf<AActor>), ERASE_ARGUMENT_PACK(AActor*)) },


{ ERASE_METHOD_PTR(UWidgetInteractionComponent, Get2DHitLocation, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, GetHoveredWidgetComponent, (), ERASE_ARGUMENT_PACK(UWidgetComponent*)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, GetLastHitResult, (), ERASE_ARGUMENT_PACK(const FHitResult&)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, IsOverFocusableWidget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, IsOverHitTestVisibleWidget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, IsOverInteractableWidget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, PressAndReleaseKey, (FKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, PressKey, (FKey, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, PressPointerKey, (FKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, ReleaseKey, (FKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, ReleasePointerKey, (FKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, ScrollWheel, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, SendKeyChar, (FString, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, SetCustomHitResult, (const FHitResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetInteractionComponent, SetFocus, (UWidget), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UWidgetSwitcher, GetActiveWidget, (), ERASE_ARGUMENT_PACK(UWidget*)) },
{ ERASE_METHOD_PTR(UWidgetSwitcher, GetActiveWidgetIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UWidgetSwitcher, GetNumWidgets, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UWidgetSwitcher, GetWidgetAtIndex, (int), ERASE_ARGUMENT_PACK(UWidget*)) },
{ ERASE_METHOD_PTR(UWidgetSwitcher, SetActiveWidget, (UWidget), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetSwitcher, SetActiveWidgetIndex, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UWidgetSwitcherSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetSwitcherSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetSwitcherSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWidgetSwitcherSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UWidgetSwitcherSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UWidgetSwitcherSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UWindowTitleBarArea, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWindowTitleBarArea, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWindowTitleBarArea, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UWindowTitleBarAreaSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWindowTitleBarAreaSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWindowTitleBarAreaSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWindowTitleBarAreaSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UWindowTitleBarAreaSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UWindowTitleBarAreaSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },


{ ERASE_METHOD_PTR(UWrapBox, AddChildToWrapBox, (UWidget), ERASE_ARGUMENT_PACK(UWrapBoxSlot*)) },
{ ERASE_METHOD_PTR(UWrapBox, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBox, SetInnerSlotPadding, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBox, GetInnerSlotPadding, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },
{ ERASE_METHOD_PTR(UWrapBox, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },


{ ERASE_METHOD_PTR(UWrapBoxSlot, SetFillEmptySpace, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetFillSpanWhenLessThan, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetHorizontalAlignment, (EHorizontalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetNewLine, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetPadding, (FMargin), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetVerticalAlignment, (EVerticalAlignment), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetbFillEmptySpace, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, SetbForceNewLine, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, GetPadding, (), ERASE_ARGUMENT_PACK(const FMargin&)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, GetFillSpanWhenLessThan, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, GetHorizontalAlignment, (), ERASE_ARGUMENT_PACK(const EHorizontalAlignment&)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, GetVerticalAlignment, (), ERASE_ARGUMENT_PACK(const EVerticalAlignment&)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, GetbFillEmptySpace, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(UWrapBoxSlot, GetbForceNewLine, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UDragDropOperation, DragCancelled, (const FPointerEvent&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDragDropOperation, Dragged, (const FPointerEvent&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDragDropOperation, Drop, (const FPointerEvent&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, ActivateAllDataSources, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, ActivateDataSource, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, DeactivateAllDataSources, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, DeactivateDataSource, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, GetActiveDataSources, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, GetAvailableDataSources, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, GetItemAtPath, (const FName, const EContentBrowserItemTypeFilter), ERASE_ARGUMENT_PACK(FContentBrowserItem)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, GetItemsAtPath, (const FName, const EContentBrowserItemTypeFilter), ERASE_ARGUMENT_PACK(TArray<FContentBrowserItem>)) },
{ ERASE_METHOD_PTR(UContentBrowserDataSubsystem, GetItemsUnderPath, (const FName, const FContentBrowserDataFilter&), ERASE_ARGUMENT_PACK(TArray<FContentBrowserItem>)) },


{ ERASE_METHOD_PTR(UInterchangeFilePickerBase, ScriptedFilePickerForTranslatorAssetType, (const EInterchangeTranslatorAssetType, FInterchangeFilePickerParameters&, TArray<FString>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeFilePickerBase, ScriptedFilePickerForTranslatorType, (const EInterchangeTranslatorType, FInterchangeFilePickerParameters&, TArray<FString>&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePipelineConfigurationBase, ScriptedShowPipelineConfigurationDialog, (TArray<FInterchangeStackInfo>&, TArray<UInterchangePipelineBase>&, UInterchangeSourceData, UInterchangeTranslatorBase, UInterchangeBaseNodeContainer), ERASE_ARGUMENT_PACK(EInterchangePipelineConfigurationDialogResult)) },
{ ERASE_METHOD_PTR(UInterchangePipelineConfigurationBase, ScriptedShowReimportPipelineConfigurationDialog, (TArray<FInterchangeStackInfo>&, TArray<UInterchangePipelineBase>&, UInterchangeSourceData, UInterchangeTranslatorBase, UInterchangeBaseNodeContainer, UObject), ERASE_ARGUMENT_PACK(EInterchangePipelineConfigurationDialogResult)) },
{ ERASE_METHOD_PTR(UInterchangePipelineConfigurationBase, ScriptedShowScenePipelineConfigurationDialog, (TArray<FInterchangeStackInfo>&, TArray<UInterchangePipelineBase>&, UInterchangeSourceData, UInterchangeTranslatorBase, UInterchangeBaseNodeContainer), ERASE_ARGUMENT_PACK(EInterchangePipelineConfigurationDialogResult)) },


{ ERASE_METHOD_PTR(UAssetImportData, ExtractFilenames, (), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(UAssetImportData, GetFirstFilename, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UAssetImportData, ScriptedAddFilename, (const FString&, int, FString), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangeAssetImportData, GetNodeContainer, (), ERASE_ARGUMENT_PACK(UInterchangeBaseNodeContainer*)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, GetNumberOfPipelines, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, GetPipelines, (), ERASE_ARGUMENT_PACK(TArray<UObject*>)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, GetStoredFactoryNode, (const FString&), ERASE_ARGUMENT_PACK(UInterchangeFactoryBaseNode*)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, GetStoredNode, (const FString&), ERASE_ARGUMENT_PACK(const UInterchangeBaseNode*)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, GetTranslatorSettings, (), ERASE_ARGUMENT_PACK(const UInterchangeTranslatorSettings*)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, ScriptExtractDisplayLabels, (), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, ScriptExtractFilenames, (), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, ScriptGetFirstFilename, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, SetNodeContainer, (UInterchangeBaseNodeContainer), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, SetPipelines, (const TArray<UObject*>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAssetImportData, SetTranslatorSettings, (UInterchangeTranslatorSettings), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangePipelineStackOverride, AddBlueprintPipeline, (UInterchangeBlueprintPipelineBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineStackOverride, AddPipeline, (UInterchangePipelineBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineStackOverride, AddPythonPipeline, (UInterchangePythonPipelineBase), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangeManager, ExportAsset, (const UObject, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeManager, ExportScene, (const UObject, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeManager, GetRegisteredFactoryClass, (const UClass), ERASE_ARGUMENT_PACK(const UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeManager, ImportAsset, (const FString&, const UInterchangeSourceData, const FImportAssetParameters&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeManager, ImportScene, (const FString&, const UInterchangeSourceData, const FImportAssetParameters&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UEditConditionTestObject, SetUintBitfieldProperty, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_GetInputAxisKeyValue, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_GetInputAxisKeyValue, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_GetInputAxisValue, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_GetInputAxisValue, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_InputAction, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputAction, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputAction, SetbOverrideParentBinding, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_InputAxisEvent, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputAxisEvent, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputAxisEvent, SetbOverrideParentBinding, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_InputAxisKeyEvent, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputAxisKeyEvent, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputAxisKeyEvent, SetbOverrideParentBinding, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbOverrideParentBinding, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbControl, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbAlt, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbShift, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputKey, SetbCommand, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_InputTouch, SetbConsumeInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputTouch, SetbExecuteWhenPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UK2Node_InputTouch, SetbOverrideParentBinding, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_Switch, SetbHasDefaultPin, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UK2Node_SwitchString, SetbIsCaseSensitive, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UBlueprintEditorToolMenuContext, GetBlueprintObj, (), ERASE_ARGUMENT_PACK(UBlueprint*)) },


{ ERASE_METHOD_PTR(UAnimationGraph, GetGraphNodesOfClass, (TSubclassOf<UAnimGraphNode_Base>, TArray<UAnimGraphNode_Base>&, bool = true), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimGraphNodeCustomizationInterface, GetTitleColor, (), ERASE_ARGUMENT_PACK(FLinearColor)) },


{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, CopyTargetsFromPoseAsset, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, GetDrivingBoneNames, (TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, GetPoseDriverOutput, (), ERASE_ARGUMENT_PACK(EPoseDriverOutput&)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, GetPoseDriverSource, (), ERASE_ARGUMENT_PACK(EPoseDriverSource&)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, GetRBFParameters, (), ERASE_ARGUMENT_PACK(FRBFParams&)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, GetSourceBoneNames, (TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, SetDrivingBones, (const TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, SetPoseDriverOutput, (EPoseDriverOutput), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, SetPoseDriverSource, (EPoseDriverSource), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, SetRBFParameters, (FRBFParams), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimGraphNode_PoseDriver, SetSourceBones, (const TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USkinnedMeshComponent, BoneIsChildOf, (FName, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, ClearSkinWeightOverride, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, ClearSkinWeightProfile, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, ClearVertexColorOverride, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, FindClosestBone_K2, (FVector, FVector&, float32 = 0.000000, bool = false), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetBoneIndex, (FName), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetBoneName, (int), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetBoneTransform, (FName, ERelativeTransformSpace = ERelativeTransformSpace :: RTS_World), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetCurrentSkinWeightProfileName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetDeltaTransformFromRefPose, (FName, FName = NAME_None), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetForcedLOD, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetMeshDeformerInstance, (), ERASE_ARGUMENT_PACK(UMeshDeformerInstance*)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetNumBones, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetNumLODs, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetParentBone, (FName), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetPredictedLODLevel, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetRefPosePosition, (int), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetRefPoseTransform, (int), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetSkeletalMesh_DEPRECATED, (), ERASE_ARGUMENT_PACK(USkeletalMesh*)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetSkinnedAsset, (), ERASE_ARGUMENT_PACK(USkinnedAsset*)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetSocketBoneName, (FName), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetTwistAndSwingAngleOfDeltaRotationFromRefPose, (FName, float32&, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetVertexOffsetUsage, (int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, HideBoneByName, (FName, EPhysBodyOp), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, IsBoneHiddenByName, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, IsMaterialSectionShown, (int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, IsUsingSkinWeightProfile, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, OverrideMinLOD, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetCapsuleIndirectShadowMinVisibility, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetCastCapsuleDirectShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetCastCapsuleIndirectShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetForcedLOD, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetLeaderPoseComponent, (USkinnedMeshComponent, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetMeshDeformer, (UMeshDeformer), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetMinLOD, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetPhysicsAsset, (UPhysicsAsset, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetPostSkinningOffsets, (int, TArray<FVector>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetPreSkinningOffsets, (int, TArray<FVector>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetRenderStatic, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetSkinnedAssetAndUpdate, (USkinnedAsset, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetSkinWeightOverride, (int, const TArray<FSkelMeshSkinWeightInfo>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetSkinWeightProfile, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetVertexColorOverride_LinearColor, (int, const TArray<FLinearColor>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetVertexOffsetUsage, (int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, ShowAllMaterialSections, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, ShowMaterialSection, (int, int, bool, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, TransformFromBoneSpace, (FName, FVector, FRotator, FVector&, FRotator&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, TransformToBoneSpace, (FName, FVector, FRotator, FVector&, FRotator&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, UnHideBoneByName, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, UnloadSkinWeightProfile, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, UnsetMeshDeformer, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetSkeletalMesh, (), ERASE_ARGUMENT_PACK(USkeletalMesh*)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetSkeletalMesh, (USkeletalMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetLeaderPoseComponent, (), ERASE_ARGUMENT_PACK(const TWeakObjectPtr<USkinnedMeshComponent>&)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetMeshDeformer, (), ERASE_ARGUMENT_PACK(UMeshDeformer*)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbOverrideMinLod, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbOverrideMinLod, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbUseBoundsFromLeaderPoseComponent, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbUseBoundsFromLeaderPoseComponent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbDisableMorphTarget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbDisableMorphTarget, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbPerBoneMotionBlur, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbPerBoneMotionBlur, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbComponentUseFixedSkelBounds, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbComponentUseFixedSkelBounds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbConsiderAllBodiesForBounds, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbConsiderAllBodiesForBounds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbSyncAttachParentLOD, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbSyncAttachParentLOD, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbCastCapsuleDirectShadow, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbCastCapsuleDirectShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbCastCapsuleIndirectShadow, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbCastCapsuleIndirectShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbEnableUpdateRateOptimizations, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbEnableUpdateRateOptimizations, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbDisplayDebugUpdateRateOptimizations, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbDisplayDebugUpdateRateOptimizations, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbRenderStatic, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbRenderStatic, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetbIgnoreLeaderPoseComponentLOD, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, SetbIgnoreLeaderPoseComponentLOD, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkinnedMeshComponent, GetCapsuleIndirectShadowMinVisibility, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetLinkedAnimInstances, (), ERASE_ARGUMENT_PACK(const TArray<UAnimInstance>&)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, AccumulateAllBodiesBelowPhysicsBlendWeight, (const FName&, float32, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, AddForceToAllBodiesBelow, (FVector, FName = NAME_None, bool = false, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, AddImpulseToAllBodiesBelow, (FVector, FName = NAME_None, bool = false, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, AllowAnimCurveEvaluation, (FName, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, BindClothToLeaderPoseComponent, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, BreakConstraint, (FVector, FVector, FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ClearMorphTargets, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, FindConstraintBoneName, (int), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ForceClothNextUpdateTeleport, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ForceClothNextUpdateTeleportAndReset, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetAllowClothActors, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetAllowedAnimCurveEvaluate, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetAllowRigidBodyAnimNode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetAnimationMode, (), ERASE_ARGUMENT_PACK(EAnimationMode)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetAnimInstance, (), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetBoneLinearVelocity, (const FName&), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetBoneMass, (FName = NAME_None, bool = true), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetClothingSimulationInteractor, (), ERASE_ARGUMENT_PACK(UClothingSimulationInteractor*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetClothMaxDistanceScale, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetConstraintByName, (FName, bool), ERASE_ARGUMENT_PACK(FConstraintInstanceAccessor)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetConstraints, (bool, TArray<FConstraintInstanceAccessor>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetConstraintsFromBody, (FName, bool, bool, bool, TArray<FConstraintInstanceAccessor>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetCurrentJointAngles, (FName, float32&, float32&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetDefaultAnimatingRig, (), ERASE_ARGUMENT_PACK(TSoftObjectPtr<UObject>)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetDefaultAnimatingRigOverride, (), ERASE_ARGUMENT_PACK(TSoftObjectPtr<UObject>)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetDisableAnimCurves, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetDisablePostProcessBlueprint, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetFloatAttribute, (const FName&, const FName&, float32, float32&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetFloatAttribute_Ref, (const FName&, const FName&, float32&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetIntegerAttribute, (const FName&, const FName&, int, int&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetIntegerAttribute_Ref, (const FName&, const FName&, int&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetLinkedAnimGraphInstanceByTag, (FName), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetLinkedAnimGraphInstancesByTag, (FName, TArray<UAnimInstance>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetLinkedAnimLayerInstanceByClass, (TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetLinkedAnimLayerInstanceByGroup, (FName), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetMorphTarget, (FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetPlayRate, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetPosition, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetPostProcessInstance, (), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetSkeletalCenterOfMass, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetSkeletalMeshAsset, (), ERASE_ARGUMENT_PACK(USkeletalMesh*)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetStringAttribute, (const FName&, const FName&, FString, FString&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetStringAttribute_Ref, (const FName&, const FName&, FString&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetTeleportDistanceThreshold, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetTeleportRotationThreshold, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetTransformAttribute, (const FName&, const FName&, FTransform, FTransform&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetTransformAttribute_Ref, (const FName&, const FName&, FTransform&, ECustomBoneAttributeLookup = ECustomBoneAttributeLookup :: BoneOnly), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, HasValidAnimationInstance, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, IsBodyGravityEnabled, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, IsClothingSimulationSuspended, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetClosestPointOnPhysicsAsset, (const FVector&, FVector&, FVector&, FName&, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, LinkAnimClassLayers, (TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, LinkAnimGraphByTag, (FName, TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, OverrideAnimationData, (UAnimationAsset, bool = true, bool = true, float32 = 0.000000, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, Play, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, PlayAnimation, (UAnimationAsset, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ResetAllBodiesSimulatePhysics, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ResetAllowedAnimCurveEvaluation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ResetAnimInstanceDynamics, (ETeleportType = ETeleportType :: ResetPhysics), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ResetClothTeleportMode, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ResumeClothingSimulation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllBodiesBelowLinearVelocity, (const FName&, const FVector&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllBodiesBelowPhysicsBlendWeight, (const FName&, float32, bool = false, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllBodiesBelowPhysicsDisabled, (const FName&, bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllBodiesBelowSimulatePhysics, (const FName&, bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllBodiesPhysicsBlendWeight, (float32, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllBodiesSimulatePhysics, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllMotorsAngularDriveParams, (float32, float32, float32, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllMotorsAngularPositionDrive, (bool, bool, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllMotorsAngularVelocityDrive, (bool, bool, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllowAnimCurveEvaluation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllowClothActors, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllowedAnimCurvesEvaluation, (const TArray<FName>&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAllowRigidBodyAnimNode, (bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAngularLimits, (FName, float32, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAnimation, (UAnimationAsset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAnimationMode, (EAnimationMode, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetAnimClass, (UClass), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetBodyNotifyRigidBodyCollision, (bool, FName = NAME_None), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetBodySimulatePhysics, (const FName&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetClothMaxDistanceScale, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetConstraintProfile, (FName, FName, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetConstraintProfileForAll, (FName, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetDefaultAnimatingRigOverride, (TSoftObjectPtr<UObject>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetDisableAnimCurves, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetDisablePostProcessBlueprint, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetEnableBodyGravity, (bool, FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetEnableGravityOnAllBodiesBelow, (bool, FName, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetEnablePhysicsBlending, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetMorphTarget, (FName, float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetNotifyRigidBodyCollisionBelow, (bool, FName = NAME_None, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetPhysicsBlendWeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetPlayRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetPosition, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetSkeletalMeshAsset, (USkeletalMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetTeleportDistanceThreshold, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetTeleportRotationThreshold, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetUpdateAnimationInEditor, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetUpdateClothInEditor, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SnapshotPose, (FPoseSnapshot&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, Stop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SuspendClothingSimulation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, TermBodiesBelow, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, ToggleDisablePostProcessBlueprint, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, UnbindClothFromLeaderPoseComponent, (bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, UnlinkAnimClassLayers, (TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbDisablePostProcessBlueprint, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbDisablePostProcessBlueprint, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetAnimClass, (), ERASE_ARGUMENT_PACK(const TSubclassOf<UAnimInstance>&)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbUpdateOverlapsOnAnimationFinalize, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbEnablePhysicsOnDedicatedServer, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbEnablePhysicsOnDedicatedServer, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbUpdateMeshWhenKinematic, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbUpdateMeshWhenKinematic, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbUpdateJointsFromAnimation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbUpdateJointsFromAnimation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbAllowClothActors, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbAllowClothActors, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbDisableClothSimulation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbDisableClothSimulation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbDisableRigidBodyAnimNode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbAllowAnimCurveEvaluation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbCollideWithEnvironment, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbCollideWithEnvironment, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbCollideWithAttachedChildren, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbCollideWithAttachedChildren, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbForceCollisionUpdate, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbForceCollisionUpdate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbResetAfterTeleport, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbResetAfterTeleport, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbDeferKinematicBoneUpdate, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbDeferKinematicBoneUpdate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbNoSkeletonUpdate, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbNoSkeletonUpdate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbPauseAnims, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbPauseAnims, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbUseRefPoseOnInitAnim, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbEnablePerPolyCollision, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbEnablePerPolyCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbIncludeComponentLocationIntoBounds, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbIncludeComponentLocationIntoBounds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbPropagateCurvesToFollowers, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbPropagateCurvesToFollowers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbSkipKinematicUpdateWhenInterpolating, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbSkipKinematicUpdateWhenInterpolating, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, GetbSkipBoundsUpdateWhenInterpolating, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbSkipBoundsUpdateWhenInterpolating, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbUpdateAnimationInEditor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbUpdateClothInEditor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USkeletalMeshComponent, SetbOverrideDefaultAnimatingRig, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimInstance, Blueprint_GetMainAnimInstance, (), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(UAnimInstance, Blueprint_GetSlotMontageLocalWeight, (FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, BlueprintBeginPlay, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, BlueprintInitializeAnimation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, BlueprintLinkedAnimationLayersInitialized, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, BlueprintPostEvaluateAnimation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, BlueprintThreadSafeUpdateAnimation, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, BlueprintUpdateAnimation, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, CalculateDirection, (const FVector&, const FRotator&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, ClearAllTransitionEvents, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, ClearMorphTargets, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, ClearTransitionEvents, (const FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, DynamicMontage_IsPlayingFrom, (const UAnimSequenceBase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetActiveCurveNames, (EAnimCurveType, TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetAllCurveNames, (TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetCurrentActiveMontage, (), ERASE_ARGUMENT_PACK(UAnimMontage*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetCurveValue, (FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetCurveValueWithDefault, (FName, float32, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetDeltaSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetLinkedAnimGraphInstanceByTag, (FName), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetLinkedAnimGraphInstancesByTag, (FName, TArray<UAnimInstance>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetLinkedAnimLayerInstanceByClass, (TSubclassOf<UAnimInstance>, bool = false), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetLinkedAnimLayerInstanceByGroup, (FName), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetLinkedAnimLayerInstanceByGroupAndClass, (FName, TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(UAnimInstance*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetLinkedAnimLayerInstancesByGroup, (FName, TArray<UAnimInstance>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetOwningActor, (), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetOwningComponent, (), ERASE_ARGUMENT_PACK(USkeletalMeshComponent*)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetPropagateNotifiesToLinkedInstances, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetReceiveNotifiesFromLinkedInstances, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetSyncGroupPosition, (FName), ERASE_ARGUMENT_PACK(FMarkerSyncAnimPosition)) },
{ ERASE_METHOD_PTR(UAnimInstance, GetTimeToClosestMarker, (FName, FName, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, HasMarkerBeenHitThisFrame, (FName, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, IsAnyMontagePlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, IsPlayingSlotAnimation, (const UAnimSequenceBase, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, IsSlotActive, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, IsSyncGroupBetweenMarkers, (FName, FName, FName, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, IsUsingMainInstanceMontageEvaluationData, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, LinkAnimClassLayers, (TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, LinkAnimGraphByTag, (FName, TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, LockAIResources, (bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_GetBlendTime, (const UAnimMontage), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_GetCurrentSection, (const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_GetEffectivePlayRate, (const UAnimMontage), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_GetIsStopped, (const UAnimMontage), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_GetPlayRate, (const UAnimMontage), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_GetPosition, (const UAnimMontage), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_IsActive, (const UAnimMontage), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_IsPlaying, (const UAnimMontage), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_JumpToSection, (FName, const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_JumpToSectionsEnd, (FName, const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_Pause, (const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_Play, (UAnimMontage, float32 = 1.000000, EMontagePlayReturnType = EMontagePlayReturnType :: MontageLength, float32 = 0.000000, bool = true), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_PlayWithBlendIn, (UAnimMontage, const FAlphaBlendArgs&, float32 = 1.000000, EMontagePlayReturnType = EMontagePlayReturnType :: MontageLength, float32 = 0.000000, bool = true), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_PlayWithBlendSettings, (UAnimMontage, const FMontageBlendSettings&, float32 = 1.000000, EMontagePlayReturnType = EMontagePlayReturnType :: MontageLength, float32 = 0.000000, bool = true), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_Resume, (const UAnimMontage), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_SetNextSection, (FName, FName, const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_SetPlayRate, (const UAnimMontage, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_SetPosition, (const UAnimMontage, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_Stop, (float32, const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_StopGroupByName, (float32, FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_StopWithBlendOut, (const FAlphaBlendArgs&, const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, Montage_StopWithBlendSettings, (const FMontageBlendSettings&, const UAnimMontage = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, MontageSync_Follow, (const UAnimMontage, const UAnimInstance, const UAnimMontage), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, MontageSync_StopFollowing, (const UAnimMontage), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, PlaySlotAnimationAsDynamicMontage, (UAnimSequenceBase, FName, float32 = 0.250000, float32 = 0.250000, float32 = 1.000000, int = 1, float32 = - 1.000000, float32 = 0.000000), ERASE_ARGUMENT_PACK(UAnimMontage*)) },
{ ERASE_METHOD_PTR(UAnimInstance, PlaySlotAnimationAsDynamicMontage_WithBlendArgs, (UAnimSequenceBase, FName, const FAlphaBlendArgs&, const FAlphaBlendArgs&, float32 = 1.000000, int = 1, float32 = - 1.000000, float32 = 0.000000), ERASE_ARGUMENT_PACK(UAnimMontage*)) },
{ ERASE_METHOD_PTR(UAnimInstance, PlaySlotAnimationAsDynamicMontage_WithBlendSettings, (UAnimSequenceBase, FName, const FMontageBlendSettings&, const FMontageBlendSettings&, float32 = 1.000000, int = 1, float32 = - 1.000000, float32 = 0.000000), ERASE_ARGUMENT_PACK(UAnimMontage*)) },
{ ERASE_METHOD_PTR(UAnimInstance, RemovePoseSnapshot, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, RequestSlotGroupInertialization, (FName, float32, const UBlendProfile = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, RequestTransitionEvent, (const FName, const float, const ETransitionRequestQueueMode, const ETransitionRequestOverwriteMode), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, ResetDynamics, (ETeleportType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SavePoseSnapshot, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetMorphTarget, (FName, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetPropagateNotifiesToLinkedInstances, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetReceiveNotifiesFromLinkedInstances, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetRootMotionMode, (ERootMotionMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetUseMainInstanceMontageEvaluationData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SnapshotPose, (FPoseSnapshot&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, StopSlotAnimation, (float32 = 0.250000, FName = NAME_None), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, TryGetPawnOwner, (), ERASE_ARGUMENT_PACK(APawn*)) },
{ ERASE_METHOD_PTR(UAnimInstance, UnlinkAnimClassLayers, (TSubclassOf<UAnimInstance>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, UnlockAIResources, (bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, WasAnimNotifyStateActiveInAnyState, (TSubclassOf<UAnimNotifyState>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetbReceiveNotifiesFromLinkedInstances, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetbPropagateNotifiesToLinkedInstances, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimInstance, SetbUseMainInstanceMontageEvaluationData, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, GetAnimationAsset, (), ERASE_ARGUMENT_PACK(UAnimationAsset*)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, GetLength, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, GetMirrorDataTable, (), ERASE_ARGUMENT_PACK(const UMirrorDataTable*)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, PlayAnim, (bool = false, float32 = 1.000000, float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetAnimationAsset, (UAnimationAsset, bool = true, float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetBlendSpacePosition, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetMirrorDataTable, (const UMirrorDataTable), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetPlaying, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetPlayRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetPosition, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetPositionWithPreviousTime, (float32, float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetPreviewCurveOverride, (const FName&, float32, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, SetReverse, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimSingleNodeInstance, StopAnim, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USequencerAnimationOverride, AllowsCinematicOverride, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USequencerAnimationOverride, GetSequencerAnimSlotNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },


{ ERASE_METHOD_PTR(UAnimNotify, GetDefaultTriggerWeightThreshold, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimNotify, GetNotifyName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UAnimNotify, Notify, (USkeletalMeshComponent, UAnimSequenceBase, const FAnimNotifyEventReference&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UAnimNotify_PlayMontageNotify, SetNotifyName, (const FName&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimNotifyState, GetDefaultTriggerWeightThreshold, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAnimNotifyState, GetNotifyName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UAnimNotifyState, NotifyBegin, (USkeletalMeshComponent, UAnimSequenceBase, float32, const FAnimNotifyEventReference&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimNotifyState, NotifyEnd, (USkeletalMeshComponent, UAnimSequenceBase, const FAnimNotifyEventReference&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimNotifyState, NotifyTick, (USkeletalMeshComponent, UAnimSequenceBase, float32, const FAnimNotifyEventReference&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UAnimNotify_PlayMontageNotifyWindow, SetNotifyName, (const FName&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneTransformOrigin, GetTransformOrigin, (), ERASE_ARGUMENT_PACK(FTransform)) },


{ ERASE_METHOD_PTR(UMovieScene3DConstraintSection, GetConstraintBindingID, (), ERASE_ARGUMENT_PACK(const FMovieSceneObjectBindingID&)) },
{ ERASE_METHOD_PTR(UMovieScene3DConstraintSection, SetConstraintBindingID, (const FMovieSceneObjectBindingID&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieScene3DPathSection, GetbFollow, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieScene3DPathSection, SetbFollow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieScene3DPathSection, GetbReverse, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieScene3DPathSection, SetbReverse, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieScene3DPathSection, GetbForceUpright, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieScene3DPathSection, SetbForceUpright, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneAudioSection, GetAttenuationSettings, (), ERASE_ARGUMENT_PACK(USoundAttenuation*)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, GetLooping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, GetOverrideAttenuation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, GetSound, (), ERASE_ARGUMENT_PACK(USoundBase*)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, GetStartOffset, (), ERASE_ARGUMENT_PACK(FFrameNumber)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, GetSuppressSubtitles, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, SetAttenuationSettings, (USoundAttenuation), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, SetLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, SetOverrideAttenuation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, SetSound, (USoundBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, SetStartOffset, (FFrameNumber), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneAudioSection, SetSuppressSubtitles, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneCameraCutSection, GetCameraBindingID, (), ERASE_ARGUMENT_PACK(const FMovieSceneObjectBindingID&)) },
{ ERASE_METHOD_PTR(UMovieSceneCameraCutSection, SetCameraBindingID, (const FMovieSceneObjectBindingID&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneSubSection, GetSequence, (), ERASE_ARGUMENT_PACK(UMovieSceneSequence*)) },
{ ERASE_METHOD_PTR(UMovieSceneSubSection, SetSequence, (UMovieSceneSequence), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneCinematicShotSection, GetShotDisplayName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneCinematicShotSection, SetShotDisplayName, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneComponentMaterialParameterSection, AddColorParameterKey, (const FMaterialParameterInfo&, FFrameNumber, FLinearColor, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneComponentMaterialParameterSection, AddScalarParameterKey, (const FMaterialParameterInfo&, FFrameNumber, float32, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneComponentMaterialParameterSection, RemoveColorParameter, (const FMaterialParameterInfo&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneComponentMaterialParameterSection, RemoveScalarParameter, (const FMaterialParameterInfo&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMovieSceneParameterSection, AddBoolParameterKey, (FName, FFrameNumber, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, AddColorParameterKey, (FName, FFrameNumber, FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, AddScalarParameterKey, (FName, FFrameNumber, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, AddTransformParameterKey, (FName, FFrameNumber, const FTransform&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, AddVector2DParameterKey, (FName, FFrameNumber, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, AddVectorParameterKey, (FName, FFrameNumber, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, GetParameterNames, (TSet<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, RemoveBoolParameter, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, RemoveColorParameter, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, RemoveScalarParameter, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, RemoveTransformParameter, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, RemoveVector2DParameter, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneParameterSection, RemoveVectorParameter, (FName), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMovieSceneCVarSection, GetString, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneCVarSection, SetFromString, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetDataLayerAssets, (), ERASE_ARGUMENT_PACK(const TArray<UDataLayerAsset>&)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetDataLayers, (), ERASE_ARGUMENT_PACK(const TArray<FActorDataLayer>&)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetDesiredState, (), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetFlushOnActivated, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetFlushOnUnload, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetPerformGCOnUnload, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, GetPrerollState, (), ERASE_ARGUMENT_PACK(EDataLayerRuntimeState)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetDataLayerAssets, (const TArray<UDataLayerAsset>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetDataLayers, (const TArray<FActorDataLayer>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetDesiredState, (EDataLayerRuntimeState), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetFlushOnActivated, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetFlushOnUnload, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetPerformGCOnUnload, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneDataLayerSection, SetPrerollState, (EDataLayerRuntimeState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneFadeSection, SetbFadeAudio, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneLevelVisibilitySection, GetLevelNames, (), ERASE_ARGUMENT_PACK(const TArray<FName>&)) },
{ ERASE_METHOD_PTR(UMovieSceneLevelVisibilitySection, GetVisibility, (), ERASE_ARGUMENT_PACK(ELevelVisibility)) },
{ ERASE_METHOD_PTR(UMovieSceneLevelVisibilitySection, SetLevelNames, (const TArray<FName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneLevelVisibilitySection, SetVisibility, (ELevelVisibility), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneEventTrack, SetbFireEventsWhenForwards, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneEventTrack, SetbFireEventsWhenBackwards, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTimecodeProvider, FetchAndUpdate, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, FetchTimecode, (FQualifiedFrameTime&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, GetDelayedQualifiedFrameTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, GetDelayedTimecode, (), ERASE_ARGUMENT_PACK(FTimecode)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, GetFrameRate, (), ERASE_ARGUMENT_PACK(FFrameRate)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, GetQualifiedFrameTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, GetSynchronizationState, (), ERASE_ARGUMENT_PACK(ETimecodeProviderSynchronizationState)) },
{ ERASE_METHOD_PTR(UTimecodeProvider, GetTimecode, (), ERASE_ARGUMENT_PACK(FTimecode)) },


{ ERASE_METHOD_PTR(UMovieSceneBoundObjectProxy, GetBoundObjectForSequencer, (UObject), ERASE_ARGUMENT_PACK(UObject*)) },


{ ERASE_METHOD_PTR(UMovieSceneBindingEventReceiverInterface, OnObjectBoundBySequencer, (UMovieSceneSequencePlayer, FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneBindingEventReceiverInterface, OnObjectUnboundBySequencer, (UMovieSceneSequencePlayer, FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneEasingFunction, OnEvaluate, (float32), ERASE_ARGUMENT_PACK(float)) },


{ ERASE_METHOD_PTR(UMovieSceneMetaData, GetAuthor, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneMetaData, GetCreated, (), ERASE_ARGUMENT_PACK(FDateTime)) },
{ ERASE_METHOD_PTR(UMovieSceneMetaData, GetNotes, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneMetaData, SetAuthor, (FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneMetaData, SetCreated, (FDateTime), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneMetaData, SetNotes, (FString), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, ChangePlaybackDirection, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetBoundObjects, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(TArray<UObject*>)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetCompletionModeOverride, (), ERASE_ARGUMENT_PACK(EMovieSceneCompletionModeOverride)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetCurrentTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetDisableCameraCuts, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetDuration, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetEndTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetFrameDuration, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetFrameRate, (), ERASE_ARGUMENT_PACK(FFrameRate)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetObjectBindings, (UObject), ERASE_ARGUMENT_PACK(TArray<FMovieSceneObjectBindingID>)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetPlayRate, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetSequence, (), ERASE_ARGUMENT_PACK(UMovieSceneSequence*)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetSequenceName, (bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GetStartTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, GoToEndAndStop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, IsPaused, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, IsReversed, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, Pause, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, Play, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, PlayLooping, (int = - 1), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, PlayReverse, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, PlayTo, (FMovieSceneSequencePlaybackParams, FMovieSceneSequencePlayToParams), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, RemoveWeight, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, RestoreState, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, RPC_ExplicitServerUpdateEvent, (EUpdatePositionMethod, FFrameTime, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, RPC_OnFinishPlaybackEvent, (FFrameTime, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, RPC_OnStopEvent, (FFrameTime, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, Scrub, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetCompletionModeOverride, (EMovieSceneCompletionModeOverride), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetDisableCameraCuts, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetFrameRange, (int, int, float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetFrameRate, (FFrameRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetPlaybackPosition, (FMovieSceneSequencePlaybackParams), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetPlayRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetTimeRange, (float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, SetWeight, (float), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, Stop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneSequencePlayer, StopAtCurrentTime, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundBase, SetbDebug, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundBase, GetbOverrideConcurrency, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundBase, SetbOverrideConcurrency, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundBase, GetbEnableBusSends, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundBase, SetbEnableBusSends, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundBase, SetbEnableBaseSubmix, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundBase, SetbEnableSubmixSends, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundBase, GetbBypassVolumeScaleForPriority, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundBase, SetbBypassVolumeScaleForPriority, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USoundWave, GetCuePoints, (), ERASE_ARGUMENT_PACK(TArray<FSoundWaveCuePoint>)) },
{ ERASE_METHOD_PTR(USoundWave, GetLoopRegions, (), ERASE_ARGUMENT_PACK(TArray<FSoundWaveCuePoint>)) },
{ ERASE_METHOD_PTR(USoundWave, GetSoundAssetCompressionType, (), ERASE_ARGUMENT_PACK(ESoundAssetCompressionType)) },
{ ERASE_METHOD_PTR(USoundWave, SetSoundAssetCompressionType, (ESoundAssetCompressionType, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, SetbLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, SetTreatFileAsLoopingForAnalysis, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, SetbEnableBakedFFTAnalysis, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, SetbEnableAmplitudeEnvelopeAnalysis, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, GetbMature, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundWave, SetbMature, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, GetbManualWordWrap, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundWave, SetbManualWordWrap, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, GetbSingleLine, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USoundWave, SetbSingleLine, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, SetbIsAmbisonics, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USoundWave, SetbEnableCloudStreaming, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USynthComponent, AdjustVolume, (float32, float32, const EAudioFaderCurve = EAudioFaderCurve :: Linear), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, FadeIn, (float32, float32 = 1.000000, float32 = 0.000000, const EAudioFaderCurve = EAudioFaderCurve :: Linear), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, FadeOut, (float32, float32, const EAudioFaderCurve = EAudioFaderCurve :: Linear), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, GetModulators, (const EModulationDestination), ERASE_ARGUMENT_PACK(TSet<USoundModulatorBase>)) },
{ ERASE_METHOD_PTR(USynthComponent, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponent, SetAudioBusSendPostEffect, (UAudioBus, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetAudioBusSendPreEffect, (UAudioBus, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetLowPassFilterEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetLowPassFilterFrequency, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetModulationRouting, (const TSet<USoundModulatorBase>&, const EModulationDestination, const EModulationRouting = EModulationRouting :: Inherit), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetOutputToBusOnly, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetSourceBusSendPostEffect, (USoundSourceBus, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetSourceBusSendPreEffect, (USoundSourceBus, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetSubmixSend, (USoundSubmixBase, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetVolumeMultiplier, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, Start, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, Stop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, GetbAllowSpatialization, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponent, SetbAllowSpatialization, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, GetbOverrideAttenuation, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponent, SetbOverrideAttenuation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, GetbEnableBusSends, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponent, SetbEnableBusSends, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetbEnableBaseSubmix, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, SetbEnableSubmixSends, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponent, GetModulationRouting, (), ERASE_ARGUMENT_PACK(const FSoundModulationDefaultRoutingSettings&)) },
{ ERASE_METHOD_PTR(USynthComponent, GetbIsUISound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponent, SetbIsUISound, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USubmixEffectDynamicsProcessorPreset, ResetKey, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDynamicsProcessorPreset, SetAudioBus, (UAudioBus), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDynamicsProcessorPreset, SetExternalSubmix, (USoundSubmix), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDynamicsProcessorPreset, SetSettings, (const FSubmixEffectDynamicsProcessorSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDynamicsProcessorPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectDynamicsProcessorSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectSubmixEQPreset, SetSettings, (const FSubmixEffectSubmixEQSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectSubmixEQPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectSubmixEQSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectReverbPreset, SetSettings, (const FSubmixEffectReverbSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectReverbPreset, SetSettingsWithReverbEffect, (const UReverbEffect, const float32, const float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectReverbPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectReverbSettings&)) },


{ ERASE_METHOD_PTR(UQuartzClockHandle, GetBeatProgressPercent, (EQuartzCommandQuantization = EQuartzCommandQuantization :: Beat, float32 = 0.000000, float32 = 0.000000), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetBeatsPerMinute, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetCurrentTimestamp, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(FQuartzTransportTimeStamp)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetDurationOfQuantizationTypeInSeconds, (const UObject, const EQuartzCommandQuantization&, float32 = 1.000000), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetEstimatedRunTime, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetMillisecondsPerTick, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetSecondsPerTick, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetThirtySecondNotesPerMinute, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, GetTicksPerSecond, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, IsClockRunning, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, NotifyOnQuantizationBoundary, (const UObject, FQuartzQuantizationBoundary, const FOnQuartzCommandEventBP& = FOnQuartzCommandEventBP ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, PauseClock, (const UObject, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, ResetTransport, (const UObject = __WorldContext, const FOnQuartzCommandEventBP& = FOnQuartzCommandEventBP ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, ResetTransportQuantized, (const UObject, FQuartzQuantizationBoundary, const FOnQuartzCommandEventBP&, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, ResumeClock, (const UObject, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SetBeatsPerMinute, (const UObject, const FQuartzQuantizationBoundary&, const FOnQuartzCommandEventBP&, UQuartzClockHandle&, float32 = 60.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SetMillisecondsPerTick, (const UObject, const FQuartzQuantizationBoundary&, const FOnQuartzCommandEventBP&, UQuartzClockHandle&, float32 = 100.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SetSecondsPerTick, (const UObject, const FQuartzQuantizationBoundary&, const FOnQuartzCommandEventBP&, UQuartzClockHandle&, float32 = 0.250000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SetThirtySecondNotesPerMinute, (const UObject, const FQuartzQuantizationBoundary&, const FOnQuartzCommandEventBP&, UQuartzClockHandle&, float32 = 960.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SetTicksPerSecond, (const UObject, const FQuartzQuantizationBoundary&, const FOnQuartzCommandEventBP&, UQuartzClockHandle&, float32 = 10.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, StartClock, (const UObject, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, StartOtherClock, (const UObject, FName, FQuartzQuantizationBoundary, const FOnQuartzCommandEventBP& = FOnQuartzCommandEventBP ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, StopClock, (const UObject, bool, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SubscribeToAllQuantizationEvents, (const UObject, const FOnQuartzMetronomeEventBP&, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, SubscribeToQuantizationEvent, (const UObject, EQuartzCommandQuantization, const FOnQuartzMetronomeEventBP&, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, UnsubscribeFromAllTimeDivisions, (const UObject, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzClockHandle, UnsubscribeFromTimeDivision, (const UObject, EQuartzCommandQuantization, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UQuartzSubsystem, CreateNewClock, (const UObject, FName, FQuartzClockSettings, bool = false, bool = true), ERASE_ARGUMENT_PACK(UQuartzClockHandle*)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, DeleteClockByHandle, (const UObject, UQuartzClockHandle&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, DeleteClockByName, (const UObject, FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, DoesClockExist, (const UObject, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetAudioRenderThreadToGameThreadAverageLatency, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetAudioRenderThreadToGameThreadMaxLatency, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetAudioRenderThreadToGameThreadMinLatency, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetCurrentClockTimestamp, (const UObject, const FName&), ERASE_ARGUMENT_PACK(FQuartzTransportTimeStamp)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetDurationOfQuantizationTypeInSeconds, (const UObject, FName, const EQuartzCommandQuantization&, float32 = 1.000000), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetEstimatedClockRunTime, (const UObject, const FName&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetGameThreadToAudioRenderThreadAverageLatency, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetGameThreadToAudioRenderThreadMaxLatency, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetGameThreadToAudioRenderThreadMinLatency, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetHandleForClock, (const UObject, FName), ERASE_ARGUMENT_PACK(UQuartzClockHandle*)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetRoundTripAverageLatency, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetRoundTripMaxLatency, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, GetRoundTripMinLatency, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, IsClockRunning, (const UObject, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, IsQuartzEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UQuartzSubsystem, SetQuartzSubsystemTickableWhenPaused, (const bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UStreamableRenderAsset, SetForceMipLevelsToBeResident, (float32, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamableRenderAsset, GetNeverStream, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStreamableRenderAsset, SetNeverStream, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStreamableRenderAsset, GetbGlobalForceMipLevelsToBeResident, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStreamableRenderAsset, SetbGlobalForceMipLevelsToBeResident, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTexture, Blueprint_GetMemorySize, (), ERASE_ARGUMENT_PACK(int64)) },
{ ERASE_METHOD_PTR(UTexture, Blueprint_GetTextureSourceDiskAndMemorySize, (int64&, int64&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, ComputeTextureSourceChannelMinMax, (FLinearColor&, FLinearColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, GetCompressionNoAlpha, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetCompressionNoAlpha, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetCompressFinal, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetCompressFinal, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetDeferCompression, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetDeferCompression, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetbPreserveBorder, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetbPreserveBorder, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetbFlipGreenChannel, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetbFlipGreenChannel, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetSRGB, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetSRGB, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetbNormalizeNormals, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetbNormalizeNormals, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetbUseLegacyGamma, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetbUseLegacyGamma, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTexture, GetVirtualTextureStreaming, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTexture, SetVirtualTextureStreaming, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMediaTexture, GetAspectRatio, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaTexture, GetHeight, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaTexture, GetMediaPlayer, (), ERASE_ARGUMENT_PACK(UMediaPlayer*)) },
{ ERASE_METHOD_PTR(UMediaTexture, GetTextureNumMips, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaTexture, GetWidth, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaTexture, SetMediaPlayer, (UMediaPlayer), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaTexture, UpdateResource, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMediaSource, GetUrl, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMediaSource, SetMediaOptionBool, (const FName&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSource, SetMediaOptionFloat, (const FName&, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSource, SetMediaOptionInt64, (const FName&, int64), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSource, SetMediaOptionString, (const FName&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSource, Validate, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UFileMediaSource, SetFilePath, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UFileMediaSource, GetFilePath, (), ERASE_ARGUMENT_PACK(const FString&)) },


{ ERASE_METHOD_PTR(UMediaComponent, GetMediaPlayer, (), ERASE_ARGUMENT_PACK(UMediaPlayer*)) },
{ ERASE_METHOD_PTR(UMediaComponent, GetMediaTexture, (), ERASE_ARGUMENT_PACK(UMediaTexture*)) },
{ ERASE_METHOD_PTR(UMediaComponent, SetMediaTexture, (UMediaTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaComponent, SetMediaPlayer, (UMediaPlayer), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMediaPlayer, CanPause, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, CanPlaySource, (UMediaSource), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, CanPlayUrl, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Close, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetAudioTrackChannels, (int, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetAudioTrackSampleRate, (int, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetAudioTrackType, (int, int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetDesiredPlayerName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetDisplayTime, (), ERASE_ARGUMENT_PACK(FTimespan)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetDisplayTimeStamp, (), ERASE_ARGUMENT_PACK(UMediaTimeStampInfo*)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetDuration, (), ERASE_ARGUMENT_PACK(FTimespan)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetHorizontalFieldOfView, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetMediaMetadataItems, (), ERASE_ARGUMENT_PACK(TMap<FString,FMediaMetadataItemsBPT>)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetMediaName, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetNumTrackFormats, (EMediaPlayerTrack, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetNumTracks, (EMediaPlayerTrack), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetPlaybackTimeRange, (EMediaTimeRangeBPType), ERASE_ARGUMENT_PACK(FFloatInterval)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetPlayerName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetPlaylist, (), ERASE_ARGUMENT_PACK(UMediaPlaylist*)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetPlaylistIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetRate, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetSelectedTrack, (EMediaPlayerTrack), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetSupportedRates, (TArray<FFloatRange>&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetTime, (), ERASE_ARGUMENT_PACK(FTimespan)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetTimeDelay, (), ERASE_ARGUMENT_PACK(FTimespan)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetTimeStamp, (), ERASE_ARGUMENT_PACK(UMediaTimeStampInfo*)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetTrackDisplayName, (EMediaPlayerTrack, int), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetTrackFormat, (EMediaPlayerTrack, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetTrackLanguage, (EMediaPlayerTrack, int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetUrl, (), ERASE_ARGUMENT_PACK(const FString&)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetVerticalFieldOfView, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetVideoTrackAspectRatio, (int, int), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetVideoTrackDimensions, (int, int), ERASE_ARGUMENT_PACK(FIntPoint)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetVideoTrackFrameRate, (int, int), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetVideoTrackFrameRates, (int, int), ERASE_ARGUMENT_PACK(FFloatRange)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetVideoTrackType, (int, int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetViewRotation, (), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(UMediaPlayer, HasError, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsBuffering, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsClosed, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsConnecting, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsLooping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsPaused, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsPreparing, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, IsReady, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Next, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenFile, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenPlaylist, (UMediaPlaylist), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenPlaylistIndex, (UMediaPlaylist, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenSource, (UMediaSource), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenSourceLatent, (const UObject, FLatentActionInfo, UMediaSource, const FMediaPlayerOptions&, bool&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenSourceWithOptions, (UMediaSource, const FMediaPlayerOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, OpenUrl, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Pause, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Play, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, PlayAndSeek, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Previous, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Reopen, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Rewind, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, Seek, (const FTimespan&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SelectTrack, (EMediaPlayerTrack, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetBlockOnTime, (const FTimespan&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetDesiredPlayerName, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetLooping, (bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetMediaOptions, (const UMediaSource), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetNativeVolume, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetPlaybackTimeRange, (FFloatInterval), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetRate, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetTimeDelay, (FTimespan), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetTrackFormat, (EMediaPlayerTrack, int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetVideoTrackFrameRate, (int, int, float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetViewField, (float32, float32, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetViewRotation, (const FRotator&, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SupportsPlaybackTimeRange, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SupportsRate, (float32, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SupportsScrubbing, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SupportsSeeking, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetShuffle, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetShuffle, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, GetLoop, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetLoop, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetHorizontalFieldOfView, (const float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlayer, SetVerticalFieldOfView, (const float32&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMediaPlaylist, Add, (UMediaSource), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, AddFile, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, AddUrl, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, Get, (int), ERASE_ARGUMENT_PACK(UMediaSource*)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, GetNext, (int&), ERASE_ARGUMENT_PACK(UMediaSource*)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, GetPrevious, (int&), ERASE_ARGUMENT_PACK(UMediaSource*)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, GetRandom, (int&), ERASE_ARGUMENT_PACK(UMediaSource*)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, Insert, (UMediaSource, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, Num, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, Remove, (UMediaSource), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, RemoveAt, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlaylist, Replace, (int, UMediaSource), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMediaSoundComponent, GetAttenuationSettingsToApply, (FSoundAttenuationSettings&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, GetEnvelopeValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, GetMediaPlayer, (), ERASE_ARGUMENT_PACK(UMediaPlayer*)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, GetNormalizedSpectralData, (), ERASE_ARGUMENT_PACK(TArray<FMediaSoundComponentSpectralData>)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, GetSpectralData, (), ERASE_ARGUMENT_PACK(TArray<FMediaSoundComponentSpectralData>)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, SetEnableEnvelopeFollowing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, SetEnableSpectralAnalysis, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, SetEnvelopeFollowingsettings, (int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, SetMediaPlayer, (UMediaPlayer), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaSoundComponent, SetSpectralAnalysisSettings, (TArray<float32>, EMediaSoundComponentFFTSize = EMediaSoundComponentFFTSize :: Medium_512), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULevelSequence, CopyMetaData, (UObject), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(ULevelSequence, FindMetaDataByClass, (TSubclassOf<UObject>), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(ULevelSequence, FindOrAddMetaDataByClass, (TSubclassOf<UObject>), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(ULevelSequence, RemoveMetaDataByClass, (TSubclassOf<UObject>), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULevelSequenceBurnInOptions, SetBurnIn, (FSoftClassPath), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ALevelSequenceActor, AddBinding, (FMovieSceneObjectBindingID, AActor, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, AddBindingByTag, (FName, AActor, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, FindNamedBinding, (FName), ERASE_ARGUMENT_PACK(FMovieSceneObjectBindingID)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, FindNamedBindings, (FName), ERASE_ARGUMENT_PACK(const TArray<FMovieSceneObjectBindingID>&)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, GetSequence, (), ERASE_ARGUMENT_PACK(ULevelSequence*)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, GetSequencePlayer, (), ERASE_ARGUMENT_PACK(ULevelSequencePlayer*)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, HideBurnin, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, RemoveBinding, (FMovieSceneObjectBindingID, AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, RemoveBindingByTag, (FName, AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, ResetBinding, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, ResetBindings, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetBinding, (FMovieSceneObjectBindingID, const TArray<AActor*>&, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetBindingByTag, (FName, const TArray<AActor*>&, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetReplicatePlayback, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetSequence, (ULevelSequence), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, ShowBurnin, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetbReplicatePlayback, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetSequencePlayer, (ULevelSequencePlayer), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, GetbOverrideInstanceData, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, SetbOverrideInstanceData, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceActor, GetbReplicatePlayback, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(ULevelSequenceBurnIn, GetSettingsClass, (), ERASE_ARGUMENT_PACK(TSubclassOf<ULevelSequenceBurnInInitSettings>)) },
{ ERASE_METHOD_PTR(ULevelSequenceBurnIn, SetSettings, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetBoundActor, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetBoundActors, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetBoundObject, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetBoundObjects, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(TArray<UObject*>)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetCurrentTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetMasterSequenceTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetRootSequenceTime, (), ERASE_ARGUMENT_PACK(FQualifiedFrameTime)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, GetSequence, (), ERASE_ARGUMENT_PACK(UMovieSceneSequence*)) },
{ ERASE_METHOD_PTR(ULevelSequenceDirector, OnCreated, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULevelSequencePlayer, GetActiveCameraComponent, (), ERASE_ARGUMENT_PACK(UCameraComponent*)) },


{ ERASE_METHOD_PTR(ALevelSequenceMediaController, GetMediaComponent, (), ERASE_ARGUMENT_PACK(UMediaComponent*)) },
{ ERASE_METHOD_PTR(ALevelSequenceMediaController, GetSequence, (), ERASE_ARGUMENT_PACK(ALevelSequenceActor*)) },
{ ERASE_METHOD_PTR(ALevelSequenceMediaController, Play, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceMediaController, SynchronizeToServer, (float32 = 2.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALevelSequenceMediaController, SetSequence, (ALevelSequenceActor), ERASE_ARGUMENT_PACK(void)) },
*/