#pragma once
//#include"FunctionCallers.h"
/*
{ ERASE_METHOD_PTR(UTakeMetaData, SetFrameRateFromTimecode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetLevelOrigin, (ULevel), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetPresetOrigin, (UTakePreset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetSlate, (FString, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetTakeNumber, (int, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetTimecodeIn, (FTimecode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetTimecodeOut, (FTimecode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, SetTimestamp, (FDateTime), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeMetaData, Unlock, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTakeRecorderSources, AddSource, (TSubclassOf<UTakeRecorderSource>), ERASE_ARGUMENT_PACK(UTakeRecorderSource*)) },
{ ERASE_METHOD_PTR(UTakeRecorderSources, GetSourcesCopy, (), ERASE_ARGUMENT_PACK(TArray<UTakeRecorderSource>)) },
{ ERASE_METHOD_PTR(UTakeRecorderSources, RemoveSource, (UTakeRecorderSource), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderSources, StartRecordingSource, (TArray<UTakeRecorderSource>, const FQualifiedFrameTime&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UTakeRecorder, GetCountdownSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UTakeRecorder, GetSequence, (), ERASE_ARGUMENT_PACK(ULevelSequence*)) },
{ ERASE_METHOD_PTR(UTakeRecorder, GetState, (), ERASE_ARGUMENT_PACK(ETakeRecorderState)) },


{ ERASE_METHOD_PTR(UTakeRecorderPanel, CanStartRecording, (FText&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, ClearPendingTake, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, GetFrameRate, (), ERASE_ARGUMENT_PACK(FFrameRate)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, GetLastRecordedLevelSequence, (), ERASE_ARGUMENT_PACK(ULevelSequence*)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, GetLevelSequence, (), ERASE_ARGUMENT_PACK(ULevelSequence*)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, GetMode, (), ERASE_ARGUMENT_PACK(ETakeRecorderPanelMode)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, GetSources, (), ERASE_ARGUMENT_PACK(UTakeRecorderSources*)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, GetTakeMetaData, (), ERASE_ARGUMENT_PACK(UTakeMetaData*)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, NewTake, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetFrameRate, (FFrameRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetFrameRateFromTimecode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetupForEditing, (UTakePreset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetupForRecording_LevelSequence, (ULevelSequence), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetupForRecording_TakePreset, (UTakePreset), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetupForRecordingInto_LevelSequence, (ULevelSequence), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, SetupForViewing, (ULevelSequence), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, StartRecording, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UTakeRecorderPanel, StopRecording, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URigVM, Execute, (FRigVMExtendedExecuteContext&, const FName& = NAME_None), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueBool, (const FName&, int = 0), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueDouble, (const FName&, int = 0), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueFloat, (const FName&, int = 0), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueInt, (const FName&, int = 0), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueName, (const FName&, int = 0), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueQuat, (const FName&, int = 0), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueString, (const FName&, int = 0), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueTransform, (const FName&, int = 0), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueVector, (const FName&, int = 0), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(URigVM, GetParameterValueVector2D, (const FName&, int = 0), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(URigVM, GetStatistics, (), ERASE_ARGUMENT_PACK(FRigVMStatistics)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueBool, (const FName&, bool, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueDouble, (const FName&, float, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueFloat, (const FName&, float32, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueInt, (const FName&, int, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueName, (const FName&, const FName&, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueQuat, (const FName&, const FQuat&, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueString, (const FName&, const FString&, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueTransform, (const FName&, const FTransform&, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueVector, (const FName&, const FVector&, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVM, SetParameterValueVector2D, (const FName&, const FVector2D&, int = 0), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDataAssetLink, GetDataAsset, (), ERASE_ARGUMENT_PACK(TSoftObjectPtr<UDataAsset>)) },
{ ERASE_METHOD_PTR(UDataAssetLink, SetDataAsset, (TSoftObjectPtr<UDataAsset>), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URigVMUserWorkflowOptions, IsValid, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMUserWorkflowOptions, ReportError, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMUserWorkflowOptions, ReportInfo, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMUserWorkflowOptions, ReportWarning, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMUserWorkflowOptions, RequiresDialog, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMHost, CanExecute, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMHost, Execute, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMHost, ExecuteEvent, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMHost, GetAbsoluteTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigVMHost, GetCurrentFramesPerSecond, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigVMHost, GetDeltaTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigVMHost, GetExtendedExecuteContext, (), ERASE_ARGUMENT_PACK(FRigVMExtendedExecuteContext&)) },
{ ERASE_METHOD_PTR(URigVMHost, GetScriptAccessibleVariables, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(URigVMHost, GetSupportedEvents, (), ERASE_ARGUMENT_PACK(const TArray<FName>&)) },
{ ERASE_METHOD_PTR(URigVMHost, GetVariableAsString, (const FName&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMHost, GetVariableType, (const FName&), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMHost, GetVM, (), ERASE_ARGUMENT_PACK(URigVM*)) },
{ ERASE_METHOD_PTR(URigVMHost, IsInitRequired, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMHost, RemoveRunOnceEvent, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMHost, RequestInit, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMHost, RequestRunOnceEvent, (const FName&, int = - 1), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMHost, SetAbsoluteAndDeltaTime, (float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMHost, SetAbsoluteTime, (float32, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMHost, SetDeltaTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMHost, SetFramesPerSecond, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMHost, SetVariableFromString, (const FName&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMHost, SupportsEvent, (const FName&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMBlueprint, AddMemberVariable, (const FName&, const FString&, bool = false, bool = false, FString = ""), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, AddModel, (FString = "Rig Graph", bool = true, bool = true), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, ChangeMemberVariableType, (const FName&, const FString&, bool = false, bool = false, FString = ""), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, CreateRigVMHost, (), ERASE_ARGUMENT_PACK(URigVMHost*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GeneratePythonCommands, (const FString), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetAllModels, (), ERASE_ARGUMENT_PACK(TArray<URigVMGraph>)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetAutoVMRecompile, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetAvailableRigVMStructs, (), ERASE_ARGUMENT_PACK(TArray<UStruct>)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetController, (const URigVMGraph = nullptr), ERASE_ARGUMENT_PACK(URigVMController*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetControllerByName, (const FString = ""), ERASE_ARGUMENT_PACK(URigVMController*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetDebuggedRigVMHost, (), ERASE_ARGUMENT_PACK(URigVMHost*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetDefaultModel, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetFocusedModel, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetLocalFunctionLibrary, (), ERASE_ARGUMENT_PACK(URigVMFunctionLibrary*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetMemberVariables, (), ERASE_ARGUMENT_PACK(TArray<FRigVMGraphVariableDescription>)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetModel, (const UEdGraph = nullptr), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetOrCreateController, (URigVMGraph = nullptr), ERASE_ARGUMENT_PACK(URigVMController*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, GetRigVMHostClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RecompileVM, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RecompileVMIfRequired, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RemoveMemberVariable, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RemoveModel, (FString = "Rig Graph", bool = true, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RenameMemberVariable, (const FName&, const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RequestAutoVMRecompilation, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, RequestRigVMInit, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, SetAutoVMRecompile, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMBlueprint, SuspendNotifications, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URigVMCompiler, Compile, (TArray<URigVMGraph>, URigVMController, URigVM), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMCompiler, CompileVM, (TArray<URigVMGraph>, URigVMController, URigVM, FRigVMExtendedExecuteContext&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMNode, CanBeUpgraded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, CanOnlyExistOnce, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, ExecutionIsHaltedAtThisNode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, FindFunctionForNode, (), ERASE_ARGUMENT_PACK(URigVMLibraryNode*)) },
{ ERASE_METHOD_PTR(URigVMNode, FindPin, (const FString&), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetAggregateInputs, (), ERASE_ARGUMENT_PACK(TArray<URigVMPin>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetAggregateOutputs, (), ERASE_ARGUMENT_PACK(TArray<URigVMPin>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetAllPinsRecursively, (), ERASE_ARGUMENT_PACK(TArray<URigVMPin>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetDecoratorPins, (), ERASE_ARGUMENT_PACK(TArray<URigVMPin>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetEventName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMNode, GetFirstAggregatePin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetGraphDepth, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMNode, GetInjectionInfo, (), ERASE_ARGUMENT_PACK(URigVMInjectionInfo*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetLinkedSourceNodes, (), ERASE_ARGUMENT_PACK(TArray<URigVMNode>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetLinkedTargetNodes, (), ERASE_ARGUMENT_PACK(TArray<URigVMNode>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetLinks, (), ERASE_ARGUMENT_PACK(TArray<URigVMLink>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetNextAggregateName, (const FName&), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMNode, GetNodeColor, (), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(URigVMNode, GetNodeIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMNode, GetNodePath, (bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMNode, GetNodeTitle, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMNode, GetOppositeAggregatePin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetOrphanedPins, (), ERASE_ARGUMENT_PACK(const TArray<URigVMPin>&)) },
{ ERASE_METHOD_PTR(URigVMNode, GetPins, (), ERASE_ARGUMENT_PACK(const TArray<URigVMPin>&)) },
{ ERASE_METHOD_PTR(URigVMNode, GetPosition, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(URigVMNode, GetPreviousFName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMNode, GetRootGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetSecondAggregatePin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMNode, GetSize, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(URigVMNode, GetSupportedWorkflows, (ERigVMUserWorkflowType, const UObject), ERASE_ARGUMENT_PACK(TArray<FRigVMUserWorkflow>)) },
{ ERASE_METHOD_PTR(URigVMNode, GetToolTipText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(URigVMNode, HasBreakpoint, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, HasInputPin, (bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, HasIOPin, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, HasLazyPin, (bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, HasOrphanedPins, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, HasOutputPin, (bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, HasPinOfDirection, (ERigVMPinDirection), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsAggregate, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsControlFlowNode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsDecoratorPin, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsDefinedAsConstant, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsDefinedAsVarying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsEvent, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsInjected, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsInputAggregate, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsLinkedTo, (URigVMNode), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsLoopNode, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsMutable, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsPure, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsSelected, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, IsVisibleInUI, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMNode, SetExecutionIsHaltedAtThisNode, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMNode, SetHasBreakpoint, (const bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URigVMTemplateNode, GetNotation, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMTemplateNode, GetScriptStruct, (), ERASE_ARGUMENT_PACK(UScriptStruct*)) },
{ ERASE_METHOD_PTR(URigVMTemplateNode, IsFullyUnresolved, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMTemplateNode, IsResolved, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMTemplateNode, IsSingleton, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMLibraryNode, GetContainedGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMLibraryNode, GetLibrary, (), ERASE_ARGUMENT_PACK(URigVMFunctionLibrary*)) },


{ ERASE_METHOD_PTR(UDEPRECATED_RigVMArrayNode, GetCPPType, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UDEPRECATED_RigVMArrayNode, GetCPPTypeObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UDEPRECATED_RigVMArrayNode, GetOpCode, (), ERASE_ARGUMENT_PACK(ERigVMOpCode)) },


{ ERASE_METHOD_PTR(URigVMCommentNode, GetCommentBubbleVisible, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMCommentNode, GetCommentColorBubble, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMCommentNode, GetCommentFontSize, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMCommentNode, GetCommentText, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(URigVMEnumNode, GetCPPType, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMEnumNode, GetCPPTypeObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(URigVMEnumNode, GetEnum, (), ERASE_ARGUMENT_PACK(UEnum*)) },


{ ERASE_METHOD_PTR(URigVMFunctionReferenceNode, GetReferencedFunctionHeader, (), ERASE_ARGUMENT_PACK(FRigVMGraphFunctionHeader)) },


{ ERASE_METHOD_PTR(URigVMInvokeEntryNode, GetEntryName, (), ERASE_ARGUMENT_PACK(FName)) },


{ ERASE_METHOD_PTR(URigVMParameterNode, GetCPPType, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMParameterNode, GetCPPTypeObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(URigVMParameterNode, GetDefaultValue, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMParameterNode, GetParameterDescription, (), ERASE_ARGUMENT_PACK(FRigVMGraphParameterDescription)) },
{ ERASE_METHOD_PTR(URigVMParameterNode, GetParameterName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMParameterNode, IsInput, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMUnitNode, GetMethodName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMUnitNode, GetStructDefaultValue, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(URigVMVariableNode, GetCPPType, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, GetCPPTypeObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, GetDefaultValue, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, GetVariableDescription, (), ERASE_ARGUMENT_PACK(FRigVMGraphVariableDescription)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, GetVariableName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, IsExternalVariable, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, IsGetter, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, IsInputArgument, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMVariableNode, IsLocalVariable, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMController, AddAggregatePin, (const FString&, const FString&, const FString& = "", bool = true, bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, AddArrayNode, (ERigVMOpCode, const FString&, UObject, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddArrayNodeFromObjectPath, (ERigVMOpCode, const FString&, const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddArrayPin, (const FString&, const FString& = "", bool = true, bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, AddBranchNode, (const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddCommentNode, (const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMCommentNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddDecorator, (const FName&, const FName&, const FName& = NAME_None, const FString& = "", int = - 1, bool = true, bool = false), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMController, AddEnumNode, (const FName&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMEnumNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddExposedPin, (const FName&, ERigVMPinDirection, const FString&, const FName&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMController, AddExternalFunctionReferenceNode, (const FString&, const FName&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMFunctionReferenceNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddFreeRerouteNode, (const FString&, const FName&, bool, const FName&, const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMRerouteNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddFunctionReferenceNode, (URigVMLibraryNode, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMFunctionReferenceNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddFunctionReferenceNodeFromDescription, (const FRigVMGraphFunctionHeader&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMFunctionReferenceNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddFunctionToLibrary, (const FName&, bool, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMLibraryNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddIfNode, (const FString&, const FName&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddIfNodeFromStruct, (UScriptStruct, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddInjectedNode, (const FString&, bool, UScriptStruct, const FName&, const FName&, const FName&, const FString& = "", bool = true, bool = false), ERASE_ARGUMENT_PACK(URigVMInjectionInfo*)) },
{ ERASE_METHOD_PTR(URigVMController, AddInjectedNodeFromStructPath, (const FString&, bool, const FString&, const FName&, const FName&, const FName&, const FString& = "", bool = true), ERASE_ARGUMENT_PACK(URigVMInjectionInfo*)) },
{ ERASE_METHOD_PTR(URigVMController, AddInvokeEntryNode, (const FName&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMInvokeEntryNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddLink, (const FString&, const FString&, bool = true, bool = false, ERigVMPinDirection = ERigVMPinDirection :: Output, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, AddLocalVariable, (const FName&, const FString&, UObject, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(FRigVMGraphVariableDescription)) },
{ ERASE_METHOD_PTR(URigVMController, AddLocalVariableFromObjectPath, (const FName&, const FString&, const FString&, const FString&, bool = true), ERASE_ARGUMENT_PACK(FRigVMGraphVariableDescription)) },
{ ERASE_METHOD_PTR(URigVMController, AddParameterNode, (const FName&, const FString&, UObject, bool, const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMParameterNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddParameterNodeFromObjectPath, (const FName&, const FString&, const FString&, bool, const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMParameterNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddRerouteNodeOnLink, (URigVMLink, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMRerouteNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddRerouteNodeOnLinkPath, (const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMRerouteNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddRerouteNodeOnPin, (const FString&, bool, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMRerouteNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddSelectNode, (const FString&, const FName&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddSelectNodeFromStruct, (UScriptStruct, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddTemplateNode, (const FName&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMTemplateNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddUnitNode, (UScriptStruct, const FName& = FName ( "" ), ERASE_ARGUMENT_PACK(URigVMUnitNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddUnitNodeFromStructPath, (const FString&, const FName& = FName ( "" ), ERASE_ARGUMENT_PACK(URigVMUnitNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddUnitNodeWithDefaults, (UScriptStruct, const FString&, const FName& = FName ( "" ), ERASE_ARGUMENT_PACK(URigVMUnitNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddVariableNode, (const FName&, const FString&, UObject, bool, const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMVariableNode*)) },
{ ERASE_METHOD_PTR(URigVMController, AddVariableNodeFromObjectPath, (const FName&, const FString&, const FString&, bool, const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(URigVMVariableNode*)) },
{ ERASE_METHOD_PTR(URigVMController, BindPinToVariable, (const FString&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, BreakAllLinks, (const FString&, bool = true, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, BreakLink, (const FString&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, CancelUndoBracket, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, CanImportNodesFromText, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, ChangeExposedPinType, (const FName&, const FString&, const FName&, bool&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, ClearArrayPin, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, ClearNodeSelection, (bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, CloseUndoBracket, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, CollapseNodes, (const TArray<FName>&, const FString& = "", bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(URigVMCollapseNode*)) },
{ ERASE_METHOD_PTR(URigVMController, DuplicateArrayPin, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, EjectNodeFromPin, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMController, EnableReporting, (bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMController, ExpandLibraryNode, (const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMNode>)) },
{ ERASE_METHOD_PTR(URigVMController, ExportNodesToText, (const TArray<FName>&, bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, ExportSelectedNodesToText, (bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, GeneratePythonCommands, (), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(URigVMController, GetControllerForGraph, (const URigVMGraph), ERASE_ARGUMENT_PACK(URigVMController*)) },
{ ERASE_METHOD_PTR(URigVMController, GetGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMController, GetPinDefaultValue, (const FString&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, GetSchema, (), ERASE_ARGUMENT_PACK(URigVMSchema*)) },
{ ERASE_METHOD_PTR(URigVMController, GetTopLevelGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMController, ImportNodesFromText, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(URigVMController, InsertArrayPin, (const FString&, int = - 1, const FString& = "", bool = true, bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMController, IsFunctionPublic, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, IsReportingEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, IsTransacting, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, LocalizeFunction, (const FRigVMGraphFunctionIdentifier&, bool = true, bool = true, bool = false), ERASE_ARGUMENT_PACK(URigVMLibraryNode*)) },
{ ERASE_METHOD_PTR(URigVMController, LocalizeFunctionFromPath, (const FString&, const FName&, bool = true, bool = true, bool = false), ERASE_ARGUMENT_PACK(URigVMLibraryNode*)) },
{ ERASE_METHOD_PTR(URigVMController, LocalizeFunctions, (TArray<FRigVMGraphFunctionIdentifier>, bool = true, bool = true, bool = false), ERASE_ARGUMENT_PACK(TMap<FRigVMGraphFunctionIdentifier,URigVMLibraryNode>)) },
{ ERASE_METHOD_PTR(URigVMController, MakeBindingsFromVariableNode, (const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, MakeOptionsForWorkflow, (UObject, const FRigVMUserWorkflow&), ERASE_ARGUMENT_PACK(URigVMUserWorkflowOptions*)) },
{ ERASE_METHOD_PTR(URigVMController, MakeVariableNodeFromBinding, (const FString&, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, MarkFunctionAsPublic, (const FName&, bool, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, OpenUndoBracket, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, PerformUserWorkflow, (const FRigVMUserWorkflow&, const URigVMUserWorkflowOptions, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, PopGraph, (bool = true), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMController, PromoteCollapseNodeToFunctionReferenceNode, (const FName&, bool = true, bool = false, const FString& = ""), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMController, PromoteFunctionReferenceNodeToCollapseNode, (const FName&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMController, PromotePinToVariable, (const FString&, bool, const FVector2D& = FVector2D ( ), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, PushGraph, (URigVMGraph, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, Redo, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RefreshVariableNode, (const FName&, const FName&, const FString&, UObject, bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveAggregatePin, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveArrayPin, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveDecorator, (const FName&, const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveExposedPin, (const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveFunctionFromLibrary, (const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveInjectedNode, (const FString&, bool, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveLocalVariable, (const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveNode, (URigVMNode, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveNodeByName, (const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveNodes, (TArray<URigVMNode>, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RemoveNodesByName, (const TArray<FName>&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RenameExposedPin, (const FName&, const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RenameFunction, (const FName&, const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RenameLocalVariable, (const FName&, const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RenameNode, (URigVMNode, const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RenameParameter, (const FName&, const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, RenameVariable, (const FName&, const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, ReplaceParameterNodeWithVariable, (const FName&, const FName&, const FString&, UObject, bool), ERASE_ARGUMENT_PACK(URigVMVariableNode*)) },
{ ERASE_METHOD_PTR(URigVMController, ResetPinDefaultValue, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, ResolveWildCardPin, (const FString&, const FString&, const FName&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SelectNode, (URigVMNode, bool = true, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SelectNodeByName, (const FName&, bool = true, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetArrayPinSize, (const FString&, int, const FString& = "", bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetCommentText, (URigVMNode, const FString&, const int&, const bool&, const bool&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetCommentTextByName, (const FName&, const FString&, const int&, const bool&, const bool&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetExposedPinIndex, (const FName&, int, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetGraph, (URigVMGraph), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMController, SetIsRunningUnitTest, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMController, SetLocalVariableDefaultValue, (const FName&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetLocalVariableType, (const FName&, const FString&, UObject, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetLocalVariableTypeFromObjectPath, (const FName&, const FString&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeCategory, (URigVMCollapseNode, const FString&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeCategoryByName, (const FName&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeColor, (URigVMNode, const FLinearColor&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeColorByName, (const FName&, const FLinearColor&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeDescription, (URigVMCollapseNode, const FString&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeDescriptionByName, (const FName&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeKeywords, (URigVMCollapseNode, const FString&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeKeywordsByName, (const FName&, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodePosition, (URigVMNode, const FVector2D&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodePositionByName, (const FName&, const FVector2D&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeSelection, (const TArray<FName>&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeSize, (URigVMNode, const FVector2D&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetNodeSizeByName, (const FName&, const FVector2D&, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetPinDefaultValue, (const FString&, const FString&, bool = true, bool = true, bool = false, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetPinExpansion, (const FString&, bool, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetPinIsWatched, (const FString&, bool, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetRemappedVariable, (URigVMFunctionReferenceNode, const FName&, const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, SetSchema, (URigVMSchema), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigVMController, SetUnitNodeDefaults, (URigVMUnitNode, const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, UnbindPinFromVariable, (const FString&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, Undo, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, UnresolveTemplateNodes, (const TArray<FName>&, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMController, UpgradeNodes, (const TArray<FName>&, bool = true, bool = true, bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMNode>)) },


{ ERASE_METHOD_PTR(URigVMGraph, ContainsLink, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMGraph, FindLink, (const FString&), ERASE_ARGUMENT_PACK(URigVMLink*)) },
{ ERASE_METHOD_PTR(URigVMGraph, FindNode, (const FString&), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMGraph, FindNodeByName, (const FName&), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMGraph, FindPin, (const FString&), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetContainedGraphs, (bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMGraph>)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetDefaultFunctionLibrary, (), ERASE_ARGUMENT_PACK(URigVMFunctionLibrary*)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetEntryNode, (), ERASE_ARGUMENT_PACK(URigVMFunctionEntryNode*)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetEventNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetGraphDepth, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetGraphName, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetInputArguments, (), ERASE_ARGUMENT_PACK(TArray<FRigVMGraphVariableDescription>)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetLinks, (), ERASE_ARGUMENT_PACK(const TArray<URigVMLink>&)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetLocalVariables, (bool = false), ERASE_ARGUMENT_PACK(TArray<FRigVMGraphVariableDescription>)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetNodePath, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetNodes, (), ERASE_ARGUMENT_PACK(const TArray<URigVMNode>&)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetOutputArguments, (), ERASE_ARGUMENT_PACK(TArray<FRigVMGraphVariableDescription>)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetParentGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetReturnNode, (), ERASE_ARGUMENT_PACK(URigVMFunctionReturnNode*)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetRootGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetSelectNodes, (), ERASE_ARGUMENT_PACK(const TArray<FName>&)) },
{ ERASE_METHOD_PTR(URigVMGraph, GetVariableDescriptions, (), ERASE_ARGUMENT_PACK(TArray<FRigVMGraphVariableDescription>)) },
{ ERASE_METHOD_PTR(URigVMGraph, IsNodeSelected, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMGraph, IsRootGraph, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMGraph, IsTopLevelGraph, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMGraph, SetDefaultFunctionLibrary, (URigVMFunctionLibrary), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URigVMFunctionLibrary, FindFunction, (const FName&), ERASE_ARGUMENT_PACK(URigVMLibraryNode*)) },
{ ERASE_METHOD_PTR(URigVMFunctionLibrary, FindFunctionForNode, (URigVMNode), ERASE_ARGUMENT_PACK(URigVMLibraryNode*)) },
{ ERASE_METHOD_PTR(URigVMFunctionLibrary, GetFunctions, (), ERASE_ARGUMENT_PACK(TArray<URigVMLibraryNode>)) },
{ ERASE_METHOD_PTR(URigVMFunctionLibrary, GetReferencePathsForFunction, (const FName&), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(URigVMFunctionLibrary, GetReferencesForFunction, (const FName&), ERASE_ARGUMENT_PACK(TArray<TSoftObjectPtr<URigVMFunctionReferenceNode>>)) },


{ ERASE_METHOD_PTR(URigVMLink, GetGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMLink, GetGraphDepth, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMLink, GetLinkIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMLink, GetOppositePin, (const URigVMPin), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMLink, GetPinPathRepresentation, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMLink, GetSourceNode, (), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMLink, GetSourcePin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMLink, GetTargetNode, (), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMLink, GetTargetPin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },


{ ERASE_METHOD_PTR(URigVMInjectionInfo, GetGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMInjectionInfo, GetPin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },


{ ERASE_METHOD_PTR(URigVMPin, ContainsWildCardSubPin, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, FindLinkForPin, (const URigVMPin), ERASE_ARGUMENT_PACK(URigVMLink*)) },
{ ERASE_METHOD_PTR(URigVMPin, FindSubPin, (const FString&), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetAbsolutePinIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMPin, GetArrayElementCppType, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetArraySize, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMPin, GetCPPType, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetCPPTypeObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetCustomWidgetName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMPin, GetDefaultValue, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetDirection, (), ERASE_ARGUMENT_PACK(ERigVMPinDirection)) },
{ ERASE_METHOD_PTR(URigVMPin, GetDisplayName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigVMPin, GetEnum, (), ERASE_ARGUMENT_PACK(UEnum*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetGraph, (), ERASE_ARGUMENT_PACK(URigVMGraph*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetLinkedSourcePins, (bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMPin>)) },
{ ERASE_METHOD_PTR(URigVMPin, GetLinkedTargetPins, (bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMPin>)) },
{ ERASE_METHOD_PTR(URigVMPin, GetLinks, (), ERASE_ARGUMENT_PACK(const TArray<URigVMLink>&)) },
{ ERASE_METHOD_PTR(URigVMPin, GetMetaData, (FName), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetNode, (), ERASE_ARGUMENT_PACK(URigVMNode*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetOriginalPinFromInjectedNode, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetParentPin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetPinForLink, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetPinIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMPin, GetPinPath, (bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetRootPin, (), ERASE_ARGUMENT_PACK(URigVMPin*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetScriptStruct, (), ERASE_ARGUMENT_PACK(UScriptStruct*)) },
{ ERASE_METHOD_PTR(URigVMPin, GetSegmentPath, (bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetSourceLinks, (bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMLink>)) },
{ ERASE_METHOD_PTR(URigVMPin, GetSubPinPath, (const URigVMPin, bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigVMPin, GetSubPins, (), ERASE_ARGUMENT_PACK(const TArray<URigVMPin>&)) },
{ ERASE_METHOD_PTR(URigVMPin, GetTargetLinks, (bool = false), ERASE_ARGUMENT_PACK(TArray<URigVMLink>)) },
{ ERASE_METHOD_PTR(URigVMPin, GetToolTipText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(URigVMPin, IsArray, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsArrayElement, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsDecoratorPin, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsDefinedAsConstant, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsDynamicArray, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsEnum, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsExecuteContext, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsExpanded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsFixedSizeArray, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsInterface, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsLazy, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsLinkedTo, (const URigVMPin), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsReferenceCountedContainer, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsRootPin, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsStringType, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsStruct, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsStructMember, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsUObject, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, IsWildCard, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, RequiresWatch, (const bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, ShouldHideSubPins, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigVMPin, ShouldOnlyShowSubPins, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigVMUserWorkflowRegistry, GetWorkflows, (ERigVMUserWorkflowType, const UScriptStruct, const UObject), ERASE_ARGUMENT_PACK(TArray<FRigVMUserWorkflow>)) },
{ ERASE_METHOD_PTR(URigVMUserWorkflowRegistry, RegisterProvider, (const UScriptStruct, FRigVMUserWorkflowProvider = FRigVMUserWorkflowProvider ( ), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigVMUserWorkflowRegistry, UnregisterProvider, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UControlRigShapeLibraryLink, GetShapeLibrary, (), ERASE_ARGUMENT_PACK(TSoftObjectPtr<UControlRigShapeLibrary>)) },
{ ERASE_METHOD_PTR(UControlRigShapeLibraryLink, SetShapeLibrary, (TSoftObjectPtr<UControlRigShapeLibrary>), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UControlRig, ClearControlSelection, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRig, CreateTransformableControlHandle, (const FName&), ERASE_ARGUMENT_PACK(UTransformableControlHandle*)) },
{ ERASE_METHOD_PTR(UControlRig, CurrentControlSelection, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UControlRig, GetHierarchy, (), ERASE_ARGUMENT_PACK(URigHierarchy*)) },
{ ERASE_METHOD_PTR(UControlRig, GetHostingActor, (), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(UControlRig, GetInteractionRig, (), ERASE_ARGUMENT_PACK(UControlRig*)) },
{ ERASE_METHOD_PTR(UControlRig, GetInteractionRigClass, (), ERASE_ARGUMENT_PACK(TSubclassOf<UControlRig>)) },
{ ERASE_METHOD_PTR(UControlRig, IsControlSelected, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRig, RequestConstruction, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRig, SelectControl, (const FName&, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRig, SetInteractionRig, (UControlRig), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRig, SetInteractionRigClass, (TSubclassOf<UControlRig>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRig, SupportsBackwardsSolve, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigHierarchy, Contains, (FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, CopyHierarchy, (URigHierarchy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, CopyPose, (URigHierarchy, bool, bool, bool, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, FindBone, (const FRigElementKey&), ERASE_ARGUMENT_PACK(FRigBoneElement)) },
{ ERASE_METHOD_PTR(URigHierarchy, FindControl, (const FRigElementKey&), ERASE_ARGUMENT_PACK(FRigControlElement)) },
{ ERASE_METHOD_PTR(URigHierarchy, FindNull, (const FRigElementKey&), ERASE_ARGUMENT_PACK(FRigNullElement)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetAllKeys, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetBones, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetBoolArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<bool>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetBoolMetadata, (FRigElementKey, FName, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetChildren, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetConnectors, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetConnectorStates, (), ERASE_ARGUMENT_PACK(TArray<FRigConnectorState>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControls, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetController, (bool = true), ERASE_ARGUMENT_PACK(URigHierarchyController*)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlPreferredEulerAngles, (FRigElementKey, EEulerRotationOrder, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlPreferredEulerAnglesByIndex, (int, EEulerRotationOrder, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlPreferredEulerRotationOrder, (FRigElementKey, bool = true), ERASE_ARGUMENT_PACK(EEulerRotationOrder)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlPreferredEulerRotationOrderByIndex, (int, bool = true), ERASE_ARGUMENT_PACK(EEulerRotationOrder)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlPreferredRotator, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlPreferredRotatorByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlValue, (FRigElementKey, ERigControlValueType = ERigControlValueType :: Current), ERASE_ARGUMENT_PACK(FRigControlValue)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetControlValueByIndex, (int, ERigControlValueType = ERigControlValueType :: Current), ERASE_ARGUMENT_PACK(FRigControlValue)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetCurves, (), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetCurveValue, (FRigElementKey), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetCurveValueByIndex, (int), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetDefaultParent, (FRigElementKey), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetFirstParent, (FRigElementKey), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetFloatArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<float>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetFloatMetadata, (FRigElementKey, FName, float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetGlobalControlOffsetTransform, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetGlobalControlOffsetTransformByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetGlobalControlShapeTransform, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetGlobalControlShapeTransformByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetGlobalTransform, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetGlobalTransformByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetIndex, (FRigElementKey), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetInt32ArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<int>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetInt32Metadata, (FRigElementKey, FName, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetKey, (int), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetKeys, (const TArray<int>), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLinearColorArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FLinearColor>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLinearColorMetadata, (FRigElementKey, FName, FLinearColor), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLocalControlShapeTransform, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLocalControlShapeTransformByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLocalIndex, (FRigElementKey), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLocalTransform, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetLocalTransformByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetMetadataNames, (FRigElementKey), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetMetadataType, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(ERigMetadataType)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetModulePath, (FRigElementKey), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetModulePathFName, (FRigElementKey), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetNameArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetNameMetadata, (FRigElementKey, FName, FName), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetNameSpace, (FRigElementKey), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetNameSpaceFName, (FRigElementKey), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetNulls, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetNumberOfParents, (FRigElementKey), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetParents, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetParentTransform, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetParentTransformByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetParentWeight, (FRigElementKey, FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(FRigElementWeight)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetParentWeightArray, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementWeight>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetPose, (bool = false, bool = true), ERASE_ARGUMENT_PACK(FRigPose)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetPreviousName, (const FRigElementKey&), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetPreviousParent, (const FRigElementKey&), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetQuatArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FQuat>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetQuatMetadata, (FRigElementKey, FName, FQuat), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetReferences, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRigElementKeyArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRigElementKeyMetadata, (FRigElementKey, FName, FRigElementKey), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRigidBodies, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRootElements, (), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRotatorArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FRotator>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRotatorMetadata, (FRigElementKey, FName, FRotator), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetRuleManager, (bool = true), ERASE_ARGUMENT_PACK(UModularRigRuleManager*)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetSelectedKeys, (ERigElementType = ERigElementType :: All), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetSockets, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetSocketStates, (), ERASE_ARGUMENT_PACK(TArray<FRigSocketState>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetTags, (FRigElementKey), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetTransformArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FTransform>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetTransformMetadata, (FRigElementKey, FName, FTransform), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetVectorArrayMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(TArray<FVector>)) },
{ ERASE_METHOD_PTR(URigHierarchy, GetVectorMetadata, (FRigElementKey, FName, FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(URigHierarchy, HasTag, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsControllerAvailable, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsCurveValueSet, (FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsCurveValueSetByIndex, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsParentedTo, (FRigElementKey, FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsProcedural, (const FRigElementKey&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsSelected, (FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsSelectedByIndex, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, IsValidIndex, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, Num, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(URigHierarchy, RemoveAllMetadata, (FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, RemoveMetadata, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, Reset, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, ResetCurveValues, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, ResetPoseToInitial, (ERigElementType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, ResetToDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, RestoreConnectorsFromStates, (TArray<FRigConnectorState>, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, RestoreSocketsFromStates, (TArray<FRigSocketState>, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, SendAutoKeyEvent, (FRigElementKey, float32 = 0.000000, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetBoolArrayMetadata, (FRigElementKey, FName, TArray<bool>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetBoolMetadata, (FRigElementKey, FName, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetConnectorSettings, (FRigElementKey, FRigConnectorSettings, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetConnectorSettingsByIndex, (int, FRigConnectorSettings, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlOffsetTransform, (FRigElementKey, FTransform, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlOffsetTransformByIndex, (int, FTransform, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlPreferredEulerAngles, (FRigElementKey, const FVector&, EEulerRotationOrder, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlPreferredEulerAnglesByIndex, (int, const FVector&, EEulerRotationOrder, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlPreferredRotationOrder, (FRigElementKey, EEulerRotationOrder), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlPreferredRotationOrderByIndex, (int, EEulerRotationOrder), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlPreferredRotator, (FRigElementKey, const FRotator&, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlPreferredRotatorByIndex, (int, const FRotator&, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlSettings, (FRigElementKey, FRigControlSettings, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlSettingsByIndex, (int, FRigControlSettings, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlShapeTransform, (FRigElementKey, FTransform, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlShapeTransformByIndex, (int, FTransform, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlValue, (FRigElementKey, FRigControlValue, ERigControlValueType = ERigControlValueType :: Current, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlValueByIndex, (int, FRigControlValue, ERigControlValueType = ERigControlValueType :: Current, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlVisibility, (FRigElementKey, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetControlVisibilityByIndex, (int, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetCurveValue, (FRigElementKey, float32, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetCurveValueByIndex, (int, float32, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetFloatArrayMetadata, (FRigElementKey, FName, TArray<float32>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetFloatMetadata, (FRigElementKey, FName, float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetGlobalTransform, (FRigElementKey, FTransform, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetGlobalTransformByIndex, (int, FTransform, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetInt32ArrayMetadata, (FRigElementKey, FName, TArray<int>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetInt32Metadata, (FRigElementKey, FName, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetLinearColorArrayMetadata, (FRigElementKey, FName, TArray<FLinearColor>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetLinearColorMetadata, (FRigElementKey, FName, FLinearColor), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetLocalTransform, (FRigElementKey, FTransform, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetLocalTransformByIndex, (int, FTransform, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetNameArrayMetadata, (FRigElementKey, FName, TArray<FName>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetNameMetadata, (FRigElementKey, FName, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetParentWeight, (FRigElementKey, FRigElementKey, FRigElementWeight, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetParentWeightArray, (FRigElementKey, TArray<FRigElementWeight>, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetPose, (FRigPose), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetQuatArrayMetadata, (FRigElementKey, FName, TArray<FQuat>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetQuatMetadata, (FRigElementKey, FName, FQuat), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetRigElementKeyArrayMetadata, (FRigElementKey, FName, TArray<FRigElementKey>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetRigElementKeyMetadata, (FRigElementKey, FName, FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetRotatorArrayMetadata, (FRigElementKey, FName, TArray<FRotator>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetRotatorMetadata, (FRigElementKey, FName, FRotator), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetTag, (FRigElementKey, FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetTransformArrayMetadata, (FRigElementKey, FName, TArray<FTransform>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetTransformMetadata, (FRigElementKey, FName, FTransform), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetVectorArrayMetadata, (FRigElementKey, FName, TArray<FVector>), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SetVectorMetadata, (FRigElementKey, FName, FVector), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SortKeys, (const TArray<FRigElementKey>&), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchy, SwitchToDefaultParent, (FRigElementKey, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SwitchToParent, (FRigElementKey, FRigElementKey, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, SwitchToWorldSpace, (FRigElementKey, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchy, UnsetCurveValue, (FRigElementKey, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchy, UnsetCurveValueByIndex, (int, bool = false), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UControlRigComponent, AddMappedCompleteSkeletalMesh, (USkeletalMeshComponent, const EControlRigComponentMapDirection = EControlRigComponentMapDirection :: Output), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, AddMappedComponents, (TArray<FControlRigComponentMappedComponent>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, AddMappedElements, (TArray<FControlRigComponentMappedElement>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, AddMappedSkeletalMesh, (USkeletalMeshComponent, TArray<FControlRigComponentMappedBone>, TArray<FControlRigComponentMappedCurve>, const EControlRigComponentMapDirection = EControlRigComponentMapDirection :: Output), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, CanExecute, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigComponent, ClearMappedElements, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, DoesElementExist, (FName, ERigElementType = ERigElementType :: Bone), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetAbsoluteTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetBoneTransform, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlBool, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlFloat, (FName), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlInt, (FName), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlOffset, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlPosition, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: LocalSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlRig, (), ERASE_ARGUMENT_PACK(UControlRig*)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlRotator, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: LocalSpace), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlScale, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: LocalSpace), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlTransform, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlVector2D, (FName), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetElementNames, (ERigElementType = ERigElementType :: Bone), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetInitialBoneTransform, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetInitialSpaceTransform, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetSpaceTransform, (FName, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(UControlRigComponent, Initialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, OnPostConstruction, (UControlRigComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, OnPostForwardsSolve, (UControlRigComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, OnPostInitialize, (UControlRigComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, OnPreConstruction, (UControlRigComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, OnPreForwardsSolve, (UControlRigComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, OnPreInitialize, (UControlRigComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetBoneInitialTransformsFromSkeletalMesh, (USkeletalMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetBoneTransform, (FName, FTransform, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace, float32 = 1.000000, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlBool, (FName, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlFloat, (FName, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlInt, (FName, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlOffset, (FName, FTransform, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlPosition, (FName, FVector, EControlRigComponentSpace = EControlRigComponentSpace :: LocalSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlRigClass, (TSubclassOf<UControlRig>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlRotator, (FName, FRotator, EControlRigComponentSpace = EControlRigComponentSpace :: LocalSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlScale, (FName, FVector, EControlRigComponentSpace = EControlRigComponentSpace :: LocalSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlTransform, (FName, FTransform, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetControlVector2D, (FName, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetInitialBoneTransform, (FName, FTransform, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetInitialSpaceTransform, (FName, FTransform, EControlRigComponentSpace = EControlRigComponentSpace :: RigSpace), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetMappedElements, (TArray<FControlRigComponentMappedElement>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, SetObjectBinding, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, Update, (float32 = 0.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigComponent, GetControlRigClass, (), ERASE_ARGUMENT_PACK(const TSubclassOf<UControlRig>&)) },


{ ERASE_METHOD_PTR(AControlRigControlActor, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigControlActor, Refresh, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigControlActor, ResetControlActor, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AControlRigShapeActor, GetGlobalTransform, (), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, IsEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, IsHovered, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, IsSelectedInEditor, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, OnEnabledChanged, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, OnHoveredChanged, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, OnManipulatingChanged, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, OnSelectionChanged, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, OnTransformChanged, (const FTransform&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetGlobalTransform, (const FTransform&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetHovered, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetSelectable, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetSelected, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, GetbSelected, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetbSelected, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, GetbHovered, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AControlRigShapeActor, SetbHovered, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UControlRigTestData, GetFrameIndexForTime, (float, bool = false), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UControlRigTestData, GetPlaybackMode, (), ERASE_ARGUMENT_PACK(EControlRigTestDataPlaybackMode)) },
{ ERASE_METHOD_PTR(UControlRigTestData, GetTimeRange, (bool = false), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UControlRigTestData, IsRecording, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigTestData, IsReplaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigTestData, Record, (UControlRig, float = 0.000000), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigTestData, ReleaseReplay, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigTestData, SetupReplay, (UControlRig, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UModularRigController, AddModule, (const FName&, TSubclassOf<UControlRig>, const FString&, bool = true), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UModularRigController, AutoConnectModules, (const TArray<FString>&, bool, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, AutoConnectSecondaryConnectors, (const TArray<FRigElementKey>&, bool, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, BindModuleVariable, (const FString&, const FName&, const FString&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, CanConnectConnectorToElement, (const FRigElementKey&, const FRigElementKey&, FText&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, ConnectConnectorToElement, (const FRigElementKey&, const FRigElementKey&, bool = true, bool = true, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, DeleteModule, (const FString&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, DisconnectConnector, (const FRigElementKey&, bool = false, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, DisconnectCyclicConnectors, (bool = true), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(UModularRigController, MirrorModule, (const FString&, const FRigVMMirrorSettings&, bool = true), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UModularRigController, RenameModule, (const FString&, const FName&, bool = true), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UModularRigController, ReparentModule, (const FString&, const FString&, bool = true), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UModularRigController, SetConfigValueInModule, (const FString&, const FName&, const FString&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, SetModuleShortName, (const FString&, const FString&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularRigController, UnBindModuleVariable, (const FString&, const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URigHierarchyController, AddAnimationChannel, (FName, FRigElementKey, FRigControlSettings, bool = true, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddBone, (FName, FRigElementKey, FTransform, bool = true, ERigBoneType = ERigBoneType :: User, bool = false, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddConnector, (FName, FRigConnectorSettings, bool = false, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddControl, (FName, FRigElementKey, FRigControlSettings, FRigControlValue, bool = true, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddCurve, (FName, float32 = 0.000000, bool = true, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddNull, (FName, FRigElementKey, FTransform, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddParent, (FRigElementKey, FRigElementKey, float32 = 0.000000, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddRigidBody, (FName, FRigElementKey, FRigRigidBodySettings, FTransform, bool = false, bool = false), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, AddSocket, (FName, FRigElementKey, FTransform, bool = true, const FLinearColor& = FLinearColor ( 1.000000 , 1.000000 , 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ClearSelection, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, DeselectElement, (FRigElementKey), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, DuplicateElements, (TArray<FRigElementKey>, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ExportSelectionToText, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ExportToText, (TArray<FRigElementKey>), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(URigHierarchyController, GeneratePythonCommands, (), ERASE_ARGUMENT_PACK(TArray<FString>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, GetControlSettings, (FRigElementKey), ERASE_ARGUMENT_PACK(FRigControlSettings)) },
{ ERASE_METHOD_PTR(URigHierarchyController, GetHierarchy, (), ERASE_ARGUMENT_PACK(URigHierarchy*)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ImportBones, (USkeleton, FName = NAME_None, bool = true, bool = true, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ImportBonesFromAsset, (FString, FName = NAME_None, bool = true, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ImportCurves, (USkeleton, FName = NAME_None, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ImportCurvesFromAsset, (FString, FName = NAME_None, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ImportFromText, (FString, bool = false, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, MirrorElements, (TArray<FRigElementKey>, FRigVMMirrorSettings, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(TArray<FRigElementKey>)) },
{ ERASE_METHOD_PTR(URigHierarchyController, RemoveAllParents, (FRigElementKey, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, RemoveElement, (FRigElementKey, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, RemoveParent, (FRigElementKey, FRigElementKey, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, RenameElement, (FRigElementKey, FName, bool = false, bool = false, bool = true), ERASE_ARGUMENT_PACK(FRigElementKey)) },
{ ERASE_METHOD_PTR(URigHierarchyController, ReorderElement, (FRigElementKey, int, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, SelectElement, (FRigElementKey, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, SetControlSettings, (FRigElementKey, FRigControlSettings, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, SetDisplayName, (FRigElementKey, FName, bool = false, bool = false, bool = false), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(URigHierarchyController, SetHierarchy, (URigHierarchy), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URigHierarchyController, SetParent, (FRigElementKey, FRigElementKey, bool = true, bool = false, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(URigHierarchyController, SetSelection, (const TArray<FRigElementKey>&, bool = false), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UControlRigPoseAsset, DoesMirrorMatch, (UControlRig, const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigPoseAsset, GetControlNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UControlRigPoseAsset, GetCurrentPose, (UControlRig, FControlRigControlPose&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigPoseAsset, PastePose, (UControlRig, bool = false, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigPoseAsset, ReplaceControlName, (const FName&, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigPoseAsset, SavePose, (UControlRig, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigPoseAsset, SelectControls, (UControlRig, bool = false), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UControlRigWorkflowOptions, EnsureAtLeastOneRigElementSelected, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UPyTestObject, CallFuncBlueprintImplementable, (const int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestObject, CallFuncBlueprintImplementablePackedGetter, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPyTestObject, CallFuncBlueprintNative, (const int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestObject, CallFuncBlueprintNativeRef, (FPyTestStruct&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, DelegatePropertyCallback, (const int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncBlueprintImplementable, (const int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncBlueprintImplementablePackedGetter, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncBlueprintNative, (const int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncBlueprintNativeRef, (FPyTestStruct&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncTakingPyTestChildStruct, (const FPyTestChildStruct&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncTakingPyTestDelegate, (const FPyTestDelegate&, const int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncTakingPyTestStruct, (const FPyTestStruct&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, FuncTakingPyTestStructDefault, (const FPyTestStruct&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, LegacyFuncTakingPyTestStruct, (const FPyTestStruct&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, MulticastDelegatePropertyCallback, (FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPyTestObject, SetName, (const FName&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckArrayTypeHints, (const TArray<FString>&, const TArray<FName>&, const TArray<FText>&, const TArray<UObject*>&), ERASE_ARGUMENT_PACK(TArray<FText>)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckBoolTypeHints, (bool, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckDelegateTypeHints, (const FPyTestDelegate& = FPyTestDelegate ( ), ERASE_ARGUMENT_PACK(FPyTestDelegate&)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckEnumTypeHints, (EPyTestEnum, EPyTestEnum = EPyTestEnum :: One), ERASE_ARGUMENT_PACK(EPyTestEnum)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckFloatTypeHints, (float32, float, float32 = - 3.300000, float = 4.400000), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckIntegerTypeHints, (uint8, int = 4, int64 = 5), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckMapTypeHints, (const TMap<int,FString>&, const TMap<int,FName>&, const TMap<int,FText>&, const TMap<int,UObject>&), ERASE_ARGUMENT_PACK(TMap<FString,UObject>)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckNameTypeHints, (const FName&, const FName& = FName ( "" ), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckObjectTypeHints, (const UPyTestObject, const UPyTestObject = nullptr), ERASE_ARGUMENT_PACK(UPyTestObject*)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckSetTypeHints, (const TSet<FString>&, const TSet<FName>&, const TSet<UObject>&), ERASE_ARGUMENT_PACK(TSet<FName>)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckStringTypeHints, (const FString&, const FString& = "Hi"), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckStructTypeHints, (const FPyTestStruct&, const FPyTestStruct&), ERASE_ARGUMENT_PACK(FPyTestStruct)) },
{ ERASE_METHOD_PTR(UPyTestTypeHint, CheckTextTypeHints, (const FText&, const FText&), ERASE_ARGUMENT_PACK(FText)) },


{ ERASE_METHOD_PTR(UAnimationSharingStateProcessor, GetAnimationStateEnum, (), ERASE_ARGUMENT_PACK(UEnum*)) },
{ ERASE_METHOD_PTR(UAnimationSharingStateProcessor, ProcessActorState, (int&, AActor, uint8, uint8, bool&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAnimationSharingStateProcessor, SetAnimationStateEnum, (const TSoftObjectPtr<UEnum>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimSharingStateInstance, GetInstancedActors, (TArray<AActor*>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimationSharingManager, RegisterActorWithSkeletonBP, (AActor, const USkeleton), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, InitAccess, (FNiagaraDataChannelSearchParameters, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, Num, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadBool, (FName, int, bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadEnum, (FName, int, bool&), ERASE_ARGUMENT_PACK(uint328)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadFloat, (FName, int, bool&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadID, (FName, int, bool&), ERASE_ARGUMENT_PACK(FNiagaraID)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadInt, (FName, int, bool&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadLinearColor, (FName, int, bool&), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadPosition, (FName, int, bool&), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadQuat, (FName, int, bool&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadSpawnInfo, (FName, int, bool&), ERASE_ARGUMENT_PACK(FNiagaraSpawnInfo)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadVector, (FName, int, bool&), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadVector2D, (FName, int, bool&), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelReader, ReadVector4, (FName, int, bool&), ERASE_ARGUMENT_PACK(FVector4)) },


{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, InitWrite, (FNiagaraDataChannelSearchParameters, int, bool, bool, bool, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, Num, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteBool, (FName, int, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteEnum, (FName, int, uint8), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteFloat, (FName, int, float), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteID, (FName, int, FNiagaraID), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteInt, (FName, int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteLinearColor, (FName, int, FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WritePosition, (FName, int, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteQuat, (FName, int, FQuat), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteSpawnInfo, (FName, int, FNiagaraSpawnInfo), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteVector, (FName, int, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteVector2D, (FName, int, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelWriter, WriteVector4, (FName, int, FVector4), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataChannelHandler, GetDataChannelReader, (), ERASE_ARGUMENT_PACK(UNiagaraDataChannelReader*)) },
{ ERASE_METHOD_PTR(UNiagaraDataChannelHandler, GetDataChannelWriter, (), ERASE_ARGUMENT_PACK(UNiagaraDataChannelWriter*)) },


{ ERASE_METHOD_PTR(UNiagaraStatelessModule, SetbModuleEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraStatelessModule, SetbDebugDrawEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraStatelessModule_DynamicMaterialParameters, SetbParameter0XEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraStatelessModule_DynamicMaterialParameters, SetbParameter0YEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraStatelessModule_DynamicMaterialParameters, SetbParameter0ZEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraStatelessModule_DynamicMaterialParameters, SetbParameter0WEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ANiagaraActor, GetDestroyOnSystemFinish, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ANiagaraActor, SetDestroyOnSystemFinish, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraBakerOutputTexture2D, SetbGenerateAtlas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerOutputTexture2D, SetbGenerateFrames, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerOutputTexture2D, SetbExportFrames, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerOutputTexture2D, SetbSetTextureAddressX, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerOutputTexture2D, SetbSetTextureAddressY, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraBakerOutputVolumeTexture, SetbGenerateAtlas, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerOutputVolumeTexture, SetbGenerateFrames, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerOutputVolumeTexture, SetbExportFrames, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraBakerSettings, SetbLockToSimulationFrameRate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerSettings, SetbPreviewLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBakerSettings, SetbRenderComponentOnly, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraComponent, AdvanceSimulation, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, AdvanceSimulationByTime, (float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, ClearEmitterFixedBounds, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, ClearSimCache, (bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, ClearSystemFixedBounds, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetAgeUpdateMode, (), ERASE_ARGUMENT_PACK(ENiagaraAgeUpdateMode)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetAllowScalability, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetAsset, (), ERASE_ARGUMENT_PACK(UNiagaraSystem*)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetCustomTimeDilation, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetDataInterface, (const FString&), ERASE_ARGUMENT_PACK(UNiagaraDataInterface*)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetDesiredAge, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetEmitterFixedBounds, (FName), ERASE_ARGUMENT_PACK(FBox)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetForceLocalPlayerEffect, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetForceSolo, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetLockDesiredAgeDeltaTimeToSeekDelta, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetMaxSimTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetOcclusionQueryMode, (), ERASE_ARGUMENT_PACK(ENiagaraOcclusionQueryMode)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetPreviewLODDistance, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetPreviewLODDistanceEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetRandomSeedOffset, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetSeekDelta, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetSimCache, (), ERASE_ARGUMENT_PACK(UNiagaraSimCache*)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetSystemFixedBounds, (), ERASE_ARGUMENT_PACK(FBox)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetTickBehavior, (), ERASE_ARGUMENT_PACK(ENiagaraTickBehavior)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, InitForPerformanceBaseline, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, IsPaused, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, ReinitializeSystem, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, ResetSystem, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SeekToDesiredAge, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetAgeUpdateMode, (ENiagaraAgeUpdateMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetAllowScalability, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetAsset, (UNiagaraSystem, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetAutoDestroy, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetCanRenderWhileSeeking, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetCustomTimeDilation, (float32 = 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetDesiredAge, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetEmitterFixedBounds, (FName, FBox), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetForceLocalPlayerEffect, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetForceSolo, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetGpuComputeDebug, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetLockDesiredAgeDeltaTimeToSeekDelta, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetMaxSimTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableActor, (const FString&, AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableBool, (const FString&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableFloat, (const FString&, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableInt, (const FString&, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableLinearColor, (const FString&, const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableMatrix, (const FString&, const FMatrix&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableObject, (const FString&, UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariablePosition, (const FString&, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableQuat, (const FString&, const FQuat&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableVec2, (const FString&, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableVec3, (const FString&, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetNiagaraVariableVec4, (const FString&, const FVector4&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetOcclusionQueryMode, (ENiagaraOcclusionQueryMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetPaused, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetPreviewLODDistance, (bool, float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetRandomSeedOffset, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetRenderingEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetSeekDelta, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetSimCache, (UNiagaraSimCache, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetSystemFixedBounds, (FBox), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetTickBehavior, (ENiagaraTickBehavior), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableActor, (FName, AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableBool, (FName, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableFloat, (FName, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableInt, (FName, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableLinearColor, (FName, const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableMaterial, (FName, UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableMatrix, (FName, const FMatrix&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableObject, (FName, UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariablePosition, (FName, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableQuat, (FName, const FQuat&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableStaticMesh, (FName, UStaticMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableTexture, (FName, UTexture), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableTextureRenderTarget, (FName, UTextureRenderTarget), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableVec2, (FName, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableVec3, (FName, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetVariableVec4, (FName, const FVector4&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetbAllowScalability, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbAllowScalability, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbForceSolo, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbEnableGpuComputeDebug, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbOverrideWarmupSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetbAutoManageAttachment, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbAutoManageAttachment, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, GetbAutoAttachWeldSimulatedBodies, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbAutoAttachWeldSimulatedBodies, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraComponent, SetbWaitForCompilationOnActivate, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceCurveBase, SetbUseLUT, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceCurveBase, SetbExposeCurve, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceCurveBase, SetbOptimizeLUT, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceCurveBase, SetbOverrideOptimizeThreshold, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraParticleCallbackHandler, ParticleData, (const TArray<FBasicParticleData>&, UNiagaraSystem, const FVector&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid2DCollection, FillRawTexture2D, (const UNiagaraComponent, UTextureRenderTarget2D, int&, int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid2DCollection, FillTexture2D, (const UNiagaraComponent, UTextureRenderTarget2D, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid2DCollection, GetRawTextureSize, (const UNiagaraComponent, int&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid2DCollection, GetTextureSize, (const UNiagaraComponent, int&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid2DCollection, SetbOverrideFormat, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid2DCollection, SetbPreviewGrid, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid3DCollection, FillRawVolumeTexture, (const UNiagaraComponent, UVolumeTexture, int&, int&, int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid3DCollection, FillVolumeTexture, (const UNiagaraComponent, UVolumeTexture, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid3DCollection, GetRawTextureSize, (const UNiagaraComponent, int&, int&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid3DCollection, GetTextureSize, (const UNiagaraComponent, int&, int&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid3DCollection, SetbOverrideFormat, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceGrid3DCollection, SetbPreviewGrid, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceIntRenderTarget2D, SetbPreviewRenderTarget, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTarget2D, SetbInheritUserParameterSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTarget2D, SetbOverrideFormat, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTarget2D, SetbPreviewRenderTarget, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTarget2DArray, SetbInheritUserParameterSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTarget2DArray, SetbOverrideFormat, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTarget2DArray, SetbPreviewRenderTarget, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTargetCube, SetbInheritUserParameterSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTargetCube, SetbOverrideFormat, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTargetCube, SetbPreviewRenderTarget, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTargetVolume, SetbInheritUserParameterSettings, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTargetVolume, SetbOverrideFormat, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraDataInterfaceRenderTargetVolume, SetbPreviewRenderTarget, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraDataInterfaceSkeletalMesh, SetbExcludeBone, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ANiagaraLensEffectBase, SetbAllowMultipleInstances, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANiagaraLensEffectBase, SetbResetWhenRetriggered, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraLightRendererProperties, SetbUseInverseSquaredFalloff, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraLightRendererProperties, SetbAffectsTranslucency, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraLightRendererProperties, SetbAlphaScalesBrightness, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraLightRendererProperties, SetbOverrideInverseExposureBlend, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbOverrideMaterials, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbUseHeterogeneousVolumes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbSortOnlyWhenTranslucent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbSubImageBlend, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbEnableFrustumCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbEnableCameraDistanceCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbEnableMeshFlipbook, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbLockedAxisEnable, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraMeshRendererProperties, SetbCastShadows, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetBoolParameter, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetColorParameter, (const FString&), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetFloatParameter, (const FString&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetIntParameter, (const FString&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetQuatParameter, (const FString&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetVector2DParameter, (const FString&), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetVector4Parameter, (const FString&), ERASE_ARGUMENT_PACK(FVector4)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, GetVectorParameter, (const FString&), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetBoolParameter, (const FString&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetColorParameter, (const FString&, FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetFloatParameter, (const FString&, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetIntParameter, (const FString&, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetQuatParameter, (const FString&, const FQuat&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetVector2DParameter, (const FString&, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetVector4Parameter, (const FString&, const FVector4&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraParameterCollectionInstance, SetVectorParameter, (const FString&, FVector), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraBaselineController, GetSystem, (), ERASE_ARGUMENT_PACK(UNiagaraSystem*)) },
{ ERASE_METHOD_PTR(UNiagaraBaselineController, OnBeginTest, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBaselineController, OnEndTest, (FNiagaraPerfBaselineStats), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBaselineController, OnOwnerTick, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraBaselineController, OnTickTest, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraBaselineController, SetSystem, (const TSoftObjectPtr<UNiagaraSystem>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ANiagaraPreviewBase, SetLabelText, (const FText&, const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANiagaraPreviewBase, SetSystem, (UNiagaraSystem), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraPreviewAxis, ApplyToPreview, (UNiagaraComponent, int, bool, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraPreviewAxis, Num, (), ERASE_ARGUMENT_PACK(int)) },


{ ERASE_METHOD_PTR(ANiagaraPreviewGrid, ActivatePreviews, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANiagaraPreviewGrid, DeactivatePreviews, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANiagaraPreviewGrid, GetPreviews, (TArray<UNiagaraComponent>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ANiagaraPreviewGrid, SetPaused, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbEnableAccurateGeometry, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbUseMaterialBackfaceCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbUseGeometryNormals, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbUseGPUInit, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbUseConstantFactor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbScreenSpaceTessellation, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraRibbonRendererProperties, SetbCastShadows, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraSimCache, GetAttributeCaptureMode, (), ERASE_ARGUMENT_PACK(ENiagaraSimCacheAttributeCaptureMode)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, GetEmitterName, (int), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, GetEmitterNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, GetNumEmitters, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, GetNumFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, GetStartSeconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, IsCacheValid, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, IsEmpty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadColorAttribute, (TArray<FLinearColor>&, FName = FName ( "" ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadFloatAttribute, (TArray<float32>&, FName, FName, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadIDAttribute, (TArray<FNiagaraID>&, FName, FName, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadIntAttribute, (TArray<int>&, FName, FName, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadPositionAttribute, (TArray<FVector>&, FName = FName ( "" ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadPositionAttributeWithRebase, (TArray<FVector>&, FTransform, FName = FName ( "" ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadQuatAttribute, (TArray<FQuat>&, FName = FName ( "" ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadQuatAttributeWithRebase, (TArray<FQuat>&, FQuat, FName = FName ( "" ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadVector2Attribute, (TArray<FVector2D>&, FName, FName, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadVector4Attribute, (TArray<FVector4>&, FName, FName, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimCache, ReadVectorAttribute, (TArray<FVector>&, FName, FName, int = 0), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraSimulationStageGeneric, SetbDisablePartialParticleUpdate, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimulationStageGeneric, SetbParticleIterationStateEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimulationStageGeneric, SetbGpuDispatchForceLinear, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSimulationStageGeneric, SetbOverrideGpuDispatchNumThreads, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraSpriteRendererProperties, SetbSubImageBlend, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSpriteRendererProperties, SetbRemoveHMDRollInVR, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSpriteRendererProperties, SetbSortOnlyWhenTranslucent, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSpriteRendererProperties, SetbEnableCameraDistanceCulling, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSpriteRendererProperties, SetbCastShadows, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraSystem, SetbBakeOutRapidIteration, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbBakeOutRapidIterationOnCook, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbCompressAttributes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbTrimAttributes, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbTrimAttributesOnCook, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbIgnoreParticleReadsForAttributeTrim, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbDisableDebugSwitches, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbDisableDebugSwitchesOnCook, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbSupportLargeWorldCoordinates, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideCastShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideReceivesDecals, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideRenderCustomDepth, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideCustomDepthStencilValue, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideCustomDepthStencilWriteMask, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideTranslucencySortPriority, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideTranslucencySortDistanceOffset, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, GetbCastShadow, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbCastShadow, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, GetbReceivesDecals, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbReceivesDecals, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, GetbRenderCustomDepth, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbRenderCustomDepth, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbDisableExperimentalVM, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbInitialOwnerVelocityFromActor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbFixedBounds, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbOverrideAllowCullingForLocalPlayers, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbAllowCullingForLocalPlayersOverride, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UNiagaraSystem, SetbAllowSystemStateFastPath, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCacheTrackRecorder, GetSequence, (), ERASE_ARGUMENT_PACK(ULevelSequence*)) },
{ ERASE_METHOD_PTR(UCacheTrackRecorder, GetState, (), ERASE_ARGUMENT_PACK(ECacheTrackRecorderState)) },


{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsBool, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsColor, (), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsEnum, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsFloat, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsInt, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsLinkedValue, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsQuat, (), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsVec2, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsVec3, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, AsVec4, (), ERASE_ARGUMENT_PACK(FVector4)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, IsLinkedValue, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, IsLocalValue, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraPythonScriptModuleInput, IsSet, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, GetOldInput, (const FString&), ERASE_ARGUMENT_PACK(UNiagaraPythonScriptModuleInput*)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, ResetToDefault, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetBoolInput, (const FString&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetColorInput, (const FString&, FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetEnumInput, (const FString&, FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetFloatInput, (const FString&, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetIntInput, (const FString&, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetLinkedInput, (const FString&, FString), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetNewInput, (const FString&, UNiagaraPythonScriptModuleInput), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetQuatInput, (const FString&, FQuat), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetVec2Input, (const FString&, FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetVec3Input, (const FString&, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UUpgradeNiagaraScriptResults, SetVec4Input, (const FString&, FVector4), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UNiagaraPythonModule, GetObject, (), ERASE_ARGUMENT_PACK(UNiagaraStackModuleItem*)) },


{ ERASE_METHOD_PTR(UNiagaraPythonEmitter, GetModule, (const FString&), ERASE_ARGUMENT_PACK(UNiagaraPythonModule*)) },
{ ERASE_METHOD_PTR(UNiagaraPythonEmitter, GetModules, (), ERASE_ARGUMENT_PACK(TArray<UNiagaraPythonModule>)) },
{ ERASE_METHOD_PTR(UNiagaraPythonEmitter, GetObject, (), ERASE_ARGUMENT_PACK(UNiagaraEmitter*)) },
{ ERASE_METHOD_PTR(UNiagaraPythonEmitter, GetProperties, (), ERASE_ARGUMENT_PACK(FVersionedNiagaraEmitterData)) },
{ ERASE_METHOD_PTR(UNiagaraPythonEmitter, HasModule, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UNiagaraPythonEmitter, SetProperties, (FVersionedNiagaraEmitterData), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAnimNotifyState_TimedNiagaraEffect, GetSpawnedEffect, (UMeshComponent), ERASE_ARGUMENT_PACK(UFXSystemComponent*)) },


{ ERASE_METHOD_PTR(UAnimNotifyState_TimedNiagaraEffectAdvanced, GetNotifyProgress, (UMeshComponent), ERASE_ARGUMENT_PACK(float)) },


{ ERASE_METHOD_PTR(UAnimNotify_PlayNiagaraEffect, GetSpawnedEffect, (), ERASE_ARGUMENT_PACK(UFXSystemComponent*)) },
{ ERASE_METHOD_PTR(UAnimNotify_PlayNiagaraEffect, GetAttached, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAnimNotify_PlayNiagaraEffect, SetAttached, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(URigVMEditorMenuContext, GetGraphMenuContext, (), ERASE_ARGUMENT_PACK(FRigVMEditorGraphMenuContext)) },
{ ERASE_METHOD_PTR(URigVMEditorMenuContext, GetRigVMBlueprint, (), ERASE_ARGUMENT_PACK(URigVMBlueprint*)) },
{ ERASE_METHOD_PTR(URigVMEditorMenuContext, GetRigVMHost, (), ERASE_ARGUMENT_PACK(URigVMHost*)) },
{ ERASE_METHOD_PTR(URigVMEditorMenuContext, IsAltDown, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UControlRigBlueprint, CanTurnIntoStandaloneRig, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, ConvertHierarchyElementsToSpawnerNodes, (URigHierarchy, TArray<FRigElementKey>, bool = true), ERASE_ARGUMENT_PACK(TArray<URigVMNode>)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, CreateControlRig, (), ERASE_ARGUMENT_PACK(UControlRig*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, GetControlRigClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, GetDebuggedControlRig, (), ERASE_ARGUMENT_PACK(UControlRig*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, GetHierarchyController, (), ERASE_ARGUMENT_PACK(URigHierarchyController*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, GetModularRigController, (), ERASE_ARGUMENT_PACK(UModularRigController*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, GetPreviewMesh, (), ERASE_ARGUMENT_PACK(USkeletalMesh*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, GetRigModuleIcon, (), ERASE_ARGUMENT_PACK(UTexture2D*)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, IsControlRigModule, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, RecompileModularRig, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, SetPreviewMesh, (USkeletalMesh, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, TurnIntoControlRigModule, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UControlRigBlueprint, TurnIntoStandaloneRig, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UIKGoalCreatorInterface, AddIKGoals, (TMap<FName,FIKRigGoal>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UIKRigComponent, ClearAllGoals, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UIKRigComponent, SetIKRigGoal, (const FIKRigGoal&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UIKRigComponent, SetIKRigGoalPositionAndRotation, (const FName, const FVector, const FQuat, const float32, const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UIKRigComponent, SetIKRigGoalTransform, (const FName, const FTransform, const float32, const float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UIKRetargeter, HasSourceIKRig, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UIKRetargeter, HasTargetIKRig, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UEditorUtilityObject, Run, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UActorActionUtility, GetSupportedClasses, (), ERASE_ARGUMENT_PACK(const TArray<TSoftClassPtr<UObject>>&)) },
{ ERASE_METHOD_PTR(UActorActionUtility, SetSupportedClasses, (const TArray<TSoftClassPtr<UObject>>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAssetActionUtility, GetSupportedClasses, (), ERASE_ARGUMENT_PACK(const TArray<TSoftClassPtr<UObject>>&)) },
{ ERASE_METHOD_PTR(UAssetActionUtility, IsActionForBlueprints, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetActionUtility, SetSupportedClasses, (const TArray<TSoftClassPtr<UObject>>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AEditorUtilityActor, GetInputComponent, (), ERASE_ARGUMENT_PACK(UInputComponent*)) },
{ ERASE_METHOD_PTR(AEditorUtilityActor, GetReceivesEditorInput, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AEditorUtilityActor, Run, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AEditorUtilityActor, SetReceivesEditorInput, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AEditorUtilityActor, GetbReceivesEditorInput, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(AEditorUtilityActor, SetbReceivesEditorInput, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEditorUtilityLibrary, GetActorReference, (FString), ERASE_ARGUMENT_PACK(AActor*)) },


{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, CanRun, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, CloseTabByID, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, DoesTabExist, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, FindUtilityWidgetFromBlueprint, (UEditorUtilityWidgetBlueprint), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, RegisterAndExecuteTask, (UEditorUtilityTask, UEditorUtilityTask = nullptr), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, RegisterTabAndGetID, (UEditorUtilityWidgetBlueprint, FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, RegisterTabAndGetIDGeneratedClass, (UWidgetBlueprintGeneratedClass, FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, ReleaseInstanceOfAsset, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnAndRegisterTab, (UEditorUtilityWidgetBlueprint), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnAndRegisterTabAndGetID, (UEditorUtilityWidgetBlueprint, FName&), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnAndRegisterTabAndGetIDGeneratedClass, (UWidgetBlueprintGeneratedClass, FName&), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnAndRegisterTabGeneratedClass, (UWidgetBlueprintGeneratedClass), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnAndRegisterTabWithId, (UEditorUtilityWidgetBlueprint, FName), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnAndRegisterTabWithIdGeneratedClass, (UWidgetBlueprintGeneratedClass, FName), ERASE_ARGUMENT_PACK(UEditorUtilityWidget*)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, SpawnRegisteredTabByID, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, TryRun, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, TryRunClass, (UClass), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorUtilitySubsystem, UnregisterTabByID, (FName), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UEditorUtilityTask, FinishExecutingTask, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilityTask, GetTaskTitleOverride, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UEditorUtilityTask, BeginExecution, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilityTask, CancelRequested, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilityTask, SetTaskNotificationText, (const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorUtilityTask, WasCancelRequested, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UEditorUtilityWidget, Run, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, ClearActorSelectionSet, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, ForEachSelectedActor, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, ForEachSelectedAsset, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, GetActorReference, (FString), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, GetEditorUserSettings, (), ERASE_ARGUMENT_PACK(UEditorPerProjectUserSettings*)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, GetSelectedAssets, (), ERASE_ARGUMENT_PACK(TArray<UObject*>)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, GetSelectionBounds, (FVector&, FVector&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, GetSelectionSet, (), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, OnDefaultActionClicked, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, RenameAsset, (UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, SelectNothing, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDEPRECATED_GlobalEditorUtilityBase, SetActorSelectionState, (AActor, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, ClearActorSelectionSet, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, GetActorReference, (FString), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, GetLevelViewportCameraInfo, (FVector&, FRotator&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, GetSelectionSet, (), ERASE_ARGUMENT_PACK(TArray<AActor*>)) },
{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, SelectNothing, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, SetActorSelectionState, (AActor, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADEPRECATED_PlacedEditorUtilityBase, SetLevelViewportCameraInfo, (FVector, FRotator), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDataValidationSettings, SetbValidateOnSave, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDataValidationSettings, SetbLoadAssetsWhenValidatingChangelists, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UEditorValidatorBase, AssetFails, (const UObject, const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorValidatorBase, AssetPasses, (const UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorValidatorBase, AssetWarning, (const UObject, const FText&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorValidatorBase, GetValidationResult, (), ERASE_ARGUMENT_PACK(EDataValidationResult)) },
{ ERASE_METHOD_PTR(UEditorValidatorBase, CanValidate, (const EDataValidationUsecase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorValidatorBase, CanValidateAsset, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UEditorValidatorBase, ValidateLoadedAsset, (UObject), ERASE_ARGUMENT_PACK(EDataValidationResult)) },


{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, AddValidator, (UEditorValidatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, IsAssetValid, (const FAssetData&, TArray<FText>&, TArray<FText>&, const EDataValidationUsecase), ERASE_ARGUMENT_PACK(EDataValidationResult)) },
{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, IsObjectValid, (UObject, TArray<FText>&, TArray<FText>&, const EDataValidationUsecase), ERASE_ARGUMENT_PACK(EDataValidationResult)) },
{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, RemoveValidator, (UEditorValidatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, ValidateAssetsWithSettings, (const TArray<FAssetData>&, FValidateAssetsSettings&, FValidateAssetsResults&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, ValidateChangelist, (UDataValidationChangelist, const FValidateAssetsSettings&, FValidateAssetsResults&), ERASE_ARGUMENT_PACK(EDataValidationResult)) },
{ ERASE_METHOD_PTR(UEditorValidatorSubsystem, ValidateChangelists, (const TArray<UDataValidationChangelist>, const FValidateAssetsSettings&, FValidateAssetsResults&), ERASE_ARGUMENT_PACK(EDataValidationResult)) },


{ ERASE_METHOD_PTR(UActorSequenceComponent, PauseSequence, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UActorSequenceComponent, PlaySequence, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UActorSequenceComponent, StopSequence, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, AddCustomAnimationTrackUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, GetCustomAnimationTrackUid, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, GetCustomAnimationTrackUidCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, GetCustomAnimationTrackUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, GetCustomFrameRate, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, RemoveCustomAnimationTrackUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetNode, SetCustomFrameRate, (const float32&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeAnimationTrackBaseNode, GetCustomCompletionMode, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackBaseNode, SetCustomCompletionMode, (const int&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, GetCustomDuration, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, GetCustomStartFrame, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, GetCustomTimeScale, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, GetCustomTrackSetDependencyUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, SetCustomDuration, (const int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, SetCustomStartFrame, (const int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, SetCustomTimeScale, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackSetInstanceNode, SetCustomTrackSetDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, GetCustomActorDependencyUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, GetCustomAnimationPayloadKey, (FInterchangeAnimationPayLoadKey&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, GetCustomFrameCount, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, GetCustomPropertyTrack, (FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, GetCustomTargetedProperty, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, SetCustomActorDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, SetCustomAnimationPayloadKey, (const FString&, const EInterchangeAnimationPayLoadType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, SetCustomFrameCount, (const int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, SetCustomPropertyTrack, (const FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimationTrackNode, SetCustomTargetedProperty, (const int&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeTransformAnimationTrackNode, GetCustomUsedChannels, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTransformAnimationTrackNode, SetCustomUsedChannels, (const int&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, GetCustomAnimationSampleRate, (float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, GetCustomAnimationStartTime, (float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, GetCustomAnimationStopTime, (float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, GetCustomSkeletonNodeUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, GetMorphTargetNodeAnimationPayloadKeys, (TMap<FString,FString>&, TMap<FString,uint8>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, GetSceneNodeAnimationPayloadKeys, (TMap<FString,FString>&, TMap<FString,uint8>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, SetAnimationPayloadKeyForMorphTargetNodeUid, (const FString&, const FString&, const EInterchangeAnimationPayLoadType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, SetAnimationPayloadKeyForSceneNodeUid, (const FString&, const FString&, const EInterchangeAnimationPayLoadType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, SetCustomAnimationSampleRate, (const float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, SetCustomAnimationStartTime, (const float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, SetCustomAnimationStopTime, (const float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalAnimationTrackNode, SetCustomSkeletonNodeUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, GetCustomEnableDepthOfField, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, GetCustomFocalLength, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, GetCustomSensorHeight, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, GetCustomSensorWidth, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, SetCustomEnableDepthOfField, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, SetCustomFocalLength, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, SetCustomSensorHeight, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraNode, SetCustomSensorWidth, (const float32&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, GetCustomAspectRatio, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, GetCustomFarClipPlane, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, GetCustomFieldOfView, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, GetCustomNearClipPlane, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, GetCustomProjectionMode, (EInterchangeCameraProjectionType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, GetCustomWidth, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, SetCustomAspectRatio, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, SetCustomFarClipPlane, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, SetCustomFieldOfView, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, SetCustomNearClipPlane, (const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, SetCustomProjectionMode, (const EInterchangeCameraProjectionType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraNode, SetCustomWidth, (const float32&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeShaderNode, AddFloatInput, (const FString&, const float32&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderNode, AddLinearColorInput, (const FString&, const FLinearColor&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderNode, AddStringInput, (const FString&, const FString&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderNode, GetCustomShaderType, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderNode, SetCustomShaderType, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeDecalNode, GetCustomDecalMaterialPathName, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalNode, GetCustomDecalSize, (FVector&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalNode, GetCustomSortOrder, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalNode, SetCustomDecalMaterialPathName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalNode, SetCustomDecalSize, (const FVector&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalNode, SetCustomSortOrder, (const int&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, GetCustomIntensity, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, GetCustomLightColor, (FLinearColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, GetCustomTemperature, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, GetCustomUseTemperature, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, SetCustomIntensity, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, SetCustomLightColor, (const FLinearColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, SetCustomTemperature, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightNode, SetCustomUseTemperature, (bool), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeLightNode, GetCustomAttenuationRadius, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, GetCustomIESBrightnessScale, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, GetCustomIESTexture, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, GetCustomIntensityUnits, (EInterchangeLightUnits&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, GetCustomRotation, (FRotator&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, GetCustomUseIESBrightness, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, SetCustomAttenuationRadius, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, SetCustomIESBrightnessScale, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, SetCustomIESTexture, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, SetCustomIntensityUnits, (const EInterchangeLightUnits&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, SetCustomRotation, (const FRotator&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightNode, SetCustomUseIESBrightness, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePointLightNode, GetCustomLightFalloffExponent, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePointLightNode, GetCustomUseInverseSquaredFalloff, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePointLightNode, SetCustomLightFalloffExponent, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePointLightNode, SetCustomUseInverseSquaredFalloff, (bool), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSpotLightNode, GetCustomInnerConeAngle, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSpotLightNode, GetCustomOuterConeAngle, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSpotLightNode, SetCustomInnerConeAngle, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSpotLightNode, SetCustomOuterConeAngle, (float32), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeRectLightNode, GetCustomSourceHeight, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeRectLightNode, GetCustomSourceWidth, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeRectLightNode, SetCustomSourceHeight, (float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeRectLightNode, SetCustomSourceWidth, (float32), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeTextureNode, GetCustombFlipGreenChannel, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureNode, GetCustomFilter, (EInterchangeTextureFilterMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureNode, GetCustomSRGB, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureNode, SetCustombFlipGreenChannel, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureNode, SetCustomFilter, (const EInterchangeTextureFilterMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureNode, SetCustomSRGB, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureNode, SetPayLoadKey, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, AddCustomDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, GetCustomDependencyUid, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, GetCustomDependencyUidCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, GetCustomDependencyUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, GetCustomDisplayText, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, GetCustomVariantsPayloadKey, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, RemoveCustomDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, SetCustomDisplayText, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeVariantSetNode, SetCustomVariantsPayloadKey, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsNode, AddCustomVariantSetUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsNode, GetCustomVariantSetUid, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsNode, GetCustomVariantSetUidCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsNode, GetCustomVariantSetUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsNode, RemoveCustomVariantSetUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, AddScalarParameterValue, (const FString&, float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, AddStaticSwitchParameterValue, (const FString&, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, AddTextureParameterValue, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, AddVectorParameterValue, (const FString&, const FLinearColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, GetCustomParent, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, GetScalarParameterValue, (const FString&, float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, GetStaticSwitchParameterValue, (const FString&, bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, GetTextureParameterValue, (const FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, GetVectorParameterValue, (const FString&, FLinearColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceNode, SetCustomParent, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomBoundingBox, (FBox&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomHasSmoothGroup, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomHasVertexBinormal, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomHasVertexColor, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomHasVertexNormal, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomHasVertexTangent, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomPolygonCount, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomUVCount, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetCustomVertexCount, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetMorphTargetDependeciesCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetMorphTargetDependencies, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetMorphTargetDependency, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetMorphTargetName, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSceneInstanceUid, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSceneInstanceUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSceneInstanceUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSkeletonDependeciesCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSkeletonDependencies, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSkeletonDependency, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSlotMaterialDependencies, (TMap<FString,FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, GetSlotMaterialDependencyUid, (const FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, IsMorphTarget, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, IsSkinnedMesh, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, RemoveMorphTargetDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, RemoveSceneInstanceUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, RemoveSkeletonDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, RemoveSlotMaterialDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomBoundingBox, (const FBox&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomHasSmoothGroup, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomHasVertexBinormal, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomHasVertexColor, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomHasVertexNormal, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomHasVertexTangent, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomPolygonCount, (const int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomUVCount, (const int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetCustomVertexCount, (const int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetMorphTarget, (const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetMorphTargetDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetMorphTargetName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetPayLoadKey, (const FString&, const EInterchangeMeshPayLoadType&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetSceneInstanceUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetSkeletonDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetSkinnedMesh, (const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshNode, SetSlotMaterialDependencyUid, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSceneNode, AddSpecializedType, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomAnimationAssetUidToPlay, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomAssetInstanceUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomBindPoseGlobalTransform, (const UInterchangeBaseNodeContainer, const FTransform&, FTransform&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomBindPoseLocalTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomGeometricTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomGlobalTransform, (const UInterchangeBaseNodeContainer, const FTransform&, FTransform&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomLocalTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomTimeZeroGlobalTransform, (const UInterchangeBaseNodeContainer, const FTransform&, FTransform&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetCustomTimeZeroLocalTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetMorphTargetCurveWeights, (TMap<FString,float32>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetSlotMaterialDependencies, (TMap<FString,FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetSlotMaterialDependencyUid, (const FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetSpecializedType, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetSpecializedTypeCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, GetSpecializedTypes, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, IsSpecializedTypeContains, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, RemoveSlotMaterialDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, RemoveSpecializedType, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetCustomAnimationAssetUidToPlay, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetCustomAssetInstanceUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetCustomBindPoseLocalTransform, (const UInterchangeBaseNodeContainer, const FTransform&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetCustomGeometricTransform, (const FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetCustomLocalTransform, (const UInterchangeBaseNodeContainer, const FTransform&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetCustomTimeZeroLocalTransform, (const UInterchangeBaseNodeContainer, const FTransform&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetMorphTargetCurveWeight, (const FString&, const float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneNode, SetSlotMaterialDependencyUid, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeFunctionCallShaderNode, GetCustomMaterialFunction, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeFunctionCallShaderNode, SetCustomMaterialFunction, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, GetCustomBlendMode, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, GetCustomIsAShaderFunction, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, GetCustomOpacityMaskClipValue, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, GetCustomScreenSpaceReflections, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, GetCustomTwoSided, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, GetCustomTwoSidedTransmission, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, SetCustomBlendMode, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, SetCustomIsAShaderFunction, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, SetCustomOpacityMaskClipValue, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, SetCustomScreenSpaceReflections, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, SetCustomTwoSided, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeShaderGraphNode, SetCustomTwoSidedTransmission, (const bool&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeTexture2DNode, GetCustomWrapU, (EInterchangeTextureWrapMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DNode, GetCustomWrapV, (EInterchangeTextureWrapMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DNode, GetSourceBlocks, (), ERASE_ARGUMENT_PACK(TMap<int,FString>)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DNode, SetCustomWrapU, (const EInterchangeTextureWrapMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DNode, SetCustomWrapV, (const EInterchangeTextureWrapMode&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, GetCustomActorClassName, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, GetCustomGlobalTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, GetCustomLocalTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, GetCustomMobility, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, SetCustomActorClassName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, SetCustomGlobalTransform, (const FTransform&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, SetCustomLocalTransform, (const FTransform&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeActorFactoryNode, SetCustomMobility, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, GetCustomFocalLength, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, GetCustomFocusMethod, (ECameraFocusMethod&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, GetCustomSensorHeight, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, GetCustomSensorWidth, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, SetCustomFocalLength, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, SetCustomFocusMethod, (const ECameraFocusMethod&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, SetCustomSensorHeight, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicalCameraFactoryNode, SetCustomSensorWidth, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, GetCustomAspectRatio, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, GetCustomFarClipPlane, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, GetCustomFieldOfView, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, GetCustomNearClipPlane, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, GetCustomProjectionMode, (ECameraProjectionMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, GetCustomWidth, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, SetCustomAspectRatio, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, SetCustomFarClipPlane, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, SetCustomFieldOfView, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, SetCustomNearClipPlane, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, SetCustomProjectionMode, (const ECameraProjectionMode&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStandardCameraFactoryNode, SetCustomWidth, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, GetCustomDecalMaterialPathName, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, GetCustomDecalSize, (FVector&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, GetCustomSortOrder, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, SetCustomDecalMaterialPathName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, SetCustomDecalSize, (const FVector&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalActorFactoryNode, SetCustomSortOrder, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeBaseMaterialFactoryNode, GetCustomIsMaterialImportEnabled, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseMaterialFactoryNode, SetCustomIsMaterialImportEnabled, (const bool&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeDecalMaterialFactoryNode, GetCustomDiffuseTexturePath, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalMaterialFactoryNode, GetCustomNormalTexturePath, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalMaterialFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeDecalMaterialFactoryNode, SetCustomDiffuseTexturePath, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeDecalMaterialFactoryNode, SetCustomNormalTexturePath, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, AddCustomAnimationTrackUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, GetCustomAnimationTrackUid, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, GetCustomAnimationTrackUidCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, GetCustomAnimationTrackUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, GetCustomFrameRate, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, RemoveCustomAnimationTrackUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLevelSequenceFactoryNode, SetCustomFrameRate, (const float32&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, GetCustomIntensity, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, GetCustomLightColor, (FColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, GetCustomTemperature, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, GetCustomUseTemperature, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, SetCustomIntensity, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, SetCustomLightColor, (const FColor&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, SetCustomTemperature, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeBaseLightFactoryNode, SetCustomUseTemperature, (bool, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, GetCustomAttenuationRadius, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, GetCustomIESBrightnessScale, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, GetCustomIESTexture, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, GetCustomIntensityUnits, (ELightUnits&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, GetCustomRotation, (FRotator&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, GetCustomUseIESBrightness, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, SetCustomAttenuationRadius, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, SetCustomIESBrightnessScale, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, SetCustomIESTexture, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, SetCustomIntensityUnits, (ELightUnits, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, SetCustomRotation, (const FRotator&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeLightFactoryNode, SetCustomUseIESBrightness, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeRectLightFactoryNode, GetCustomSourceHeight, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeRectLightFactoryNode, GetCustomSourceWidth, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeRectLightFactoryNode, SetCustomSourceHeight, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeRectLightFactoryNode, SetCustomSourceWidth, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePointLightFactoryNode, GetCustomLightFalloffExponent, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePointLightFactoryNode, GetCustomUseInverseSquaredFalloff, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePointLightFactoryNode, SetCustomLightFalloffExponent, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePointLightFactoryNode, SetCustomUseInverseSquaredFalloff, (bool, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSpotLightFactoryNode, GetCustomInnerConeAngle, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSpotLightFactoryNode, GetCustomOuterConeAngle, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSpotLightFactoryNode, SetCustomInnerConeAngle, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSpotLightFactoryNode, SetCustomOuterConeAngle, (float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePhysicsAssetFactoryNode, GetCustomSkeletalMeshUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePhysicsAssetFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangePhysicsAssetFactoryNode, InitializePhysicsAssetNode, (const FString&, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePhysicsAssetFactoryNode, SetCustomSkeletalMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsFactoryNode, AddCustomVariantSetUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsFactoryNode, GetCustomVariantSetUid, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsFactoryNode, GetCustomVariantSetUidCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsFactoryNode, GetCustomVariantSetUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeSceneVariantSetsFactoryNode, RemoveCustomVariantSetUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, GetCustomRootJointUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, GetCustomSkeletalMeshFactoryNodeUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, GetCustomUseTimeZeroForBindPose, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, InitializeSkeletonNode, (const FString&, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, SetCustomRootJointUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, SetCustomSkeletalMeshFactoryNodeUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletonFactoryNode, SetCustomUseTimeZeroForBindPose, (const bool&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustBrightness, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustBrightnessCurve, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustHue, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustMaxAlpha, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustMinAlpha, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustRGBCurve, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustSaturation, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAdjustVibrance, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAllowNonPowerOfTwo, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomAlphaCoverageThresholds, (FVector4&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustombChromaKeyTexture, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustombDoScaleMipsForAlphaCoverage, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustombFlipGreenChannel, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustombPreserveBorder, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustombUseLegacyGamma, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomChromaKeyColor, (FColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomChromaKeyThreshold, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomCompositePower, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomCompositeTextureMode, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomCompressionNoAlpha, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomCompressionQuality, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomCompressionSettings, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomDeferCompression, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomDownscale, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomDownscaleOptions, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomFilter, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomLODBias, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomLODGroup, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomLossyCompressionAmount, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomMaxTextureSize, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomMipGenSettings, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomMipLoadOptions, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomPaddingColor, (FColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomPowerOfTwoMode, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomPreferCompressedSourceData, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomSRGB, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomTranslatedTextureNodeUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetCustomVirtualTextureStreaming, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, InitializeTextureNode, (const FString&, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustBrightness, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustBrightnessCurve, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustHue, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustMaxAlpha, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustMinAlpha, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustRGBCurve, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustSaturation, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAdjustVibrance, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAllowNonPowerOfTwo, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomAlphaCoverageThresholds, (const FVector4&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustombChromaKeyTexture, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustombDoScaleMipsForAlphaCoverage, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustombFlipGreenChannel, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustombPreserveBorder, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustombUseLegacyGamma, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomChromaKeyColor, (const FColor&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomChromaKeyThreshold, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomCompositePower, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomCompositeTextureMode, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomCompressionNoAlpha, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomCompressionQuality, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomCompressionSettings, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomDeferCompression, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomDownscale, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomDownscaleOptions, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomFilter, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomLODBias, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomLODGroup, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomLossyCompressionAmount, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomMaxTextureSize, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomMipGenSettings, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomMipLoadOptions, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomPaddingColor, (const FColor&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomPowerOfTwoMode, (const uint8&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomPreferCompressedSourceData, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomSRGB, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomTranslatedTextureNodeUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureFactoryNode, SetCustomVirtualTextureStreaming, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeTexture2DArrayFactoryNode, GetCustomAddressX, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DArrayFactoryNode, GetCustomAddressY, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DArrayFactoryNode, GetCustomAddressZ, (uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DArrayFactoryNode, SetCustomAddressZ, (const uint8, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, GetCustomAddressX, (TextureAddress&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, GetCustomAddressY, (TextureAddress&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, GetSourceBlock, (int, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, GetSourceBlockByCoordinates, (int, int, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, GetSourceBlocks, (), ERASE_ARGUMENT_PACK(TMap<int,FString>)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, SetCustomAddressX, (const TextureAddress, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, SetCustomAddressY, (const TextureAddress, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, SetSourceBlock, (int, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, SetSourceBlockByCoordinates, (int, int, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeTexture2DFactoryNode, SetSourceBlocks, (const TMap<int,FString>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangeTextureLightProfileFactoryNode, GetCustomBrightness, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureLightProfileFactoryNode, GetCustomTextureMultiplier, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureLightProfileFactoryNode, SetCustomBrightness, (const float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeTextureLightProfileFactoryNode, SetCustomTextureMultiplier, (const float32, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedAttributeCurveName, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedAttributeCurveNames, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedAttributeCurveNamesCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedAttributeStepCurveName, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedAttributeStepCurveNames, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedAttributeStepCurveNamesCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedMaterialCurveSuffixe, (const int, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedMaterialCurveSuffixes, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetAnimatedMaterialCurveSuffixesCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomAddCurveMetadataToSkeleton, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomDeleteExistingCustomAttributeCurves, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomDeleteExistingMorphTargetCurves, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomDeleteExistingNonCurveCustomAttributes, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomDoNotImportCurveWithZero, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomImportAttributeCurves, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomImportBoneTracks, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomImportBoneTracksRangeStart, (float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomImportBoneTracksRangeStop, (float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomImportBoneTracksSampleRate, (float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomMaterialDriveParameterOnCustomAttribute, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomRemoveCurveRedundantKeys, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomSkeletonFactoryNodeUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetCustomSkeletonSoftObjectPath, (FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetMorphTargetNodeAnimationPayloadKeys, (TMap<FString,FInterchangeAnimationPayLoadKey>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, GetSceneNodeAnimationPayloadKeys, (TMap<FString,FInterchangeAnimationPayLoadKey>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, InitializeAnimSequenceNode, (const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, RemoveAnimatedAttributeCurveName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, RemoveAnimatedAttributeStepCurveName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, RemoveAnimatedMaterialCurveSuffixe, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetAnimatedAttributeCurveName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetAnimatedAttributeStepCurveName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetAnimatedMaterialCurveSuffixe, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetAnimationPayloadKeysForMorphTargetNodeUids, (const TMap<FString,FString>&, const TMap<FString,uint8>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetAnimationPayloadKeysForSceneNodeUids, (const TMap<FString,FString>&, const TMap<FString,uint8>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomAddCurveMetadataToSkeleton, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomDeleteExistingCustomAttributeCurves, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomDeleteExistingMorphTargetCurves, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomDeleteExistingNonCurveCustomAttributes, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomDoNotImportCurveWithZero, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomImportAttributeCurves, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomImportBoneTracks, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomImportBoneTracksRangeStart, (const float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomImportBoneTracksRangeStop, (const float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomImportBoneTracksSampleRate, (const float&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomMaterialDriveParameterOnCustomAttribute, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomRemoveCurveRedundantKeys, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomSkeletonFactoryNodeUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeAnimSequenceFactoryNode, SetCustomSkeletonSoftObjectPath, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeCommonPipelineDataFactoryNode, GetBakeMeshes, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeCommonPipelineDataFactoryNode, GetCustomGlobalOffsetTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeCommonPipelineDataFactoryNode, SetBakeMeshes, (const UInterchangeBaseNodeContainer, const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeCommonPipelineDataFactoryNode, SetCustomGlobalOffsetTransform, (const UInterchangeBaseNodeContainer, const FTransform&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToAnisotropy, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToBaseColor, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToClearCoat, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToClearCoatNormal, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToClearCoatRoughness, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToCloth, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToEmissiveColor, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToFuzzColor, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToMetallic, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToNormal, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToOcclusion, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToOpacity, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToRefraction, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToRoughness, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToSpecular, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToSubsurface, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToTangent, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectOutputToTransmissionColor, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToAnisotropy, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToBaseColor, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToClearCoat, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToClearCoatNormal, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToClearCoatRoughness, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToCloth, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToEmissiveColor, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToFuzzColor, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToMetallic, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToNormal, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToOcclusion, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToOpacity, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToRefraction, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToRoughness, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToSpecular, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToSubsurface, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToTangent, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, ConnectToTransmissionColor, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetAnisotropyConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetBaseColorConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetClearCoatConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetClearCoatNormalConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetClearCoatRoughnessConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetClothConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomBlendMode, (EBlendMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomOpacityMaskClipValue, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomRefractionMethod, (ERefractionMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomScreenSpaceReflections, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomShadingModel, (EMaterialShadingModel&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomTranslucencyLightingMode, (ETranslucencyLightingMode&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetCustomTwoSided, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetEmissiveColorConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetFuzzColorConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetMetallicConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetNormalConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetOcclusionConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetOpacityConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetRefractionConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetRoughnessConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetSpecularConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetSubsurfaceConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetTangentConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, GetTransmissionColorConnection, (FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomBlendMode, (const EBlendMode&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomOpacityMaskClipValue, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomRefractionMethod, (const ERefractionMode&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomScreenSpaceReflections, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomShadingModel, (const EMaterialShadingModel&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomTranslucencyLightingMode, (const ETranslucencyLightingMode&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFactoryNode, SetCustomTwoSided, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMaterialExpressionFactoryNode, GetCustomExpressionClassName, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialExpressionFactoryNode, SetCustomExpressionClassName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceFactoryNode, GetCustomInstanceClassName, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceFactoryNode, GetCustomParent, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceFactoryNode, SetCustomInstanceClassName, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialInstanceFactoryNode, SetCustomParent, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMaterialFunctionCallExpressionFactoryNode, GetCustomMaterialFunctionDependency, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFunctionCallExpressionFactoryNode, SetCustomMaterialFunctionDependency, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMaterialFunctionFactoryNode, GetInputConnection, (const FString&, FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMaterialFunctionFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },


{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, GetCustomAnimationAssetUidToPlay, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, GetCustomGeometricTransform, (FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, GetSlotMaterialDependencies, (TMap<FString,FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, GetSlotMaterialDependencyUid, (const FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, RemoveSlotMaterialDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, SetCustomAnimationAssetUidToPlay, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, SetCustomGeometricTransform, (const FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshActorFactoryNode, SetSlotMaterialDependencyUid, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, AddLodDataUniqueId, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomComputeWeightedNormals, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomKeepSectionsSeparate, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomLODGroup, (FName&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomRecomputeNormals, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomRecomputeTangents, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomRemoveDegenerates, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomUseBackwardsCompatibleF16TruncUVs, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomUseFullPrecisionUVs, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomUseHighPrecisionTangentBasis, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomUseMikkTSpace, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomVertexColorIgnore, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomVertexColorOverride, (FColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetCustomVertexColorReplace, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetLodDataCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetLodDataUniqueIds, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetSlotMaterialDependencies, (TMap<FString,FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, GetSlotMaterialDependencyUid, (const FString&, FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, RemoveLodDataUniqueId, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, RemoveSlotMaterialDependencyUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, ResetSlotMaterialDependencies, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomComputeWeightedNormals, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomKeepSectionsSeparate, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomLODGroup, (const FName&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomRecomputeNormals, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomRecomputeTangents, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomRemoveDegenerates, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomUseBackwardsCompatibleF16TruncUVs, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomUseFullPrecisionUVs, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomUseHighPrecisionTangentBasis, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomUseMikkTSpace, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomVertexColorIgnore, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomVertexColorOverride, (const FColor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetCustomVertexColorReplace, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeMeshFactoryNode, SetSlotMaterialDependencyUid, (const FString&, const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomBoneInfluenceLimit, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomCreatePhysicsAsset, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomImportContentType, (EInterchangeSkeletalMeshContentType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomImportMorphTarget, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomImportVertexAttributes, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomMorphThresholdPosition, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomPhysicAssetSoftObjectPath, (FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomSkeletonSoftObjectPath, (FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomThresholdPosition, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomThresholdTangentNormal, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomThresholdUV, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetCustomUseHighPrecisionSkinWeights, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, InitializeSkeletalMeshNode, (const FString&, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomBoneInfluenceLimit, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomCreatePhysicsAsset, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomImportContentType, (const EInterchangeSkeletalMeshContentType&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomImportMorphTarget, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomImportVertexAttributes, (const bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomMorphThresholdPosition, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomPhysicAssetSoftObjectPath, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomSkeletonSoftObjectPath, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomThresholdPosition, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomThresholdTangentNormal, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomThresholdUV, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshFactoryNode, SetCustomUseHighPrecisionSkinWeights, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, AddMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, GetCustomSkeletonUid, (FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, GetMeshUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, GetMeshUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, RemoveAllMeshes, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, RemoveMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeSkeletalMeshLodDataNode, SetCustomSkeletonUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, AddSocketUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, AddSocketUids, (const TArray<FString>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomBuildNanite, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomBuildReversedIndexBuffer, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomBuildScale3D, (FVector&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomDistanceFieldReplacementMesh, (FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomDistanceFieldResolutionScale, (float32&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomDstLightmapIndex, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomGenerateDistanceFieldAsIfTwoSided, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomGenerateLightmapUVs, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomMaxLumenMeshCards, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomMinLightmapResolution, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomSrcLightmapIndex, (int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetCustomSupportFaceRemap, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetObjectClass, (), ERASE_ARGUMENT_PACK(UClass*)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetSocketUidCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, GetSocketUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, InitializeStaticMeshNode, (const FString&, const FString&, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, RemoveSocketUd, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
*/