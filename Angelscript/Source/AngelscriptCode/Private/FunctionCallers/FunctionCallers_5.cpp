#pragma once
//#include"FunctionCallers.h"
/*
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomBuildNanite, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomBuildReversedIndexBuffer, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomBuildScale3D, (const FVector&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomDistanceFieldReplacementMesh, (const FSoftObjectPath&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomDistanceFieldResolutionScale, (const float32&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomDstLightmapIndex, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomGenerateDistanceFieldAsIfTwoSided, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomGenerateLightmapUVs, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomMaxLumenMeshCards, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomMinLightmapResolution, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomSrcLightmapIndex, (const int&, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshFactoryNode, SetCustomSupportFaceRemap, (const bool&, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, AddBoxCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, AddCapsuleCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, AddConvexCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, AddMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, AddSphereCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetBoxCollisionMeshUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetBoxCollisionMeshUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetCapsuleCollisionMeshUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetCapsuleCollisionMeshUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetConvexCollisionMeshUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetConvexCollisionMeshUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetImportCollision, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetMeshUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetMeshUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetOneConvexHullPerUCX, (bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetSphereCollisionMeshUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, GetSphereCollisionMeshUidsCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveAllBoxCollisionMeshes, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveAllCapsuleCollisionMeshes, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveAllConvexCollisionMeshes, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveAllMeshes, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveAllSphereCollisionMeshes, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveBoxCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveCapsuleCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveConvexCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, RemoveSphereCollisionMeshUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, SetImportCollision, (bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangeStaticMeshLodDataNode, SetOneConvexHullPerUCX, (bool), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllMeshGeometry, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllMeshGeometryNotInstanced, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllMeshInstanceUids, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllMeshInstanceUidsUsingMeshGeometryUid, (const FString&, TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllSkinnedMeshGeometry, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllSkinnedMeshInstance, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllStaticMeshGeometry, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetAllStaticMeshInstance, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetMeshGeometryByUid, (const FString&), ERASE_ARGUMENT_PACK(const FInterchangeMeshGeometry&)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetMeshGeometrySkeletonRootUid, (const FString&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetMeshInstanceByUid, (const FString&), ERASE_ARGUMENT_PACK(const FInterchangeMeshInstance&)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, GetMeshInstanceSkeletonRootUid, (const FString&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, IsValidMeshGeometryUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, IsValidMeshInstanceUid, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UInterchangePipelineMeshesUtilities, SetContext, (const FInterchangePipelineMeshesUtilitiesContext&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAudioAnalyzer, StartAnalyzing, (const UObject, UAudioBus), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioAnalyzer, StopAnalyzing, (const UObject = __WorldContext), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UConstantQAnalyzer, GetCenterFrequencies, (TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UConstantQAnalyzer, GetNumCenterFrequencies, (), ERASE_ARGUMENT_PACK(const int)) },


{ ERASE_METHOD_PTR(UConstantQNRT, GetChannelConstantQAtTime, (const float32, const int, TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UConstantQNRT, GetNormalizedChannelConstantQAtTime, (const float32, const int, TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULoudnessNRT, GetChannelLoudnessAtTime, (const float32, const int, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULoudnessNRT, GetLoudnessAtTime, (const float32, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULoudnessNRT, GetNormalizedChannelLoudnessAtTime, (const float32, const int, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULoudnessNRT, GetNormalizedLoudnessAtTime, (const float32, float32&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UOnsetNRT, GetChannelOnsetsBetweenTimes, (const float32, const float32, const int, TArray<float32>&, TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UOnsetNRT, GetNormalizedChannelOnsetsBetweenTimes, (const float32, const float32, const int, TArray<float32>&, TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USynesthesiaSpectrumAnalyzer, GetCenterFrequencies, (const float32, TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynesthesiaSpectrumAnalyzer, GetNumCenterFrequencies, (), ERASE_ARGUMENT_PACK(const int)) },


{ ERASE_METHOD_PTR(UCableComponent, GetAttachedActor, (), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(UCableComponent, GetAttachedComponent, (), ERASE_ARGUMENT_PACK(USceneComponent*)) },
{ ERASE_METHOD_PTR(UCableComponent, GetCableParticleLocations, (TArray<FVector>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCableComponent, SetAttachEndTo, (AActor, FName, FName = NAME_None), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCableComponent, SetAttachEndToComponent, (USceneComponent, FName = NAME_None), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCustomMeshComponent, AddCustomMeshTriangles, (const TArray<FCustomMeshTriangle>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCustomMeshComponent, ClearCustomMeshTriangles, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCustomMeshComponent, SetCustomMeshTriangles, (const TArray<FCustomMeshTriangle>&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMetasoundParameterPack, GetBool, (FName, ESetParamResult&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, GetFloat, (FName, ESetParamResult&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, GetInt, (FName, ESetParamResult&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, GetString, (FName, ESetParamResult&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, GetTrigger, (FName, ESetParamResult&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, HasBool, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, HasFloat, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, HasInt, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, HasString, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, HasTrigger, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, SetBool, (FName, bool, bool = true), ERASE_ARGUMENT_PACK(ESetParamResult)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, SetFloat, (FName, float32, bool = true), ERASE_ARGUMENT_PACK(ESetParamResult)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, SetInt, (FName, int, bool = true), ERASE_ARGUMENT_PACK(ESetParamResult)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, SetString, (FName, const FString&, bool = true), ERASE_ARGUMENT_PACK(ESetParamResult)) },
{ ERASE_METHOD_PTR(UMetasoundParameterPack, SetTrigger, (FName, bool = true), ERASE_ARGUMENT_PACK(ESetParamResult)) },


{ ERASE_METHOD_PTR(UMetasoundGeneratorHandle, ApplyParameterPack, (UMetasoundParameterPack), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetasoundGeneratorHandle, EnableRuntimeRenderTiming, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetasoundGeneratorHandle, GetCPUCoreUtilization, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMetasoundGeneratorHandle, UpdateWatchers, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetasoundGeneratorHandle, WatchOutput, (FName, const FOnMetasoundOutputValueChanged& = FOnMetasoundOutputValueChanged ( ), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMetaSoundCacheSubsystem, PrecacheMetaSound, (UMetaSoundSource, int = 1), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundCacheSubsystem, RemoveCachedOperatorsForMetaSound, (UMetaSoundSource), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundCacheSubsystem, TouchOrPrecacheMetaSound, (UMetaSoundSource, int = 1), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMetaSoundOutputSubsystem, WatchOutput, (UAudioComponent, FName, const FOnMetasoundOutputValueChanged& = FOnMetasoundOutputValueChanged ( ), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMetaSoundAssetSubsystem, RegisterAssetClassesInDirectories, (const TArray<FMetaSoundAssetDirectory>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundAssetSubsystem, UnregisterAssetClassesInDirectories, (const TArray<FMetaSoundAssetDirectory>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, AddGraphInputNode, (FName, FName, FMetasoundFrontendLiteral, EMetaSoundBuilderResult&, bool = false), ERASE_ARGUMENT_PACK(FMetaSoundBuilderNodeOutputHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, AddGraphOutputNode, (FName, FName, FMetasoundFrontendLiteral, EMetaSoundBuilderResult&, bool = false), ERASE_ARGUMENT_PACK(FMetaSoundBuilderNodeInputHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, AddInterface, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, AddNodeByClassName, (const FMetasoundFrontendClassName&, EMetaSoundBuilderResult&, int = 1), ERASE_ARGUMENT_PACK(FMetaSoundNodeHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConnectNodeInputsToMatchingGraphInterfaceInputs, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(TArray<FMetaSoundBuilderNodeOutputHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConnectNodeInputToGraphInput, (FName, const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConnectNodeOutputsToMatchingGraphInterfaceOutputs, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(TArray<FMetaSoundBuilderNodeInputHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConnectNodeOutputToGraphOutput, (FName, const FMetaSoundBuilderNodeOutputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConnectNodes, (const FMetaSoundBuilderNodeOutputHandle&, const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConnectNodesByInterfaceBindings, (const FMetaSoundNodeHandle&, const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ContainsNode, (const FMetaSoundNodeHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ContainsNodeInput, (const FMetaSoundBuilderNodeInputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ContainsNodeOutput, (const FMetaSoundBuilderNodeOutputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, ConvertFromPreset, (EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, DisconnectNodeInput, (const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, DisconnectNodeOutput, (const FMetaSoundBuilderNodeOutputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, DisconnectNodes, (const FMetaSoundBuilderNodeOutputHandle&, const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, DisconnectNodesByInterfaceBindings, (const FMetaSoundNodeHandle&, const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindGraphInputNode, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetaSoundNodeHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindGraphOutputNode, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetaSoundNodeHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindInterfaceInputNodes, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(TArray<FMetaSoundNodeHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindInterfaceOutputNodes, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(TArray<FMetaSoundNodeHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeClassVersion, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetasoundFrontendVersion)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeInputByName, (const FMetaSoundNodeHandle&, FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetaSoundBuilderNodeInputHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeInputParent, (const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetaSoundNodeHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeInputs, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(TArray<FMetaSoundBuilderNodeInputHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeInputsByDataType, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&, FName), ERASE_ARGUMENT_PACK(TArray<FMetaSoundBuilderNodeInputHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeOutputByName, (const FMetaSoundNodeHandle&, FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetaSoundBuilderNodeOutputHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeOutputParent, (const FMetaSoundBuilderNodeOutputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetaSoundNodeHandle)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeOutputs, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(TArray<FMetaSoundBuilderNodeOutputHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, FindNodeOutputsByDataType, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&, FName), ERASE_ARGUMENT_PACK(TArray<FMetaSoundBuilderNodeOutputHandle>)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetNodeInputClassDefault, (const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetNodeInputData, (const FMetaSoundBuilderNodeInputHandle&, FName&, FName&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetNodeInputDefault, (const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetNodeInputIsConstructorPin, (const FMetaSoundBuilderNodeInputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetNodeOutputData, (const FMetaSoundBuilderNodeOutputHandle&, FName&, FName&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetNodeOutputIsConstructorPin, (const FMetaSoundBuilderNodeOutputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, GetReferencedPresetAsset, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, InterfaceIsDeclared, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, IsPreset, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, NodeInputIsConnected, (const FMetaSoundBuilderNodeInputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, NodeOutputIsConnected, (const FMetaSoundBuilderNodeOutputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, NodesAreConnected, (const FMetaSoundBuilderNodeOutputHandle&, const FMetaSoundBuilderNodeInputHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, RemoveGraphInput, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, RemoveGraphOutput, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, RemoveInterface, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, RemoveNode, (const FMetaSoundNodeHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, RemoveNodeInputDefault, (const FMetaSoundBuilderNodeInputHandle&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, SetGraphInputDefault, (FName, const FMetasoundFrontendLiteral&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderBase, SetNodeInputDefault, (const FMetaSoundBuilderNodeInputHandle&, const FMetasoundFrontendLiteral&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMetaSoundSourceBuilder, Audition, (UObject, UAudioComponent, FOnCreateAuditionGeneratorHandleDelegate = FOnCreateAuditionGeneratorHandleDelegate ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundSourceBuilder, GetLiveUpdatesEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundSourceBuilder, SetBlockRateOverride, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundSourceBuilder, SetFormat, (EMetaSoundOutputAudioFormat, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundSourceBuilder, SetQuality, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundSourceBuilder, SetSampleRateOverride, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateBoolArrayMetaSoundLiteral, (const TArray<bool>&, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateBoolMetaSoundLiteral, (bool, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateFloatArrayMetaSoundLiteral, (const TArray<float32>&, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateFloatMetaSoundLiteral, (float32, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateIntArrayMetaSoundLiteral, (const TArray<int>&, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateIntMetaSoundLiteral, (int, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateMetaSoundLiteralFromParam, (const FAudioParameter&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateObjectArrayMetaSoundLiteral, (const TArray<UObject*>&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateObjectMetaSoundLiteral, (UObject), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreatePatchBuilder, (FName, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(UMetaSoundPatchBuilder*)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateSourceBuilder, (FName, FMetaSoundBuilderNodeOutputHandle&, FMetaSoundBuilderNodeInputHandle&, TArray<FMetaSoundBuilderNodeInputHandle>&, EMetaSoundBuilderResult&, EMetaSoundOutputAudioFormat = EMetaSoundOutputAudioFormat :: Mono, bool = true), ERASE_ARGUMENT_PACK(UMetaSoundSourceBuilder*)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateStringArrayMetaSoundLiteral, (const TArray<FString>&, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, CreateStringMetaSoundLiteral, (const FString&, FName&), ERASE_ARGUMENT_PACK(FMetasoundFrontendLiteral)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, FindBuilder, (FName), ERASE_ARGUMENT_PACK(UMetaSoundBuilderBase*)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, FindPatchBuilder, (FName), ERASE_ARGUMENT_PACK(UMetaSoundPatchBuilder*)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, FindSourceBuilder, (FName), ERASE_ARGUMENT_PACK(UMetaSoundSourceBuilder*)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, IsInterfaceRegistered, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, RegisterBuilder, (FName, UMetaSoundBuilderBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, RegisterPatchBuilder, (FName, UMetaSoundPatchBuilder), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, RegisterSourceBuilder, (FName, UMetaSoundSourceBuilder), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, UnregisterBuilder, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, UnregisterPatchBuilder, (FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMetaSoundBuilderSubsystem, UnregisterSourceBuilder, (FName), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(URadialSlider, GetCustomDefaultValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URadialSlider, GetNormalizedSliderHandlePosition, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URadialSlider, GetValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(URadialSlider, SetAngularOffset, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetCenterBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetCustomDefaultValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetHandStartEndRatio, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetLocked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetShowSliderHand, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetShowSliderHandle, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetSliderBarColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetSliderHandleColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetSliderHandleEndAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetSliderHandleStartAngle, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetSliderProgressColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetSliderRange, (const FRuntimeFloatCurve&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetStepSize, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetUseVerticalDrag, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, SetValueTags, (const TArray<float32>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(URadialSlider, GetSliderRange, (), ERASE_ARGUMENT_PACK(const FRuntimeFloatCurve&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetValueTags, (), ERASE_ARGUMENT_PACK(const TArray<float>&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetSliderHandleStartAngle, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetSliderHandleEndAngle, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetAngularOffset, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetHandStartEndRatio, (), ERASE_ARGUMENT_PACK(const FVector2D&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetSliderBarColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetSliderProgressColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetSliderHandleColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetCenterBackgroundColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetLocked, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetStepSize, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetUseVerticalDrag, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetShowSliderHandle, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(URadialSlider, GetShowSliderHand, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UAudioMeter, GetMeterChannelInfo, (), ERASE_ARGUMENT_PACK(TArray<FMeterChannelInfo>)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterChannelInfo, (const TArray<FMeterChannelInfo>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterClippingColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterPeakColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterScaleColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterScaleLabelColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, SetMeterValueColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetBackgroundColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetMeterBackgroundColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetMeterValueColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetMeterPeakColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetMeterClippingColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetMeterScaleColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(UAudioMeter, GetMeterScaleLabelColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(UAudioOscilloscope, StartProcessing, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioOscilloscope, StopProcessing, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAudioRadialSlider, GetOutputValue, (const float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, GetSliderValue, (const float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetCenterBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetHandStartEndRatio, (const FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetOutputRange, (const FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetShowLabelOnlyOnHover, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetShowUnitsText, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetSliderBarColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetSliderProgressColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetSliderThickness, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetTextLabelBackgroundColor, (FSlateColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetUnitsText, (const FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetUnitsTextReadOnly, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetValueTextReadOnly, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioRadialSlider, SetWidgetLayout, (EAudioRadialSliderLayout), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAudioSliderBase, GetLinValue, (const float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, GetOutputValue, (const float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, GetSliderValue, (const float32), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetShowLabelOnlyOnHover, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetShowUnitsText, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetSliderBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetSliderBarColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetSliderThumbColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetTextLabelBackgroundColor, (FSlateColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetUnitsText, (const FText), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetUnitsTextReadOnly, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetValueTextReadOnly, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioSliderBase, SetWidgetBackgroundColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAudioVectorscope, StartProcessing, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioVectorscope, StopProcessing, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMetaSoundEditorSubsystem, SetNodeLocation, (UMetaSoundBuilderBase, const FMetaSoundNodeHandle&, const FVector2D&, EMetaSoundBuilderResult&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UProceduralMeshComponent, AddCollisionConvexMesh, (TArray<FVector>), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, ClearAllMeshSections, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, ClearCollisionConvexMeshes, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, ClearMeshSection, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, CreateMeshSection, (int, const TArray<FVector>&, const TArray<int>&, const TArray<FVector>&, const TArray<FVector2D>&, const TArray<FColor>&, const TArray<FProcMeshTangent>&, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, CreateMeshSection_LinearColor, (int, const TArray<FVector>&, const TArray<int>&, const TArray<FVector>&, const TArray<FVector2D>&, const TArray<FVector2D>&, const TArray<FVector2D>&, const TArray<FVector2D>&, const TArray<FLinearColor>&, const TArray<FProcMeshTangent>&, bool, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, GetNumSections, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, IsMeshSectionVisible, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, SetMeshSectionVisible, (int, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, UpdateMeshSection, (int, const TArray<FVector>&, const TArray<FVector>&, const TArray<FVector2D>&, const TArray<FColor>&, const TArray<FProcMeshTangent>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UProceduralMeshComponent, UpdateMeshSection_LinearColor, (int, const TArray<FVector>&, const TArray<FVector>&, const TArray<FVector2D>&, const TArray<FVector2D>&, const TArray<FVector2D>&, const TArray<FVector2D>&, const TArray<FLinearColor>&, const TArray<FProcMeshTangent>&, bool = true), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetEnableRoomEffects, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetReflectionScalar, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetReverbBrightness, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetReverbGain, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetReverbTimeModifier, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetRoomDimensions, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetRoomMaterials, (const TArray<ERaMaterialName>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetRoomPosition, (const FVector&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioReverbPluginPreset, SetRoomRotation, (const FQuat&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UResonanceAudioSpatializationSourceSettings, SetSoundSourceDirectivity, (float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UResonanceAudioSpatializationSourceSettings, SetSoundSourceSpread, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UModularSynthComponent, CreatePatch, (const ESynth1PatchSource, const TArray<FSynth1PatchCable>&, const bool), ERASE_ARGUMENT_PACK(FPatchId)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, NoteOff, (const float32, const bool = false, const bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, NoteOn, (const float32, const int, const float32 = - 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetAttackTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetChorusDepth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetChorusEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetChorusFeedback, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetChorusFrequency, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetDecayTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetEnableLegato, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetEnablePatch, (const FPatchId, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetEnablePolyphony, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetEnableRetrigger, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetEnableUnison, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetFilterAlgorithm, (ESynthFilterAlgorithm), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetFilterFrequency, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetFilterFrequencyMod, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetFilterQ, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetFilterQMod, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetFilterType, (ESynthFilterType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetGainDb, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOFrequency, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOFrequencyMod, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOGain, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOGainMod, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOMode, (int, ESynthLFOMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOPatch, (int, ESynthLFOPatchType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetLFOType, (int, ESynthLFOType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvAttackTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvBiasPatch, (const ESynthModEnvBiasPatch), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvDecayTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvPatch, (const ESynthModEnvPatch), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvReleaseTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetModEnvSustainGain, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscCents, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscFrequencyMod, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscGain, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscGainMod, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscOctave, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscPulsewidth, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscSemitones, (int, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscSync, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetOscType, (int, ESynth1OscType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetPan, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetPitchBend, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetPortamento, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetReleaseTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetSpread, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetStereoDelayFeedback, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetStereoDelayIsEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetStereoDelayMode, (ESynthStereoDelayMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetStereoDelayRatio, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetStereoDelayTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetStereoDelayWetlevel, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetSustainGain, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UModularSynthComponent, SetSynthPreset, (const FModularSynthPreset&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetBitModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetBitModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetBits, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetModulationSettings, (const FSourceEffectBitCrusherSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetSampleRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetSampleRateModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetSampleRateModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, SetSettings, (const FSourceEffectBitCrusherBaseSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectBitCrusherPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectBitCrusherSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetDepth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetDepthModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetDepthModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetDry, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetDryModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetDryModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetFeedback, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetFeedbackModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetFeedbackModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetFrequency, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetFrequencyModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetFrequencyModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetModulationSettings, (const FSourceEffectChorusSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetSettings, (const FSourceEffectChorusBaseSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetSpread, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetSpreadModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetSpreadModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetWet, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetWetModulator, (const USoundModulatorBase), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, SetWetModulators, (const TSet<USoundModulatorBase>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectChorusPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectChorusSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectConvolutionReverbPreset, SetImpulseResponse, (UAudioImpulseResponse), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectConvolutionReverbPreset, SetSettings, (const FSourceEffectConvolutionReverbSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectConvolutionReverbPreset, GetImpulseResponse, (), ERASE_ARGUMENT_PACK(UAudioImpulseResponse*)) },
{ ERASE_METHOD_PTR(USourceEffectConvolutionReverbPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectConvolutionReverbSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectDynamicsProcessorPreset, SetSettings, (const FSourceEffectDynamicsProcessorSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectDynamicsProcessorPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectDynamicsProcessorSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectEnvelopeFollowerPreset, RegisterEnvelopeFollowerListener, (UEnvelopeFollowerListener), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectEnvelopeFollowerPreset, SetSettings, (const FSourceEffectEnvelopeFollowerSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectEnvelopeFollowerPreset, UnregisterEnvelopeFollowerListener, (UEnvelopeFollowerListener), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectEnvelopeFollowerPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectEnvelopeFollowerSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectEQPreset, SetSettings, (const FSourceEffectEQSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectEQPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectEQSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectFilterPreset, SetSettings, (const FSourceEffectFilterSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectFilterPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectFilterSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectFoldbackDistortionPreset, SetSettings, (const FSourceEffectFoldbackDistortionSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectFoldbackDistortionPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectFoldbackDistortionSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectMidSideSpreaderPreset, SetSettings, (const FSourceEffectMidSideSpreaderSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectMidSideSpreaderPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectMidSideSpreaderSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectMotionFilterPreset, SetSettings, (const FSourceEffectMotionFilterSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectMotionFilterPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectMotionFilterSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectPannerPreset, SetSettings, (const FSourceEffectPannerSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectPannerPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectPannerSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectPhaserPreset, SetSettings, (const FSourceEffectPhaserSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectPhaserPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectPhaserSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectRingModulationPreset, SetSettings, (const FSourceEffectRingModulationSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectRingModulationPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectRingModulationSettings&)) },


{ ERASE_METHOD_PTR(USourceEffectSimpleDelayPreset, SetSettings, (const FSourceEffectSimpleDelaySettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectSimpleDelayPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectSimpleDelaySettings&)) },


{ ERASE_METHOD_PTR(USourceEffectStereoDelayPreset, SetSettings, (const FSourceEffectStereoDelaySettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectStereoDelayPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectStereoDelaySettings&)) },


{ ERASE_METHOD_PTR(USourceEffectWaveShaperPreset, SetSettings, (const FSourceEffectWaveShaperSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USourceEffectWaveShaperPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSourceEffectWaveShaperSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectConvolutionReverbPreset, SetImpulseResponse, (UAudioImpulseResponse), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectConvolutionReverbPreset, SetSettings, (const FSubmixEffectConvolutionReverbSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectConvolutionReverbPreset, GetImpulseResponse, (), ERASE_ARGUMENT_PACK(UAudioImpulseResponse*)) },
{ ERASE_METHOD_PTR(USubmixEffectConvolutionReverbPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectConvolutionReverbSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectDelayPreset, GetMaxDelayInMilliseconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USubmixEffectDelayPreset, SetDefaultSettings, (const FSubmixEffectDelaySettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDelayPreset, SetDelay, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDelayPreset, SetInterpolationTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDelayPreset, SetSettings, (const FSubmixEffectDelaySettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectDelayPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectDelaySettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetFilterAlgorithm, (ESubmixFilterAlgorithm), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetFilterCutoffFrequency, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetFilterCutoffFrequencyMod, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetFilterQ, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetFilterQMod, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetFilterType, (ESubmixFilterType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, SetSettings, (const FSubmixEffectFilterSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFilterPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectFilterSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectFlexiverbPreset, SetSettings, (const FSubmixEffectFlexiverbSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectFlexiverbPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectFlexiverbSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectMultibandCompressorPreset, ResetKey, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectMultibandCompressorPreset, SetAudioBus, (UAudioBus), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectMultibandCompressorPreset, SetExternalSubmix, (USoundSubmix), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectMultibandCompressorPreset, SetSettings, (const FSubmixEffectMultibandCompressorSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectMultibandCompressorPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectMultibandCompressorSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectStereoDelayPreset, SetSettings, (const FSubmixEffectStereoDelaySettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectStereoDelayPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectStereoDelaySettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectStereoToQuadPreset, SetSettings, (const FSubmixEffectStereoToQuadSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectStereoToQuadPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectStereoToQuadSettings&)) },


{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, AddTap, (int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, GetMaxDelayInMilliseconds, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, GetTap, (int, FTapDelayInfo&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, GetTapIds, (TArray<int>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, RemoveTap, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, SetInterpolationTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, SetSettings, (const FSubmixEffectTapDelaySettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, SetTap, (int, const FTapDelayInfo&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USubmixEffectTapDelayPreset, GetSettings, (), ERASE_ARGUMENT_PACK(const FSubmixEffectTapDelaySettings&)) },


{ ERASE_METHOD_PTR(UGranularSynth, GetCurrentPlayheadTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGranularSynth, GetSampleDuration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGranularSynth, IsLoaded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGranularSynth, NoteOff, (const float32, const bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, NoteOn, (const float32, const int, const float32 = - 1.000000), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetAttackTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetDecayTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainDuration, (const float32, const FVector2D = FVector2D ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainEnvelopeType, (const EGranularSynthEnvelopeType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainPan, (const float32, const FVector2D = FVector2D ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainPitch, (const float32, const FVector2D = FVector2D ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainProbability, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainsPerSecond, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetGrainVolume, (const float32, const FVector2D = FVector2D ( ), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetPlaybackSpeed, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetPlayheadTime, (const float32, const float32 = 0.000000, EGranularSynthSeekType = EGranularSynthSeekType :: FromBeginning), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetReleaseTimeMsec, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetScrubMode, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetSoundWave, (USoundWave), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGranularSynth, SetSustainGain, (const float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMonoWaveTableSynthPreset, GetbLockKeyframesToGridBool, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMonoWaveTableSynthPreset, SetbLockKeyframesToGridBool, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMonoWaveTableSynthPreset, GetbNormalizeWaveTables, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMonoWaveTableSynthPreset, SetbNormalizeWaveTables, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetCurveTangent, (int), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetKeyFrameValuesForTable, (float32), ERASE_ARGUMENT_PACK(TArray<float>)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetMaxTableIndex, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, GetNumTableEntries, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, NoteOff, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, NoteOn, (const float32, const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, RefreshAllWaveTables, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, RefreshWaveTable, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeAttackTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeBiasDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeDecayTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeReleaseTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetAmpEnvelopeSustainGain, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetCurveInterpolationType, (CurveInterpolationType, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetCurveTangent, (int, float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetCurveValue, (int, int, const float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeAttackTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeBiasDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopenDecayTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeReleaseTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFilterEnvelopeSustainGain, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFrequency, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFrequencyPitchBend, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetFrequencyWithMidiNote, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetLowPassFilterResonance, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeAttackTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeBiasDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeBiasInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeDecayTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeInvert, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeReleaseTime, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPositionEnvelopeSustainGain, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPosLfoDepth, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPosLfoFrequency, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetPosLfoType, (const ESynthLFOType), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetSustainPedalState, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentMonoWaveTable, SetWaveTablePosition, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USynthComponentToneGenerator, SetFrequency, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentToneGenerator, SetVolume, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthComponentToneGenerator, GetFrequency, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USynthComponentToneGenerator, GetVolume, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(USynthSamplePlayer, GetCurrentPlaybackProgressPercent, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, GetCurrentPlaybackProgressTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, GetSampleDuration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, IsLoaded, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, SeekToTime, (float32, ESamplePlayerSeekType, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, SetPitch, (float32, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, SetScrubMode, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, SetScrubTimeWidth, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, SetSoundWave, (USoundWave), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthSamplePlayer, GetSoundWave, (), ERASE_ARGUMENT_PACK(USoundWave*)) },


{ ERASE_METHOD_PTR(USynth2DSlider, GetValue, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(USynth2DSlider, SetIndentHandle, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynth2DSlider, SetLocked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynth2DSlider, SetSliderHandleColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynth2DSlider, SetStepSize, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynth2DSlider, SetValue, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynth2DSlider, GetSliderHandleColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },
{ ERASE_METHOD_PTR(USynth2DSlider, GetIndentHandle, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(USynth2DSlider, GetLocked, (), ERASE_ARGUMENT_PACK(const bool&)) },
{ ERASE_METHOD_PTR(USynth2DSlider, GetStepSize, (), ERASE_ARGUMENT_PACK(const float&)) },


{ ERASE_METHOD_PTR(USynthKnob, GetValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(USynthKnob, SetLocked, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthKnob, SetStepSize, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthKnob, SetValue, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthKnob, GetStepSize, (), ERASE_ARGUMENT_PACK(const float&)) },
{ ERASE_METHOD_PTR(USynthKnob, GetShowTooltipInfo, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USynthKnob, SetShowTooltipInfo, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USynthKnob, GetLocked, (), ERASE_ARGUMENT_PACK(const bool&)) },


{ ERASE_METHOD_PTR(UPaperFlipbook, GetKeyFrameIndexAtTime, (float32, bool = false), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperFlipbook, GetNumFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperFlipbook, GetNumKeyFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperFlipbook, GetSpriteAtFrame, (int), ERASE_ARGUMENT_PACK(UPaperSprite*)) },
{ ERASE_METHOD_PTR(UPaperFlipbook, GetSpriteAtTime, (float32, bool = false), ERASE_ARGUMENT_PACK(UPaperSprite*)) },
{ ERASE_METHOD_PTR(UPaperFlipbook, GetTotalDuration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPaperFlipbook, IsValidKeyFrameIndex, (int), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetFlipbook, (), ERASE_ARGUMENT_PACK(UPaperFlipbook*)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetFlipbookFramerate, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetFlipbookLength, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetFlipbookLengthInFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetPlaybackPosition, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetPlaybackPositionInFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetPlayRate, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, GetSpriteColor, (), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, IsLooping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, IsReversing, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, Play, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, PlayFromStart, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, Reverse, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, ReverseFromEnd, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetFlipbook, (UPaperFlipbook), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetLooping, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetNewTime, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetPlaybackPosition, (float32, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetPlaybackPositionInFrames, (int, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetPlayRate, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, SetSpriteColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperFlipbookComponent, Stop, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, AddInstance, (const FTransform&, UPaperSprite, bool = false, FLinearColor = FLinearColor ( 1.000000 , 1.000000 , 1.000000 , 1.000000 ), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, ClearInstances, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, GetInstanceCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, GetInstanceTransform, (int, FTransform&, bool = false), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, RemoveInstance, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, SortInstancesAlongAxis, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, UpdateInstanceColor, (int, FLinearColor, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperGroupedSpriteComponent, UpdateInstanceTransform, (int, const FTransform&, bool = false, bool = true, bool = false), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UPaperSpriteComponent, GetSprite, (), ERASE_ARGUMENT_PACK(UPaperSprite*)) },
{ ERASE_METHOD_PTR(UPaperSpriteComponent, SetSprite, (UPaperSprite), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperSpriteComponent, SetSpriteColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperSpriteComponent, GetSpriteColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(UPaperTileLayer, SetbHiddenInEditor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, GetbHiddenInGame, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, SetbHiddenInGame, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, GetbLayerCollides, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, SetbLayerCollides, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, GetbOverrideCollisionThickness, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, SetbOverrideCollisionThickness, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, GetbOverrideCollisionOffset, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperTileLayer, SetbOverrideCollisionOffset, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UPaperTileMapComponent, AddNewLayer, (), ERASE_ARGUMENT_PACK(UPaperTileLayer*)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, CreateNewTileMap, (int = 4, int = 4, int = 32, int = 32, float32 = 1.000000, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetLayerColor, (int = 0), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetMapSize, (int&, int&, int&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetTile, (int, int, int), ERASE_ARGUMENT_PACK(FPaperTileInfo)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetTileCenterPosition, (int, int, int = 0, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetTileCornerPosition, (int, int, int = 0, bool = false), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetTileMapColor, (), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetTilePolygon, (int, int, TArray<FVector>&, int = 0, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, MakeTileMapEditable, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, OwnsTileMap, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, RebuildCollision, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, ResizeMap, (int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, SetDefaultCollisionThickness, (float32, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, SetLayerCollision, (int = 0, bool = true, bool = true, float32 = 50.000000, bool = false, float32 = 0.000000, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, SetLayerColor, (FLinearColor, int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, SetTile, (int, int, int, FPaperTileInfo), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, SetTileMap, (UPaperTileMap), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, SetTileMapColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTileMapComponent, GetTileMap, (), ERASE_ARGUMENT_PACK(UPaperTileMap*)) },


{ ERASE_METHOD_PTR(UPaperTerrainComponent, SetTerrainColor, (FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UPaperTerrainComponent, GetTerrainColor, (), ERASE_ARGUMENT_PACK(const FLinearColor&)) },


{ ERASE_METHOD_PTR(ATemplateSequenceActor, GetSequence, (), ERASE_ARGUMENT_PACK(UTemplateSequence*)) },
{ ERASE_METHOD_PTR(ATemplateSequenceActor, GetSequencePlayer, (), ERASE_ARGUMENT_PACK(UTemplateSequencePlayer*)) },
{ ERASE_METHOD_PTR(ATemplateSequenceActor, LoadSequence, (), ERASE_ARGUMENT_PACK(UTemplateSequence*)) },
{ ERASE_METHOD_PTR(ATemplateSequenceActor, SetBinding, (AActor, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ATemplateSequenceActor, SetSequence, (UTemplateSequence), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ATemplateSequenceActor, SetSequencePlayer, (UTemplateSequencePlayer), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULegacyCameraShake, BlueprintUpdateCameraShake, (float32, float32, const FMinimalViewInfo&, FMinimalViewInfo&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULegacyCameraShake, IsFinished, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULegacyCameraShake, PlayShake, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULegacyCameraShake, StopShake, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULegacyCameraShake, SetbRandomAnimSegment, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UCameraAnimationCameraModifier, IsCameraAnimationActive, (const FCameraAnimationHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UCameraAnimationCameraModifier, PlayCameraAnimation, (UCameraAnimationSequence, FCameraAnimationParams), ERASE_ARGUMENT_PACK(FCameraAnimationHandle)) },
{ ERASE_METHOD_PTR(UCameraAnimationCameraModifier, StopAllCameraAnimations, (bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraAnimationCameraModifier, StopAllCameraAnimationsOf, (UCameraAnimationSequence, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UCameraAnimationCameraModifier, StopCameraAnimation, (const FCameraAnimationHandle&, bool = false), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AGameplayCameraActor, GetCameraComponent, (), ERASE_ARGUMENT_PACK(UGameplayCameraComponent*)) },
{ ERASE_METHOD_PTR(AGameplayCameraActor, GetSceneComponent, (), ERASE_ARGUMENT_PACK(USceneComponent*)) },
{ ERASE_METHOD_PTR(AGameplayCameraActor, SetSceneComponent, (USceneComponent), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameplayCameraActor, SetCameraComponent, (UGameplayCameraComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGameplayCameraComponent, ActivateCamera, (int = 0), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AGameplayCameraSystemActor, ActivateForPlayer, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AGameplayCameraSystemActor, GetCameraSystemComponent, (), ERASE_ARGUMENT_PACK(UGameplayCameraSystemComponent*)) },
{ ERASE_METHOD_PTR(AGameplayCameraSystemActor, SetCameraSystemComponent, (UGameplayCameraSystemComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGameplayCameraSystemComponent, GetCameraSystemEvaluator, (), ERASE_ARGUMENT_PACK(UCameraSystemEvaluator*)) },


{ ERASE_METHOD_PTR(UGameplayCamerasSubsystem, IsCameraAnimationActive, (APlayerController, const FCameraAnimationHandle&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGameplayCamerasSubsystem, PlayCameraAnimation, (APlayerController, UCameraAnimationSequence, FCameraAnimationParams), ERASE_ARGUMENT_PACK(FCameraAnimationHandle)) },
{ ERASE_METHOD_PTR(UGameplayCamerasSubsystem, StopAllCameraAnimations, (APlayerController, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameplayCamerasSubsystem, StopAllCameraAnimationsOf, (APlayerController, UCameraAnimationSequence, bool = false), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGameplayCamerasSubsystem, StopCameraAnimation, (APlayerController, const FCameraAnimationHandle&, bool = false), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UASClass, GetRelativeSourceFilePath, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UASClass, GetSourceFilePath, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UASClass, IsDeveloperOnly, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UTestTerminatorComponent, ServerTerminatorReplicated, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULatentAutomationCommand, GetCurrentTest, (), ERASE_ARGUMENT_PACK(FIntegrationTest&)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, SetCurrentTest, (FIntegrationTest&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, GetClientExecutor, (), ERASE_ARGUMENT_PACK(ALatentAutomationCommandClientExecutor*)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, After, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, AfterOnClient, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, Before, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, BeforeOnClient, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, Describe, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, DescribeOnClient, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, HasAuthority, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, Update, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULatentAutomationCommand, UpdateOnClient, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, AssertFalse, (bool, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, AssertNotNull, (const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, AssertNotSame, (const UObject, const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, AssertNull, (const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, AssertSame, (const UObject, const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, AssertTrue, (bool, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, Fail, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerAssertFalse, (bool, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerAssertNotNull, (const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerAssertNotSame, (const UObject, const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerAssertNull, (const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerAssertSame, (const UObject, const UObject, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerAssertTrue, (bool, const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerFail, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerLatentCommandClientChecked, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerLatentCommandClientDone, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerLatentCommandClientReady, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ALatentAutomationCommandClientExecutor, ServerLatentCommandDescribeOnClient, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UScriptEngineSubsystem, Deinitialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptEngineSubsystem, Initialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptEngineSubsystem, ShouldCreateSubsystem, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UScriptEngineSubsystem, Tick, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UScriptGameInstanceSubsystem, Deinitialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptGameInstanceSubsystem, GetGameInstance, (), ERASE_ARGUMENT_PACK(UGameInstance*)) },
{ ERASE_METHOD_PTR(UScriptGameInstanceSubsystem, Initialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptGameInstanceSubsystem, ShouldCreateSubsystem, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UScriptGameInstanceSubsystem, Tick, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UScriptLocalPlayerSubsystem, Deinitialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptLocalPlayerSubsystem, GetLocalPlayer, (), ERASE_ARGUMENT_PACK(ULocalPlayer*)) },
{ ERASE_METHOD_PTR(UScriptLocalPlayerSubsystem, Initialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptLocalPlayerSubsystem, ShouldCreateSubsystem, (UObject), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UScriptWorldSubsystem, Deinitialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, Initialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, OnWorldBeginPlay, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, OnWorldComponentsUpdated, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, PostInitialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, ShouldCreateSubsystem, (UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, Tick, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptWorldSubsystem, UpdateStreamingState, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UObjectInWorld, DestroyObject, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UObjectInWorld, SetWorld, (UWorld), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UObjectInWorld, SetWorldContext, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UObjectTickable, Tick, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UObjectTickable, DestroyObject, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UObjectTickable, SetWorld, (UWorld), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UObjectTickable, SetWorldContext, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(AMyActor, BlankTest, (int, bool, float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(AMyActor, GetLocation, (FVector, FVector, float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(AMyActor, WriteClassesToFile, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, ClearOverrideRenderMaterial, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, ClearSecondaryRenderMaterial, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetColorOverrideMode, (), ERASE_ARGUMENT_PACK(EDynamicMeshComponentColorOverrideMode)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetConstantOverrideColor, (), ERASE_ARGUMENT_PACK(FColor)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetDynamicMesh, (), ERASE_ARGUMENT_PACK(UDynamicMesh*)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetEnableRaytracing, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetEnableWireframeRenderPass, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetFlatShadingEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetOverrideRenderMaterial, (int), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetSecondaryBuffersVisibility, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetSecondaryRenderMaterial, (), ERASE_ARGUMENT_PACK(UMaterialInterface*)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetShadowsEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetVertexColorSpaceTransformMode, (), ERASE_ARGUMENT_PACK(EDynamicMeshVertexColorTransformMode)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, GetViewModeOverridesEnabled, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, HasOverrideRenderMaterial, (int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetColorOverrideMode, (EDynamicMeshComponentColorOverrideMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetConstantOverrideColor, (FColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetEnableFlatShading, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetEnableRaytracing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetEnableWireframeRenderPass, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetOverrideRenderMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetSecondaryBuffersVisibility, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetSecondaryRenderMaterial, (UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetShadowsEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetVertexColorSpaceTransformMode, (EDynamicMeshVertexColorTransformMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UBaseDynamicMeshComponent, SetViewModeOverridesEnabled, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDynamicMeshComponent, ConfigureMaterialSet, (const TArray<UMaterialInterface>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, EnableComplexAsSimpleCollision, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, GetTangentsType, (), ERASE_ARGUMENT_PACK(EDynamicMeshComponentTangentsMode)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, NotifyMeshModified, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, NotifyMeshVertexAttributesModified, (bool = true, bool = true, bool = true, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, SetComplexAsSimpleCollisionEnabled, (bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, SetDeferredCollisionUpdatesEnabled, (bool, bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, SetDynamicMesh, (UDynamicMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, SetTangentsType, (EDynamicMeshComponentTangentsMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, UpdateCollision, (bool = true), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshComponent, ValidateMaterialSlots, (bool = true, bool = true), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(ADynamicMeshActor, AllocateComputeMesh, (), ERASE_ARGUMENT_PACK(UDynamicMesh*)) },
{ ERASE_METHOD_PTR(ADynamicMeshActor, FreeAllComputeMeshes, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADynamicMeshActor, GetComputeMeshPool, (), ERASE_ARGUMENT_PACK(UDynamicMeshPool*)) },
{ ERASE_METHOD_PTR(ADynamicMeshActor, GetDynamicMeshComponent, (), ERASE_ARGUMENT_PACK(UDynamicMeshComponent*)) },
{ ERASE_METHOD_PTR(ADynamicMeshActor, ReleaseAllComputeMeshes, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ADynamicMeshActor, ReleaseComputeMesh, (UDynamicMesh), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ADynamicMeshActor, SetDynamicMeshComponent, (UDynamicMeshComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UDynamicMesh, GetTriangleCount, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UDynamicMesh, IsEmpty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UDynamicMesh, Reset, (), ERASE_ARGUMENT_PACK(UDynamicMesh*)) },
{ ERASE_METHOD_PTR(UDynamicMesh, ResetToCube, (), ERASE_ARGUMENT_PACK(UDynamicMesh*)) },


{ ERASE_METHOD_PTR(UDynamicMeshPool, FreeAllMeshes, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshPool, RequestMesh, (), ERASE_ARGUMENT_PACK(UDynamicMesh*)) },
{ ERASE_METHOD_PTR(UDynamicMeshPool, ReturnAllMeshes, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UDynamicMeshPool, ReturnMesh, (UDynamicMesh), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UChaosVDSkySphereInterface, Refresh, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UChaosVDSkySphereInterface, SetDirectionalLightSource, (ADirectionalLight), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetLODMaterialSlot, (USkeletalMesh, int, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetNumSections, (USkeletalMesh, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetNumVerts, (USkeletalMesh, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetSectionCastShadow, (const USkeletalMesh, const int, const int, bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetSectionRecomputeTangent, (const USkeletalMesh, const int, const int, bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetSectionRecomputeTangentsVertexMaskChannel, (const USkeletalMesh, const int, const int, uint8&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, GetSectionVisibleInRayTracing, (const USkeletalMesh, const int, const int, bool&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, SetSectionCastShadow, (USkeletalMesh, const int, const int, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, SetSectionRecomputeTangent, (USkeletalMesh, const int, const int, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, SetSectionRecomputeTangentsVertexMaskChannel, (USkeletalMesh, const int, const int, const uint8), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletalMeshEditorSubsystem, SetSectionVisibleInRayTracing, (USkeletalMesh, const int, const int, const bool), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, AddSimpleCollisions, (UStaticMesh, const EScriptCollisionShapeType), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, AddSimpleCollisionsWithNotification, (UStaticMesh, const EScriptCollisionShapeType, bool), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, AddUVChannel, (UStaticMesh, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, BulkSetConvexDecompositionCollisions, (const TArray<UStaticMesh>&, int, int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, BulkSetConvexDecompositionCollisionsWithNotification, (const TArray<UStaticMesh>&, int, int, int, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, CreateProxyMeshActor, (const TArray<AStaticMeshActor>&, const FCreateProxyMeshActorOptions&, AStaticMeshActor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, EnableSectionCastShadow, (UStaticMesh, bool, int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, EnableSectionCollision, (UStaticMesh, bool, int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GenerateBoxUVChannel, (UStaticMesh, int, int, const FVector&, const FRotator&, const FVector&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GenerateCylindricalUVChannel, (UStaticMesh, int, int, const FVector&, const FRotator&, const FVector2D&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GeneratePlanarUVChannel, (UStaticMesh, int, int, const FVector&, const FRotator&, const FVector2D&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetCollisionComplexity, (UStaticMesh), ERASE_ARGUMENT_PACK(ECollisionTraceFlag)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetConvexCollisionCount, (UStaticMesh), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetLodBuildSettings, (const UStaticMesh, const int, FMeshBuildSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetLodCount, (UStaticMesh), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetLODGroup, (UStaticMesh), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetLODMaterialSlot, (UStaticMesh, int, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetLodReductionSettings, (const UStaticMesh, const int, FMeshReductionSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetLodScreenSizes, (UStaticMesh), ERASE_ARGUMENT_PACK(TArray<float>)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetNaniteSettings, (UStaticMesh), ERASE_ARGUMENT_PACK(FMeshNaniteSettings)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetNumberMaterials, (UStaticMesh), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetNumberVerts, (UStaticMesh, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetNumUVChannels, (UStaticMesh, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, GetSimpleCollisionCount, (UStaticMesh), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, HasInstanceVertexColors, (UStaticMeshComponent), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, HasVertexColors, (UStaticMesh), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, ImportLOD, (UStaticMesh, const int, const FString&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, InsertUVChannel, (UStaticMesh, int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, IsSectionCollisionEnabled, (UStaticMesh, int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, JoinStaticMeshActors, (const TArray<AStaticMeshActor>&, const FJoinStaticMeshActorsOptions&), ERASE_ARGUMENT_PACK(AActor*)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, MergeStaticMeshActors, (const TArray<AStaticMeshActor>&, const FMergeStaticMeshActorsOptions&, AStaticMeshActor&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, ReimportAllCustomLODs, (UStaticMesh), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, RemoveCollisions, (UStaticMesh), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, RemoveCollisionsWithNotification, (UStaticMesh, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, RemoveLods, (UStaticMesh), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, RemoveUVChannel, (UStaticMesh, int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, ReplaceMeshComponentsMaterials, (const TArray<UMeshComponent>&, UMaterialInterface, UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, ReplaceMeshComponentsMaterialsOnActors, (const TArray<AActor*>&, UMaterialInterface, UMaterialInterface), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, ReplaceMeshComponentsMeshes, (const TArray<UStaticMeshComponent>&, UStaticMesh, UStaticMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, ReplaceMeshComponentsMeshesOnActors, (const TArray<AActor*>&, UStaticMesh, UStaticMesh), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetAllowCPUAccess, (UStaticMesh, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetConvexDecompositionCollisions, (UStaticMesh, int, int, int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetConvexDecompositionCollisionsWithNotification, (UStaticMesh, int, int, int, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetGenerateLightmapUv, (UStaticMesh, bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLodBuildSettings, (UStaticMesh, const int, const FMeshBuildSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLodFromStaticMesh, (UStaticMesh, int, UStaticMesh, int, bool), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLODGroup, (UStaticMesh, FName, bool = true), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLODMaterialSlot, (UStaticMesh, int, int, int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLodReductionSettings, (UStaticMesh, const int, const FMeshReductionSettings&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLods, (UStaticMesh, const FStaticMeshReductionOptions&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLodScreenSizes, (UStaticMesh, const TArray<float32>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetLodsWithNotification, (UStaticMesh, const FStaticMeshReductionOptions&, bool), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UStaticMeshEditorSubsystem, SetNaniteSettings, (UStaticMesh, FMeshNaniteSettings, bool = true), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UOctreeDynamicMeshComponent, SetDynamicMesh, (UDynamicMesh), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UModelingObjectsCreationAPI, CreateMaterialObject, (const FCreateMaterialObjectParams&), ERASE_ARGUMENT_PACK(FCreateMaterialObjectResult)) },
{ ERASE_METHOD_PTR(UModelingObjectsCreationAPI, CreateMeshObject, (const FCreateMeshObjectParams&), ERASE_ARGUMENT_PACK(FCreateMeshObjectResult)) },
{ ERASE_METHOD_PTR(UModelingObjectsCreationAPI, CreateNewActor, (const FCreateActorParams&), ERASE_ARGUMENT_PACK(FCreateActorResult)) },
{ ERASE_METHOD_PTR(UModelingObjectsCreationAPI, CreateTextureObject, (const FCreateTextureObjectParams&), ERASE_ARGUMENT_PACK(FCreateTextureObjectResult)) },


{ ERASE_METHOD_PTR(UDataflowEditorUpdateWeightMapProperties, SetName, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USkeletonModifier, AddBone, (const FName, const FName, const FTransform&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, AddBones, (const TArray<FName>&, const TArray<FName>&, const TArray<FTransform>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, CommitSkeletonToSkeletalMesh, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, GetAllBoneNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(USkeletonModifier, GetBoneTransform, (const FName, const bool = false), ERASE_ARGUMENT_PACK(FTransform)) },
{ ERASE_METHOD_PTR(USkeletonModifier, GetChildrenNames, (const FName, const bool = false), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(USkeletonModifier, GetParentName, (const FName), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(USkeletonModifier, MirrorBone, (const FName, const FMirrorOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, MirrorBones, (const TArray<FName>&, const FMirrorOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, OrientBone, (const FName, const FOrientOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, OrientBones, (const TArray<FName>&, const FOrientOptions&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, ParentBone, (const FName, const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, ParentBones, (const TArray<FName>&, const TArray<FName>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, RemoveBone, (const FName, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, RemoveBones, (const TArray<FName>&, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, RenameBone, (const FName, const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, RenameBones, (const TArray<FName>&, const TArray<FName>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, SetBonesTransforms, (const TArray<FName>&, const TArray<FTransform>&, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, SetBoneTransform, (const FName, const FTransform&, const bool), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkeletonModifier, SetSkeletalMesh, (USkeletalMesh), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USkinWeightModifier, CommitWeightsToSkeletalMesh, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, EnforceMaxInfluences, (const int = - 1), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, GetAllBoneNames, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, GetNumVertices, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, GetSkeletalMesh, (), ERASE_ARGUMENT_PACK(USkeletalMesh*)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, GetVertexWeights, (const int), ERASE_ARGUMENT_PACK(TMap<FName,float>)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, NormalizeAllWeights, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, NormalizeVertexWeights, (const int), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, PruneAllWeights, (const float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, PruneVertexWeights, (const int, const float32), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, SetSkeletalMesh, (USkeletalMesh), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USkinWeightModifier, SetVertexWeights, (const int, const TMap<FName,float32>&, const bool = false), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USkeletonEditingProperties, SetName, (const FName&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UInterchangeImportTestPlan, RunThisTest, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceKey, GetValue, (), ERASE_ARGUMENT_PACK(FMovieSceneObjectBindingID)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceKey, SetValue, (const FMovieSceneObjectBindingID&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, AddKey, (const FFrameNumber, FMovieSceneObjectBindingID, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(UMovieSceneScriptingActorReferenceKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, GetDefault, (), ERASE_ARGUMENT_PACK(FMovieSceneObjectBindingID)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingActorReferenceChannel, SetDefault, (FMovieSceneObjectBindingID), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolKey, GetValue, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolKey, SetValue, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, AddKey, (const FFrameNumber&, bool, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(UMovieSceneScriptingBoolKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, ComputeEffectiveRange, (), ERASE_ARGUMENT_PACK(FSequencerScriptingRange)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, EvaluateKeys, (FSequencerScriptingRange, FFrameRate), ERASE_ARGUMENT_PACK(TArray<bool>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, GetDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, GetNumKeys, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingBoolChannel, SetDefault, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingByteKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteKey, GetValue, (), ERASE_ARGUMENT_PACK(uint328)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteKey, SetValue, (uint8), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, AddKey, (const FFrameNumber&, uint8, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate, EMovieSceneKeyInterpolation = EMovieSceneKeyInterpolation :: Auto), ERASE_ARGUMENT_PACK(UMovieSceneScriptingByteKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, GetDefault, (), ERASE_ARGUMENT_PACK(uint328)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingByteChannel, SetDefault, (uint8), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetArriveTangent, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetArriveTangentWeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetInterpolationMode, (), ERASE_ARGUMENT_PACK(ERichCurveInterpMode)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetLeaveTangent, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetLeaveTangentWeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetTangentMode, (), ERASE_ARGUMENT_PACK(ERichCurveTangentMode)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetTangentWeightMode, (), ERASE_ARGUMENT_PACK(ERichCurveTangentWeightMode)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, GetValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetArriveTangent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetArriveTangentWeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetInterpolationMode, (ERichCurveInterpMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetLeaveTangent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetLeaveTangentWeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetTangentMode, (ERichCurveTangentMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetTangentWeightMode, (ERichCurveTangentWeightMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleKey, SetValue, (float), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, AddKey, (const FFrameNumber&, float, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate, EMovieSceneKeyInterpolation = EMovieSceneKeyInterpolation :: Auto), ERASE_ARGUMENT_PACK(UMovieSceneScriptingDoubleKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, ComputeEffectiveRange, (), ERASE_ARGUMENT_PACK(FSequencerScriptingRange)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, EvaluateKeys, (FSequencerScriptingRange, FFrameRate), ERASE_ARGUMENT_PACK(TArray<float>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, GetDefault, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, GetNumKeys, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, GetPostInfinityExtrapolation, (), ERASE_ARGUMENT_PACK(ERichCurveExtrapolation)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, GetPreInfinityExtrapolation, (), ERASE_ARGUMENT_PACK(ERichCurveExtrapolation)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, SetDefault, (float), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, SetPostInfinityExtrapolation, (ERichCurveExtrapolation), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingDoubleChannel, SetPreInfinityExtrapolation, (ERichCurveExtrapolation), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingEventKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingEventKey, GetValue, (), ERASE_ARGUMENT_PACK(FMovieSceneEvent)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingEventKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingEventKey, SetValue, (const FMovieSceneEvent&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingEventChannel, AddKey, (const FFrameNumber&, FMovieSceneEvent, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(UMovieSceneScriptingEventKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingEventChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingEventChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingEventChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetArriveTangent, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetArriveTangentWeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetInterpolationMode, (), ERASE_ARGUMENT_PACK(ERichCurveInterpMode)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetLeaveTangent, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetLeaveTangentWeight, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetTangentMode, (), ERASE_ARGUMENT_PACK(ERichCurveTangentMode)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetTangentWeightMode, (), ERASE_ARGUMENT_PACK(ERichCurveTangentWeightMode)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, GetValue, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetArriveTangent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetArriveTangentWeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetInterpolationMode, (ERichCurveInterpMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetLeaveTangent, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetLeaveTangentWeight, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetTangentMode, (ERichCurveTangentMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetTangentWeightMode, (ERichCurveTangentWeightMode), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatKey, SetValue, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, AddKey, (const FFrameNumber&, float32, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate, EMovieSceneKeyInterpolation = EMovieSceneKeyInterpolation :: Auto), ERASE_ARGUMENT_PACK(UMovieSceneScriptingFloatKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, ComputeEffectiveRange, (), ERASE_ARGUMENT_PACK(FSequencerScriptingRange)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, EvaluateKeys, (FSequencerScriptingRange, FFrameRate), ERASE_ARGUMENT_PACK(TArray<float>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, GetDefault, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, GetNumKeys, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, GetPostInfinityExtrapolation, (), ERASE_ARGUMENT_PACK(ERichCurveExtrapolation)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, GetPreInfinityExtrapolation, (), ERASE_ARGUMENT_PACK(ERichCurveExtrapolation)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, SetDefault, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, SetPostInfinityExtrapolation, (ERichCurveExtrapolation), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingFloatChannel, SetPreInfinityExtrapolation, (ERichCurveExtrapolation), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerKey, GetValue, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerKey, SetValue, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, AddKey, (const FFrameNumber&, int, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(UMovieSceneScriptingIntegerKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, EvaluateKeys, (FSequencerScriptingRange, FFrameRate), ERASE_ARGUMENT_PACK(TArray<int>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, GetDefault, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, GetNumKeys, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingIntegerChannel, SetDefault, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathKey, GetValue, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathKey, SetValue, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, AddKey, (const FFrameNumber, UObject, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(UMovieSceneScriptingObjectPathKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, GetDefault, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingObjectPathChannel, SetDefault, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingStringKey, GetTime, (EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(FFrameTime)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringKey, GetValue, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringKey, SetTime, (const FFrameNumber&, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringKey, SetValue, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, AddKey, (const FFrameNumber&, FString, float32 = 0.000000, EMovieSceneTimeUnit = EMovieSceneTimeUnit :: DisplayRate), ERASE_ARGUMENT_PACK(UMovieSceneScriptingStringKey*)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, GetDefault, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, GetKeys, (), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, GetKeysByIndex, (const TArray<int>&), ERASE_ARGUMENT_PACK(TArray<UMovieSceneScriptingKey>)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, HasDefault, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, RemoveDefault, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, RemoveKey, (UMovieSceneScriptingKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMovieSceneScriptingStringChannel, SetDefault, (FString), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(USequencerCurveEditorObject, CloseCurveEditor, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, DeleteColorForChannels, (UClass, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, EmptySelection, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, GetChannelsWithSelectedKeys, (), ERASE_ARGUMENT_PACK(TArray<FSequencerChannelProxy>)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, GetCustomColorForChannel, (UClass, const FString&), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, GetSelectedKeys, (const FSequencerChannelProxy&), ERASE_ARGUMENT_PACK(TArray<int>)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, HasCustomColorForChannel, (UClass, const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, IsCurveEditorOpen, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, OpenCurveEditor, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, SelectKeys, (const FSequencerChannelProxy&, const TArray<int>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, SetCustomColorForChannel, (UClass, const FString&, const FLinearColor&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, SetCustomColorForChannels, (UClass, const TArray<FString>&, const TArray<FLinearColor>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USequencerCurveEditorObject, SetRandomColorForChannels, (UClass, const TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, AddActors, (const TArray<AActor*>&), ERASE_ARGUMENT_PACK(TArray<FMovieSceneBindingProxy>)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, AddActorsToBinding, (const TArray<AActor*>&, const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, BakeTransform, (const TArray<FMovieSceneBindingProxy>&, const FFrameTime&, const FFrameTime&, const FFrameTime&, const FMovieSceneScriptingParams&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, BakeTransformWithSettings, (const TArray<FMovieSceneBindingProxy>&, const FBakingAnimationKeySettings&, const FMovieSceneScriptingParams&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, ConvertToPossessable, (const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(FMovieSceneBindingProxy)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, ConvertToSpawnable, (const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(TArray<FMovieSceneBindingProxy>)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, CopyBindings, (const TArray<FMovieSceneBindingProxy>&, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, CopyFolders, (const TArray<UMovieSceneFolder>&, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, CopySections, (const TArray<UMovieSceneSection>&, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, CopyTracks, (const TArray<UMovieSceneTrack>&, FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, CreateCamera, (bool, ACineCameraActor&), ERASE_ARGUMENT_PACK(FMovieSceneBindingProxy)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, FixActorReferences, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, GetCurveEditor, (), ERASE_ARGUMENT_PACK(USequencerCurveEditorObject*)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, GetScriptingLayer, (), ERASE_ARGUMENT_PACK(USequencerModuleScriptingLayer*)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, PasteBindings, (const FString&, FMovieScenePasteBindingsParams, TArray<FMovieSceneBindingProxy>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, PasteFolders, (const FString&, FMovieScenePasteFoldersParams, TArray<UMovieSceneFolder>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, PasteSections, (const FString&, FMovieScenePasteSectionsParams, TArray<UMovieSceneSection>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, PasteTracks, (const FString&, FMovieScenePasteTracksParams, TArray<UMovieSceneTrack>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, RebindComponent, (const TArray<FMovieSceneBindingProxy>&, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, RemoveActorsFromBinding, (const TArray<AActor*>&, const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, RemoveAllBindings, (const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, RemoveInvalidBindings, (const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, ReplaceBindingWithActors, (const TArray<AActor*>&, const FMovieSceneBindingProxy&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, SnapSectionsToTimelineUsingSourceTimecode, (const TArray<UMovieSceneSection>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(ULevelSequenceEditorSubsystem, SyncSectionsUsingSourceTimecode, (const TArray<UMovieSceneSection>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(ULevelSequenceWithShotsSettings, SetName, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UControlRigContextMenuContext, GetControlRig, (), ERASE_ARGUMENT_PACK(UControlRig*)) },
{ ERASE_METHOD_PTR(UControlRigContextMenuContext, GetControlRigBlueprint, (), ERASE_ARGUMENT_PACK(UControlRigBlueprint*)) },
{ ERASE_METHOD_PTR(UControlRigContextMenuContext, GetGraphNodeContextMenuContext, (), ERASE_ARGUMENT_PACK(FControlRigGraphNodeContextMenuContext)) },
{ ERASE_METHOD_PTR(UControlRigContextMenuContext, GetRigHierarchyDragAndDropContext, (), ERASE_ARGUMENT_PACK(FControlRigRigHierarchyDragAndDropContext)) },
{ ERASE_METHOD_PTR(UControlRigContextMenuContext, GetRigHierarchyToGraphDragAndDropContext, (), ERASE_ARGUMENT_PACK(FControlRigRigHierarchyToGraphDragAndDropContext)) },
{ ERASE_METHOD_PTR(UControlRigContextMenuContext, IsAltDown, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeCollision, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetMakeMaterialsCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeNormalMapCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeDetailMapCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeSpecularMapCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeBranchSeamSmoothing, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeSpeedTreeAO, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeColorAdjustment, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeSubsurface, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeVertexProcessingCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeWindCheck, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(USpeedTreeImportData, SetIncludeSmoothLODCheck, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UImgMediaSource, AddTargetObject, (AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImgMediaSource, GetProxies, (TArray<FString>&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImgMediaSource, GetSequencePath, (), ERASE_ARGUMENT_PACK(const FString)) },
{ ERASE_METHOD_PTR(UImgMediaSource, RemoveTargetObject, (AActor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImgMediaSource, SetSequencePath, (const FString&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UImgMediaSource, SetTokenizedSequencePath, (const FString&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UMediaPlateComponent, Close, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetIsAspectRatioAuto, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetLetterboxAspectRatio, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetLoop, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetMediaPlayer, (), ERASE_ARGUMENT_PACK(UMediaPlayer*)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetMediaTexture, (int = 0), ERASE_ARGUMENT_PACK(UMediaTexture*)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetMeshRange, (), ERASE_ARGUMENT_PACK(FVector2D)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, IsMediaPlatePlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, Open, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, Pause, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, Play, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, Rewind, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, Seek, (const FTimespan&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetIsAspectRatioAuto, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetLetterboxAspectRatio, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetLoop, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetMeshRange, (FVector2D), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetPlayOnlyWhenVisible, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetbIsMediaPlatePlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetbLoop, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetbLoop, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, GetbIsAspectRatioAuto, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UMediaPlateComponent, SetbIsAspectRatioAuto, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAudioCapture, GetAudioCaptureDeviceInfo, (FAudioCaptureDeviceInfo&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAudioCapture, IsCapturingAudio, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAudioCapture, StartCapturingAudio, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UAudioCapture, StopCapturingAudio, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UAssetTagsSubsystem, AddAssetDatasToCollection, (const FName, const TArray<FAssetData>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, AddAssetDataToCollection, (const FName, const FAssetData&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, AddAssetPtrsToCollection, (const FName, const TArray<UObject*>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, AddAssetPtrToCollection, (const FName, const UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, AddAssetsToCollection, (const FName, const TArray<FName>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, AddAssetToCollection, (const FName, const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, CollectionExists, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, CreateCollection, (const FName, const ECollectionScriptingShareType), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, DestroyCollection, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, EmptyCollection, (const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, GetAssetsInCollection, (const FName), ERASE_ARGUMENT_PACK(TArray<FAssetData>)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, GetCollections, (), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, GetCollectionsContainingAsset, (const FName), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, GetCollectionsContainingAssetData, (const FAssetData&), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, GetCollectionsContainingAssetPtr, (const UObject), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, K2_AddAssetsToCollection, (const FName, const TArray<FSoftObjectPath>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, K2_AddAssetToCollection, (const FName, const FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, K2_GetCollectionsContainingAsset, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(TArray<FName>)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, K2_RemoveAssetFromCollection, (const FName, const FSoftObjectPath&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, K2_RemoveAssetsFromCollection, (const FName, const TArray<FSoftObjectPath>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RemoveAssetDataFromCollection, (const FName, const FAssetData&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RemoveAssetDatasFromCollection, (const FName, const TArray<FAssetData>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RemoveAssetFromCollection, (const FName, const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RemoveAssetPtrFromCollection, (const FName, const UObject), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RemoveAssetPtrsFromCollection, (const FName, const TArray<UObject*>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RemoveAssetsFromCollection, (const FName, const TArray<FName>&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, RenameCollection, (const FName, const FName), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UAssetTagsSubsystem, ReparentCollection, (const FName, const FName), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(AGeometryCacheActor, GetGeometryCacheComponent, (), ERASE_ARGUMENT_PACK(UGeometryCacheComponent*)) },
{ ERASE_METHOD_PTR(AGeometryCacheActor, SetGeometryCacheComponent, (UGeometryCacheComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetAnimationTime, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetDuration, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetMotionVectorScale, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetNumberOfFrames, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetOverrideWireframeColor, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetPlaybackDirection, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetPlaybackSpeed, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetStartTimeOffset, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetWireframeOverrideColor, (), ERASE_ARGUMENT_PACK(FLinearColor)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, IsExtrapolatingFrames, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, IsLooping, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, IsPlaying, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, IsPlayingReversed, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, Pause, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, Play, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, PlayFromStart, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, PlayReversed, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, PlayReversedFromEnd, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetExtrapolateFrames, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetGeometryCache, (UGeometryCache), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetLooping, (const bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetMotionVectorScale, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetOverrideWireframeColor, (bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetPlaybackSpeed, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetStartTimeOffset, (const float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, SetWireframeOverrideColor, (const FLinearColor), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, Stop, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, TickAtThisTime, (const float32, bool, bool, bool), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UGeometryCacheComponent, GetGeometryCache, (), ERASE_ARGUMENT_PACK(UGeometryCache*)) },


{ ERASE_METHOD_PTR(UMobileInstalledContent, GetDiskFreeSpace, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobileInstalledContent, GetInstalledContentSize, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobileInstalledContent, Mount, (int, const FString&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UMobilePendingContent, GetDownloadSize, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobilePendingContent, GetDownloadSpeed, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobilePendingContent, GetDownloadStatusText, (), ERASE_ARGUMENT_PACK(FText)) },
{ ERASE_METHOD_PTR(UMobilePendingContent, GetInstallProgress, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobilePendingContent, GetRequiredDiskSpace, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobilePendingContent, GetTotalDownloadedSize, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(UMobilePendingContent, StartInstall, (FOnContentInstallSucceeded = FOnContentInstallSucceeded ( ), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetColumnsToExclude, (), ERASE_ARGUMENT_PACK(TSet<FName>)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetColumnsToShowByDefault, (), ERASE_ARGUMENT_PACK(TSet<FName>)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetForceAddedColumns, (), ERASE_ARGUMENT_PACK(TSet<FName>)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetObjectClassesToFilter, (), ERASE_ARGUMENT_PACK(TSet<UClass>)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetObjectClassesToPlace, (), ERASE_ARGUMENT_PACK(TSet<TSubclassOf<AActor>>)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetObjectMixerPlacementClassInclusionOptions, (), ERASE_ARGUMENT_PACK(EObjectMixerInheritanceInclusionOptions)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetObjectMixerPropertyInheritanceInclusionOptions, (), ERASE_ARGUMENT_PACK(EObjectMixerInheritanceInclusionOptions)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetPropertiesThatRequireListRefresh, (), ERASE_ARGUMENT_PACK(TSet<FName>)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, GetShowTransientObjects, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(UObjectMixerBlueprintObjectFilter, ShouldIncludeUnsupportedProperties, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UAssetToolsStatics, IsFixupReferencersInProgress, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UScriptableFactory, CreateFromBinary, (UClass, UObject, FName, int, UObject, const TArray<uint8>&), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UScriptableFactory, CreateFromText, (UClass, UObject, FName, int, UObject, const FString&), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(UScriptableFactory, CreateOrOverwriteAsset, (UClass, UObject, FName, int), ERASE_ARGUMENT_PACK(UObject*)) },


{ ERASE_METHOD_PTR(UScriptEditorMenuExtension, ShouldExtend, (), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UScriptActorMenuExtension, SupportsActor, (AActor), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UScriptAssetMenuExtension, SupportsAsset, (FAssetData), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(UScriptEditorSubsystem, Deinitialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptEditorSubsystem, Initialize, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(UScriptEditorSubsystem, ShouldCreateSubsystem, (UObject), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(FQuat, opAssign, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat&)) },
{ ERASE_METHOD_PTR(FQuat, opAdd, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opSub, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opAddAssign, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opSubAssign, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opEquals, (const FQuat&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat, Equals, (const FQuat&, float = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat, IsIdentity, (float = SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat, opMul, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opMulAssign, (const FQuat&), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opMul, (float), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opMulAssign, (float), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opDiv, (float), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, opDivAssign, (float), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, Normalize, (float = SMALL_NUMBER), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat, GetNormalized, (float = SMALL_NUMBER), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, IsNormalized, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat, Size, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat, SizeSquared, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat, GetAngle, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat, Log, (), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, Exp, (), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, Inverse, (), ERASE_ARGUMENT_PACK(FQuat)) },
{ ERASE_METHOD_PTR(FQuat, AngularDistance, (const FQuat&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat, ContainsNaN, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat, EnforceShortestArcWith, (const FQuat&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat, ToAxisAndAngle, (FVector&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat, ToAxisAndAngle, (FVector&, float&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat, opMul, (const FVector&), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, Euler, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, RotateVector, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, UnrotateVector, (FVector), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetAxisX, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetAxisY, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetAxisZ, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetForwardVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetRightVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetUpVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, Vector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, GetRotationAxis, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FQuat, Rotator, (), ERASE_ARGUMENT_PACK(FRotator)) },
{ ERASE_METHOD_PTR(FQuat, ToSwingTwist, (const FVector&, FQuat&, FQuat&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat, GetTwistAngle, (const FVector&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat, InitFromString, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat, ToString, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(FQuat4f, opAssign, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f&)) },
{ ERASE_METHOD_PTR(FQuat4f, opAdd, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opSub, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opAddAssign, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opSubAssign, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opEquals, (const FQuat4f&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat4f, Equals, (const FQuat4f&, float32 = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat4f, IsIdentity, (float32 = SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat4f, opMul, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opMulAssign, (const FQuat4f&), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opMul, (float32), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opMulAssign, (float32), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opDiv, (float32), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, opDivAssign, (float32), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, Normalize, (float32 = SMALL_NUMBER), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat4f, GetNormalized, (float32 = SMALL_NUMBER), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, IsNormalized, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat4f, Size, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat4f, SizeSquared, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat4f, GetAngle, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat4f, Log, (), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, Exp, (), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, Inverse, (), ERASE_ARGUMENT_PACK(FQuat4f)) },
{ ERASE_METHOD_PTR(FQuat4f, AngularDistance, (const FQuat4f&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat4f, ContainsNaN, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat4f, EnforceShortestArcWith, (const FQuat4f&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat4f, ToAxisAndAngle, (FVector3f&, float32&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat4f, opMul, (const FVector3f&), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, Euler, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, RotateVector, (FVector3f), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, UnrotateVector, (FVector3f), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetAxisX, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetAxisY, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetAxisZ, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetForwardVector, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetRightVector, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetUpVector, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, Vector, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, GetRotationAxis, (), ERASE_ARGUMENT_PACK(FVector3f)) },
{ ERASE_METHOD_PTR(FQuat4f, Rotator, (), ERASE_ARGUMENT_PACK(FRotator3f)) },
{ ERASE_METHOD_PTR(FQuat4f, ToSwingTwist, (const FVector3f&, FQuat4f&, FQuat4f&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FQuat4f, GetTwistAngle, (const FVector3f&), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FQuat4f, InitFromString, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FQuat4f, ToString, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(FRandomStream, Initialize, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FRandomStream, Initialize, (uint), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FRandomStream, Reset, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FRandomStream, GetInitialSeed, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FRandomStream, GenerateNewSeed, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FRandomStream, GetFraction, (), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FRandomStream, GetUnsignedInt, (), ERASE_ARGUMENT_PACK(uint32)) },
{ ERASE_METHOD_PTR(FRandomStream, GetCurrentSeed, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FRandomStream, RandRange, (int, int), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FRandomStream, RandRange, (float, float), ERASE_ARGUMENT_PACK(float)) },
{ ERASE_METHOD_PTR(FRandomStream, Initialize, (FName), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FRandomStream, GetUnitVector, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FRandomStream, VRand, (), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FRandomStream, VRandCone, (const FVector&, float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FRandomStream, VRandCone, (const FVector&, float32, float32), ERASE_ARGUMENT_PACK(FVector)) },
{ ERASE_METHOD_PTR(FRandomStream, ToString, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(FCollisionObjectQueryParams, AddObjectTypesToQuery, (ECollisionChannel), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCollisionObjectQueryParams, RemoveObjectTypesToQuery, (ECollisionChannel), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCollisionObjectQueryParams, GetQueryBitfield, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FCollisionObjectQueryParams, IsValid, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FCollisionObjectQueryParams, DoVerify, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetAlwaysSign, (bool), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetUseGrouping, (bool), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetRoundingMode, (ERoundingMode), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetMinimumIntegralDigits, (int), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetMaximumIntegralDigits, (int), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetMinimumFractionalDigits, (int), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, SetMaximumFractionalDigits, (int), ERASE_ARGUMENT_PACK(FNumberFormattingOptions&)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, GetTypeHash, (), ERASE_ARGUMENT_PACK(uint32)) },
{ ERASE_METHOD_PTR(FNumberFormattingOptions, IsIdentical, (const FNumberFormattingOptions&), ERASE_ARGUMENT_PACK(bool)) },


{ ERASE_METHOD_PTR(FSphere3f, opAdd, (const FSphere3f&), ERASE_ARGUMENT_PACK(FSphere3f)) },
{ ERASE_METHOD_PTR(FSphere3f, opAddAssign, (const FSphere3f&), ERASE_ARGUMENT_PACK(FSphere3f&)) },
{ ERASE_METHOD_PTR(FSphere3f, Equals, (const FSphere3f&, float32 = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere3f, IsInside, (const FSphere3f&, float32 = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere3f, Intersects, (const FSphere3f&, float32 = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere3f, GetVolume, (), ERASE_ARGUMENT_PACK(float)) },


{ ERASE_METHOD_PTR(FIntVector2, opAssign, (const FIntVector2&), ERASE_ARGUMENT_PACK(FIntVector2&)) },
{ ERASE_METHOD_PTR(FIntVector2, opIndex, (int), ERASE_ARGUMENT_PACK(const int&)) },
{ ERASE_METHOD_PTR(FIntVector2, opEquals, (const FIntVector2&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FIntVector2, ToString, (), ERASE_ARGUMENT_PACK(FString)) },


{ ERASE_METHOD_PTR(FString, opAssign, (const FString&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FString&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opEquals, (const FString&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, opCmp, (const FString&), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FString&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opIndex, (int), ERASE_ARGUMENT_PACK(int16&)) },
{ ERASE_METHOD_PTR(FString, opIndex, (int), ERASE_ARGUMENT_PACK(const int16&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FString&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, AppendChar, (int16), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Empty, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FString, Empty, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FString, IsEmpty, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, Reset, (int = 0), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FString, Reserve, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FString, Shrink, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FString, IsValidIndex, (int), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FString, Len, (), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FString, IsNumeric, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, Reverse, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, RemoveFromStart, (const FString&, ESearchCase = ESearchCase :: IgnoreCase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, RemoveFromEnd, (const FString&, ESearchCase = ESearchCase :: IgnoreCase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, Left, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, LeftChop, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, Right, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, RightChop, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, Mid, (int, int = MAX_int32), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, Split, (const FString&, FString&, FString&, ESearchCase = ESearchCase :: IgnoreCase, ESearchDir = ESearchDir :: FromStart), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, Replace, (const FString&, const FString&, ESearchCase = ESearchCase :: IgnoreCase), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, Find, (const FString&, ESearchCase = ESearchCase :: IgnoreCase, ESearchDir = ESearchDir :: FromStart, int = - 1), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FString, Contains, (const FString&, ESearchCase = ESearchCase :: IgnoreCase, ESearchDir = ESearchDir :: FromStart), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, FindChar, (int16, int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, FindLastChar, (int16, int&), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, StartsWith, (const FString&, ESearchCase = ESearchCase :: IgnoreCase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, EndsWith, (const FString&, ESearchCase = ESearchCase :: IgnoreCase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, MatchesWildcard, (const FString&, ESearchCase = ESearchCase :: IgnoreCase), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, Equals, (const FString&, ESearchCase = ESearchCase :: CaseSensitive), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, ToUpper, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, ToLower, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, LeftPad, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, RightPad, (int), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, TrimQuotes, (bool&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, TrimStartAndEnd, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, TrimStart, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, TrimEnd, (), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, Compare, (const FString&, ESearchCase = ESearchCase :: CaseSensitive), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FString, ToBool, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FString, ToDisplayName, (bool = false), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, GetHash, (), ERASE_ARGUMENT_PACK(uint32)) },
{ ERASE_METHOD_PTR(FString, opAdd_r, (const FName&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign_r, (const FName&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FQuat&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FQuat&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FQuat&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FQuat4f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FQuat4f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FQuat4f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FRandomStream&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FRandomStream&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FRandomStream&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FIntVector2&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FIntVector2&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FIntVector2&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FIntVector4&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FIntVector4&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FIntVector4&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FRotator&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FRotator&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FRotator&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FIntVector&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FIntVector&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FIntVector&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FBox3f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FBox3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FBox3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FBoxSphereBounds3f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FBoxSphereBounds3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FBoxSphereBounds3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FRotator3f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FRotator3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FRotator3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FBox&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FBox&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FBox&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const int8&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const int8&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const int8&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const int16&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const int16&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const int16&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const int&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const int&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const int&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const int64&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const int64&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const int64&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const uint8&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const uint8&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const uint8&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const uint16&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const uint16&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const uint16&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const uint&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const uint&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const uint&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const uint64&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const uint64&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const uint64&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const float32&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const float32&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const float32&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const float&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const float&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const float&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const bool&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const bool&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const bool&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FLinearColor&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FLinearColor&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FLinearColor&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FVector4f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FVector4f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FVector4f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FBoxSphereBounds&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FBoxSphereBounds&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FBoxSphereBounds&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FVector4&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FVector4&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FVector4&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FVector3f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FVector3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FVector3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FVector2f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FVector2f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FVector2f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FVector2D&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FVector2D&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FVector2D&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FVector&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FVector&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FVector&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FTransform3f&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FTransform3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FTransform3f&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FTransform&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FTransform&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FTransform&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FText&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FText&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FText&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FName&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FName&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FName&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const UObject), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const UObject), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const UObject), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FGameplayTag&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FGameplayTag&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FGameplayTag&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FDateTime&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FDateTime&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FDateTime&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FKey&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FKey&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FKey&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FSoftObjectPath&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FSoftClassPath&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FSoftClassPath&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FSoftClassPath&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FPrimaryAssetType&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FPrimaryAssetType&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FPrimaryAssetType&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FPrimaryAssetId&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FPrimaryAssetId&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FPrimaryAssetId&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FTopLevelAssetPath&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FTopLevelAssetPath&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FTopLevelAssetPath&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const FColor&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const FColor&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const FColor&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, opAdd, (const ?&), ERASE_ARGUMENT_PACK(FString)) },
{ ERASE_METHOD_PTR(FString, opAddAssign, (const ?&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, Append, (const ?&), ERASE_ARGUMENT_PACK(FString&)) },
{ ERASE_METHOD_PTR(FString, ParseIntoArray, (TArray<FString>&, const FString&, bool = true), ERASE_ARGUMENT_PACK(int)) },
{ ERASE_METHOD_PTR(FString, ParseIntoArray, (TArray<FString>&, const TArray<FString>&, bool = true), ERASE_ARGUMENT_PACK(int)) },


{ ERASE_METHOD_PTR(FSphere, opAdd, (const FSphere&), ERASE_ARGUMENT_PACK(FSphere)) },
{ ERASE_METHOD_PTR(FSphere, opAddAssign, (const FSphere&), ERASE_ARGUMENT_PACK(FSphere&)) },
{ ERASE_METHOD_PTR(FSphere, Equals, (const FSphere&, float = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere, IsInside, (const FSphere&, float = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere, IsInside, (const FVector&, float = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere, Intersects, (const FSphere&, float = KINDA_SMALL_NUMBER), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FSphere, TransformBy, (const FTransform&), ERASE_ARGUMENT_PACK(FSphere)) },
{ ERASE_METHOD_PTR(FSphere, GetVolume, (), ERASE_ARGUMENT_PACK(float)) },


{ ERASE_METHOD_PTR(FAnimDataModelModifiedDynamicEvent, opAssign, (const FAnimDataModelModifiedDynamicEvent&), ERASE_ARGUMENT_PACK(FAnimDataModelModifiedDynamicEvent&)) },
{ ERASE_METHOD_PTR(FAnimDataModelModifiedDynamicEvent, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FAnimDataModelModifiedDynamicEvent, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FAnimDataModelModifiedDynamicEvent, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FAnimDataModelModifiedDynamicEvent, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FAnimDataModelModifiedDynamicEvent, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FBreakEventSignature, opAssign, (const FBreakEventSignature&), ERASE_ARGUMENT_PACK(FBreakEventSignature&)) },
{ ERASE_METHOD_PTR(FBreakEventSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FBreakEventSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FBreakEventSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FBreakEventSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FBreakEventSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FBreakEventSignature, Broadcast, (const TArray<FChaosBreakEvent>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, opAssign, (const FCharacterMovementUpdatedSignature&), ERASE_ARGUMENT_PACK(FCharacterMovementUpdatedSignature&)) },
{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterMovementUpdatedSignature, Broadcast, (float32, FVector, FVector), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, opAssign, (const FCharacterReachedApexSignature&), ERASE_ARGUMENT_PACK(FCharacterReachedApexSignature&)) },
{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCharacterReachedApexSignature, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FCollisionEventSignature, opAssign, (const FCollisionEventSignature&), ERASE_ARGUMENT_PACK(FCollisionEventSignature&)) },
{ ERASE_METHOD_PTR(FCollisionEventSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FCollisionEventSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCollisionEventSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCollisionEventSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCollisionEventSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCollisionEventSignature, Broadcast, (const TArray<FCollisionChaosEvent>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FConstraintBrokenSignature, opAssign, (const FConstraintBrokenSignature&), ERASE_ARGUMENT_PACK(FConstraintBrokenSignature&)) },
{ ERASE_METHOD_PTR(FConstraintBrokenSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FConstraintBrokenSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FConstraintBrokenSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FConstraintBrokenSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FConstraintBrokenSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FConstraintBrokenSignature, Broadcast, (int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FCrumblingEventSignature, opAssign, (const FCrumblingEventSignature&), ERASE_ARGUMENT_PACK(FCrumblingEventSignature&)) },
{ ERASE_METHOD_PTR(FCrumblingEventSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FCrumblingEventSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCrumblingEventSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCrumblingEventSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCrumblingEventSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FCrumblingEventSignature, Broadcast, (const TArray<FChaosCrumblingEvent>&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, opAssign, (const FEmptyOnlineDelegate&), ERASE_ARGUMENT_PACK(FEmptyOnlineDelegate&)) },
{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FEmptyOnlineDelegate, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, opAssign, (const FHardwareInputDeviceChanged&), ERASE_ARGUMENT_PACK(FHardwareInputDeviceChanged&)) },
{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FHardwareInputDeviceChanged, Broadcast, (const FPlatformUserId, const FInputDeviceId), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, opAssign, (const FInputActionHandlerDynamicSignature&), ERASE_ARGUMENT_PACK(FInputActionHandlerDynamicSignature&)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, Execute, (FKey), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputActionHandlerDynamicSignature, ExecuteIfBound, (FKey), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, opAssign, (const FInputAxisHandlerDynamicSignature&), ERASE_ARGUMENT_PACK(FInputAxisHandlerDynamicSignature&)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, Execute, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputAxisHandlerDynamicSignature, ExecuteIfBound, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, opAssign, (const FInputGestureHandlerDynamicSignature&), ERASE_ARGUMENT_PACK(FInputGestureHandlerDynamicSignature&)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, Execute, (float32), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputGestureHandlerDynamicSignature, ExecuteIfBound, (float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, opAssign, (const FInputTouchHandlerDynamicSignature&), ERASE_ARGUMENT_PACK(FInputTouchHandlerDynamicSignature&)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, Execute, (ETouchIndex, FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputTouchHandlerDynamicSignature, ExecuteIfBound, (ETouchIndex, FVector), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, opAssign, (const FInputVectorAxisHandlerDynamicSignature&), ERASE_ARGUMENT_PACK(FInputVectorAxisHandlerDynamicSignature&)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, Execute, (FVector), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInputVectorAxisHandlerDynamicSignature, ExecuteIfBound, (FVector), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, opAssign, (const FInstigatedAnyDamageSignature&), ERASE_ARGUMENT_PACK(FInstigatedAnyDamageSignature&)) },
{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FInstigatedAnyDamageSignature, Broadcast, (float32, const UDamageType, AActor, AActor), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FLandedSignature, opAssign, (const FLandedSignature&), ERASE_ARGUMENT_PACK(FLandedSignature&)) },
{ ERASE_METHOD_PTR(FLandedSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FLandedSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLandedSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLandedSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLandedSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLandedSignature, Broadcast, (const FHitResult&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, opAssign, (const FLevelStreamingLoadedStatus&), ERASE_ARGUMENT_PACK(FLevelStreamingLoadedStatus&)) },
{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingLoadedStatus, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, opAssign, (const FLevelStreamingVisibilityStatus&), ERASE_ARGUMENT_PACK(FLevelStreamingVisibilityStatus&)) },
{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FLevelStreamingVisibilityStatus, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FMovementModeChangedSignature, opAssign, (const FMovementModeChangedSignature&), ERASE_ARGUMENT_PACK(FMovementModeChangedSignature&)) },
{ ERASE_METHOD_PTR(FMovementModeChangedSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FMovementModeChangedSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FMovementModeChangedSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FMovementModeChangedSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FMovementModeChangedSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FMovementModeChangedSignature, Broadcast, (ACharacter, EMovementMode, uint8), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnActorReady, opAssign, (const FOnActorReady&), ERASE_ARGUMENT_PACK(FOnActorReady&)) },
{ ERASE_METHOD_PTR(FOnActorReady, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnActorReady, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FOnActorReady, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FOnActorReady, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnActorReady, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnActorReady, Execute, (FActorInstanceHandle), ERASE_ARGUMENT_PACK(FActorInstanceHandle)) },
{ ERASE_METHOD_PTR(FOnActorReady, ExecuteIfBound, (FActorInstanceHandle), ERASE_ARGUMENT_PACK(FActorInstanceHandle)) },


{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, opAssign, (const FOnAllMontageInstancesEndedMCDelegate&), ERASE_ARGUMENT_PACK(FOnAllMontageInstancesEndedMCDelegate&)) },
{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAllMontageInstancesEndedMCDelegate, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAnimInitialized, opAssign, (const FOnAnimInitialized&), ERASE_ARGUMENT_PACK(FOnAnimInitialized&)) },
{ ERASE_METHOD_PTR(FOnAnimInitialized, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAnimInitialized, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAnimInitialized, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAnimInitialized, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAnimInitialized, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAnimInitialized, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, opAssign, (const FOnAsyncHandleSaveGame&), ERASE_ARGUMENT_PACK(FOnAsyncHandleSaveGame&)) },
{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAsyncHandleSaveGame, Broadcast, (USaveGame, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, opAssign, (const FOnAudioFadeChangeSignature&), ERASE_ARGUMENT_PACK(FOnAudioFadeChangeSignature&)) },
{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFadeChangeSignature, Broadcast, (bool, float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioFinished, opAssign, (const FOnAudioFinished&), ERASE_ARGUMENT_PACK(FOnAudioFinished&)) },
{ ERASE_METHOD_PTR(FOnAudioFinished, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioFinished, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFinished, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFinished, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFinished, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioFinished, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, opAssign, (const FOnAudioMultiEnvelopeValue&), ERASE_ARGUMENT_PACK(FOnAudioMultiEnvelopeValue&)) },
{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioMultiEnvelopeValue, Broadcast, (const float32, const float32, const int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, opAssign, (const FOnAudioPlaybackPercent&), ERASE_ARGUMENT_PACK(FOnAudioPlaybackPercent&)) },
{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlaybackPercent, Broadcast, (const USoundWave, const float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, opAssign, (const FOnAudioPlayStateChanged&), ERASE_ARGUMENT_PACK(FOnAudioPlayStateChanged&)) },
{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioPlayStateChanged, Broadcast, (EAudioComponentPlayState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, opAssign, (const FOnAudioSingleEnvelopeValue&), ERASE_ARGUMENT_PACK(FOnAudioSingleEnvelopeValue&)) },
{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioSingleEnvelopeValue, Broadcast, (const USoundWave, const float32), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, opAssign, (const FOnAudioVirtualizationChanged&), ERASE_ARGUMENT_PACK(FOnAudioVirtualizationChanged&)) },
{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnAudioVirtualizationChanged, Broadcast, (bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, opAssign, (const FOnBoneTransformsFinalized&), ERASE_ARGUMENT_PACK(FOnBoneTransformsFinalized&)) },
{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnBoneTransformsFinalized, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, opAssign, (const FOnCanvasRenderTargetUpdate&), ERASE_ARGUMENT_PACK(FOnCanvasRenderTargetUpdate&)) },
{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnCanvasRenderTargetUpdate, Broadcast, (UCanvas, int, int), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, opAssign, (const FOnClusterUnionAddedComponent&), ERASE_ARGUMENT_PACK(FOnClusterUnionAddedComponent&)) },
{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionAddedComponent, Broadcast, (UPrimitiveComponent, const TSet<int>&, bool), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, opAssign, (const FOnClusterUnionBoundsChanged&), ERASE_ARGUMENT_PACK(FOnClusterUnionBoundsChanged&)) },
{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionBoundsChanged, Broadcast, (UClusterUnionComponent, const FBoxSphereBounds&), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, opAssign, (const FOnClusterUnionRemovedComponent&), ERASE_ARGUMENT_PACK(FOnClusterUnionRemovedComponent&)) },
{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnClusterUnionRemovedComponent, Broadcast, (UPrimitiveComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, opAssign, (const FOnDataLayerInstanceRuntimeStateChanged&), ERASE_ARGUMENT_PACK(FOnDataLayerInstanceRuntimeStateChanged&)) },
{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerInstanceRuntimeStateChanged, Broadcast, (const UDataLayerInstance, EDataLayerRuntimeState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, opAssign, (const FOnDataLayerRuntimeStateChanged&), ERASE_ARGUMENT_PACK(FOnDataLayerRuntimeStateChanged&)) },
{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnDataLayerRuntimeStateChanged, Broadcast, (const UDataLayerInstance, EDataLayerRuntimeState), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, opAssign, (const FOnForceFeedbackFinished&), ERASE_ARGUMENT_PACK(FOnForceFeedbackFinished&)) },
{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnForceFeedbackFinished, Broadcast, (UForceFeedbackComponent), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, opAssign, (const FOnGameUserSettingsUINeedsUpdate&), ERASE_ARGUMENT_PACK(FOnGameUserSettingsUINeedsUpdate&)) },
{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, AddUFunction, (const UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, Unbind, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, UnbindObject, (UObject), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnGameUserSettingsUINeedsUpdate, Broadcast, (), ERASE_ARGUMENT_PACK(void)) },


{ ERASE_METHOD_PTR(FOnLocalPlayerSaveGameLoaded, opAssign, (const FOnLocalPlayerSaveGameLoaded&), ERASE_ARGUMENT_PACK(FOnLocalPlayerSaveGameLoaded&)) },
{ ERASE_METHOD_PTR(FOnLocalPlayerSaveGameLoaded, IsBound, (), ERASE_ARGUMENT_PACK(bool)) },
{ ERASE_METHOD_PTR(FOnLocalPlayerSaveGameLoaded, GetUObject, (), ERASE_ARGUMENT_PACK(UObject*)) },
{ ERASE_METHOD_PTR(FOnLocalPlayerSaveGameLoaded, GetFunctionName, (), ERASE_ARGUMENT_PACK(FName)) },
{ ERASE_METHOD_PTR(FOnLocalPlayerSaveGameLoaded, Clear, (), ERASE_ARGUMENT_PACK(void)) },
{ ERASE_METHOD_PTR(FOnLocalPlayerSaveGameLoaded, BindUFunction, (UObject, const FName&), ERASE_ARGUMENT_PACK(void)) },
*/